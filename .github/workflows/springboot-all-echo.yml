name: "🌱 Spring Boot: Init + Upgrade + Build + Run (Maven & Gradle, no-skip)"

on:
  workflow_dispatch:
    inputs:
      group_id:
        description: "Group ID"
        default: "com.example"
      artifact_id:
        description: "Base Artifact ID (각 빌드툴별 접미사 자동 부여)"
        default: "demo"
      project_name:
        description: "프로젝트 표시 이름"
        default: "DemoProject"
      boot_version:
        description: "Spring Boot 버전 (예: 3.3.5)"
        default: "3.3.5"
      java_version:
        description: "JDK 버전"
        default: "17"
      dependencies_csv:
        description: "의존성 CSV (예: web,lombok,actuator)"
        default: "web,lombok"

permissions:
  contents: read

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  init-upgrade-build-run:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        build_tool: [maven, gradle]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare echo helpers & folders
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          echoe(){ printf '%s %s\n' "$ECHO_OK" "$*"; }
          warn(){  printf '%s %s\n' "$ECHO_WARN" "$*"; }
          fail(){  printf '%s %s\n' "$ECHO_FAIL" "$*"; }
          run_log(){ echo "▶ $*"; "$@"; }
          SH
          chmod +x /tmp/echo_helpers.sh
          source /tmp/echo_helpers.sh
          echoe "Echo helpers ready."
          run_log uname -a

      - name: Install required packages (curl, unzip, jq)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_log sudo apt-get update -y
          run_log sudo apt-get install -y curl unzip jq

      - name: Setup Java (enable Maven cache)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}
          cache: maven

      # ===================== Robust Initializr Download (+baseDir) =====================
      - name: Download Spring Initializr ZIP (robust) + baseDir
        id: dl
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh

          BUILD="${{ matrix.build_tool }}"
          TYPE="$([ "${BUILD}" = "gradle" ] && echo gradle-project || echo maven-project)"
          GROUP="${{ inputs.group_id }}"
          BASE_ART="${{ inputs.artifact_id }}"
          ART="$([ "${BUILD}" = "gradle" ] && echo "${BASE_ART}-gradle" || echo "${BASE_ART}-mvn")"
          NAME="${{ inputs.project_name }} ($BUILD)"
          BOOT="${{ inputs.boot_version }}"
          JVER="${{ inputs.java_version }}"
          DEPS="${{ inputs.dependencies_csv }}"
          PRJ_DIR="${ART}"
          ZIP="${PRJ_DIR}.zip"

          UA="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36"
          HEADERS=(-H "Accept: application/zip" -H "User-Agent: ${UA}")
          FORM_COMMON=(
            --data-urlencode "type=${TYPE}"
            --data-urlencode "language=java"
            --data-urlencode "bootVersion=${BOOT}"
            --data-urlencode "groupId=${GROUP}"
            --data-urlencode "artifactId=${ART}"
            --data-urlencode "name=${NAME}"
            --data-urlencode "packageName=${GROUP}.${ART}"
            --data-urlencode "packaging=jar"
            --data-urlencode "javaVersion=${JVER}"
            --data-urlencode "dependencies=${DEPS}"
            --data-urlencode "baseDir=${ART}"
          )

          try_get() {
            local base="$1"
            echoe "GET from ${base}/starter.zip"
            curl -4 -fSsvL --retry 5 --retry-all-errors --retry-delay 2 \
              "${HEADERS[@]}" -G "${base}/starter.zip" \
              "${FORM_COMMON[@]}" -o "${ZIP}"
          }
          try_post() {
            local base="$1"
            echoe "POST form to ${base}/starter.zip"
            curl -4 -fSsvL --retry 5 --retry-all-errors --retry-delay 2 \
              "${HEADERS[@]}" "${base}/starter.zip" \
              -d "type=${TYPE}" \
              -d "language=java" \
              -d "bootVersion=${BOOT}" \
              -d "groupId=${GROUP}" \
              -d "artifactId=${ART}" \
              -d "name=${NAME}" \
              -d "packageName=${GROUP}.${ART}" \
              -d "packaging=jar" \
              -d "javaVersion=${JVER}" \
              -d "dependencies=${DEPS}" \
              -d "baseDir=${ART}" \
              -o "${ZIP}"
          }
          verify_zip() { unzip -t "${ZIP}" >/dev/null 2>&1; }

          BASE1="https://start.spring.io"
          BASE2="https://start.springboot.io"

          if try_get "${BASE1}" && verify_zip; then
            echoe "Downloaded via GET from ${BASE1}"
          elif try_post "${BASE1}" && verify_zip; then
            echoe "Downloaded via POST from ${BASE1}"
          elif try_get "${BASE2}" && verify_zip; then
            echoe "Downloaded via GET from mirror ${BASE2}"
          elif try_post "${BASE2}" && verify_zip; then
            echoe "Downloaded via POST from mirror ${BASE2}"
          else
            fail "All download attempts failed."
            echo "----- DEBUG DUMP (if exists) -----"
            file "${ZIP}" || true
            head -c 400 "${ZIP}" || true
            exit 22
          fi

          echo "zip=${ZIP}" >> $GITHUB_OUTPUT
          echo "prj=${PRJ_DIR}" >> $GITHUB_OUTPUT
          echo "group=${GROUP}" >> $GITHUB_OUTPUT
          echo "artifact=${ART}" >> $GITHUB_OUTPUT

      - name: Save downloaded zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-initializr-zip-${{ matrix.build_tool }}
          path: ${{ steps.dl.outputs.zip }}

      - name: Unzip project (baseDir guarantee + auto-reconstruct)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          PRJ="${{ steps.dl.outputs.prj }}"
          ZIP="${{ steps.dl.outputs.zip }}"
          run_log unzip -q "${ZIP}"
          if [ ! -d "${PRJ}" ]; then
            warn "No base directory '${PRJ}' found. Reconstructing..."
            mkdir -p "${PRJ}"
            for f in pom.xml mvnw mvnw.cmd build.gradle build.gradle.kts gradlew gradlew.bat settings.gradle settings.gradle.kts src; do
              [ -e "$f" ] && mv "$f" "${PRJ}/" || true
            done
            [ "$(ls -A "${PRJ}" | wc -l)" -gt 0 ] || (fail "Reconstruction failed: ${PRJ} is empty" && exit 1)
            echoe "Reconstructed project dir: ${PRJ}"
          fi
          echoe "Project dir ready: ${PRJ}"
          ls -la "${PRJ}" | sed 's/^/  /'

      # ===================== Sample Controller (echo + here-doc) =====================
      - name: Generate HelloController
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          PRJ="${{ steps.dl.outputs.prj }}"
          GROUP="${{ steps.dl.outputs.group }}"
          ART="${{ steps.dl.outputs.artifact }}"
          PKG_DIR="src/main/java/$(echo "${GROUP}" | tr '.' '/')/${ART}"
          FILE="${PRJ}/${PKG_DIR}/HelloController.java"
          run_log mkdir -p "${PRJ}/${PKG_DIR}"
          cat > "${FILE}" <<'JAVA'
          package __PKG__;
          import org.springframework.web.bind.annotation.GetMapping;
          import org.springframework.web.bind.annotation.RestController;
          @RestController
          public class HelloController {
              @GetMapping("/hello")
              public String hello() { return "Hello, Workflow! Spring Boot is running ✅"; }
          }
          JAVA
          sed -i "s#__PKG__#${GROUP}.${ART}#g" "${FILE}"
          echoe "Created: ${FILE}"

      # ===================== CACHES (both) + Prefetch =====================
      - name: Cache Maven repo (multi-key)
        if: ${{ matrix.build_tool == 'maven' }}
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: |
            ${{ runner.os }}-maven-java${{ inputs.java_version }}-boot${{ inputs.boot_version }}-${{ hashFiles(format('{0}/pom.xml', steps.dl.outputs.prj)) }}
          restore-keys: |
            ${{ runner.os }}-maven-java${{ inputs.java_version }}-boot${{ inputs.boot_version }}-
            ${{ runner.os }}-maven-java${{ inputs.java_version }}-
            ${{ runner.os }}-maven-
          save-always: true

      - name: Cache Gradle (caches + wrapper + project .gradle)
        if: ${{ matrix.build_tool == 'gradle' }}
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ steps.dl.outputs.prj }}/.gradle
          key: |
            ${{ runner.os }}-gradle-java${{ inputs.java_version }}-boot${{ inputs.boot_version }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-java${{ inputs.java_version }}-boot${{ inputs.boot_version }}-
            ${{ runner.os }}-gradle-java${{ inputs.java_version }}-
            ${{ runner.os }}-gradle-
          save-always: true

      - name: Prefetch dependencies (Maven go-offline)
        if: ${{ matrix.build_tool == 'maven' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw -B -ntp -DskipTests dependency:go-offline

      - name: Prefetch dependencies (Gradle)
        if: ${{ matrix.build_tool == 'gradle' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x ./gradlew || true
          ./gradlew -q dependencies || true

      # ===================== UPGRADE (Maven / Gradle) =====================
      - name: Upgrade (Maven dependencies & parent/BOM)
        if: ${{ matrix.build_tool == 'maven' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x ./mvnw || true
          # 최신 릴리스 사용 (스냅샷 제외, 백업 POM 미생성)
          ./mvnw -B -ntp versions:use-latest-releases -DallowSnapshots=false -DgenerateBackupPoms=false
          # 부모(spring-boot-starter-parent) 업데이트
          ./mvnw -B -ntp versions:update-parent -DallowSnapshots=false -DgenerateBackupPoms=false || true
          # BOM/프로퍼티 최신화
          ./mvnw -B -ntp versions:update-properties -DallowSnapshots=false -DgenerateBackupPoms=false || true
          # 의존성 그래프 재확인 (네트워크 최신화)
          ./mvnw -B -ntp -U help:effective-pom -DskipTests

      - name: Upgrade (Gradle deps via init script + versions report)
        if: ${{ matrix.build_tool == 'gradle' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x ./gradlew || true
          # 1) 리포트용 플러그인 (ben-manes.versions) 적용용 init script
          mkdir -p ~/.gradle/init.d
          cat > ~/.gradle/init.d/versionsReport.gradle <<'G'
          initscript {
            repositories { gradlePluginPortal(); mavenCentral() }
            dependencies { classpath "com.github.ben-manes:gradle-versions-plugin:0.51.0" }
          }
          allprojects {
            apply plugin: "com.github.ben-manes.versions"
          }
          G
          # 2) 실제 업데이트용 플러그인 (use-latest-versions) 적용용 init script
          cat > ~/.gradle/init.d/useLatestVersions.gradle <<'G'
          initscript {
            repositories { gradlePluginPortal(); mavenCentral() }
            dependencies { classpath "se.patrikerdes:gradle-use-latest-versions-plugin:0.2.18" }
          }
          allprojects {
            apply plugin: "se.patrikerdes.use-latest-versions"
          }
          G
          # 3) 현재 의존성 최신 버전 리포트 생성
          ./gradlew -I ~/.gradle/init.d/versionsReport.gradle dependencyUpdates -Drevision=release || true
          # 4) 최신 버전으로 의존성 실제 업데이트 (가능 범위 내)
          ./gradlew -I ~/.gradle/init.d/useLatestVersions.gradle useLatestVersions || true
          # 5) Gradle Wrapper 최신 안정 버전으로 시도(동 일 major 범위 권장; 실패 무시)
          ./gradlew wrapper || true

      # ===================== BUILD (no skip) =====================
      - name: Build & Test (Maven, no-skip)
        if: ${{ matrix.build_tool == 'maven' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw -B -ntp clean verify

      - name: Build & Test (Gradle, no-skip)
        if: ${{ matrix.build_tool == 'gradle' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x ./gradlew || true
          ./gradlew clean build

      # ===================== RUN → HEALTHCHECK → STOP =====================
      - name: Run app and verify endpoint (absolute log path)
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        timeout-minutes: 8
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh

          PORT="8080"
          PATH_HEALTH="/hello"
          LOG_DIR_ABS="${GITHUB_WORKSPACE}/${LOG_DIR}"
          mkdir -p "${LOG_DIR_ABS}"
          LOG="${LOG_DIR_ABS}/app-run-${{ matrix.build_tool }}.log"

          if [ "${{ matrix.build_tool }}" = "maven" ]; then
            run_cmd="./mvnw -q -Dspring-boot.run.jvmArguments='-Dserver.port=${PORT}' spring-boot:run"
          else
            run_cmd="./gradlew -q bootRun -Pargs=--server.port=${PORT}"
          fi

          echoe "Starting app on port ${PORT} (log: ${LOG})"
          (nohup bash -lc "${run_cmd}" > "${LOG}" 2>&1 & echo $! > app.pid) || true
          sleep 2
          PID="$(cat app.pid || true)"
          test -n "${PID}" || (fail "PID not captured" && tail -n +1 "${LOG}" || true && exit 1)
          echoe "App PID: ${PID}"

          for i in $(seq 1 90); do
            if curl -fsS "http://127.0.0.1:${PORT}${PATH_HEALTH}" >/dev/null 2>&1; then
              echoe "Health OK: GET ${PATH_HEALTH}"
              break
            fi
            sleep 1
            if ! ps -p "${PID}" >/dev/null 2>&1; then
              fail "Process exited early. App log tail ↓"
              tail -n 200 "${LOG}" || true
              exit 1
            fi
            if [ "$i" -eq 90 ]; then
              fail "App not responding on ${PORT}${PATH_HEALTH} within 90s. App log tail ↓"
              tail -n 200 "${LOG}" || true
              exit 1
            fi
          done

          echoe "Requesting ${PATH_HEALTH}"
          curl -fSsv "http://127.0.0.1:${PORT}${PATH_HEALTH}" || true

          echoe "Stopping app PID=${PID}"
          kill "${PID}" || true
          for j in $(seq 1 20); do
            ps -p "${PID}" >/dev/null 2>&1 && sleep 1 || break
          done
          ps -p "${PID}" >/dev/null 2>&1 && (warn "Force kill" && kill -9 "${PID}" || true)

          echoe "Done. Tail of app log:"
          tail -n 120 "${LOG}" || true

      # ===================== ARTIFACTS =====================
      - name: Upload artifacts (project, logs, reports)
        uses: actions/upload-artifact@v4
        with:
          name: spring-out-${{ matrix.build_tool }}
          path: |
            ${{ steps.dl.outputs.prj }}/**
            .github/echo_logs/**
            ${{ steps.dl.outputs.prj }}/build/reports/dependency-updates/**   # gradle report (if exists)

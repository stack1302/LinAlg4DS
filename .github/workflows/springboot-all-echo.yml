name: "🌱 Spring Boot: Init + Build + Run(Test) (curl + echo, Maven/Gradle 선택)"

on:
  workflow_dispatch:
    inputs:
      build_tool:
        description: "빌드 도구 선택"
        type: choice
        options: [maven, gradle]
        default: maven
      group_id:
        description: "Group ID (예: com.example)"
        default: "com.example"
        required: true
      artifact_id:
        description: "Artifact ID (예: demo)"
        default: "demo"
        required: true
      project_name:
        description: "프로젝트 표시 이름"
        default: "DemoProject"
      boot_version:
        description: "Spring Boot 버전 (예: 3.3.5)"
        default: "3.3.5"
      java_version:
        description: "JDK 버전 (17 또는 21 권장)"
        default: "17"
      dependencies_csv:
        description: "의존성 CSV (예: web,lombok,actuator)"
        default: "web,lombok"
      run_port:
        description: "앱 실행 포트"
        default: "8080"
      run_path:
        description: "헬스 체크 경로"
        default: "/hello"
      skip_tests:
        description: "빌드 시 테스트 스킵 여부"
        type: boolean
        default: false

permissions:
  contents: read

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  init-build-run:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare echo helpers & folders
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          echoe(){ printf '%s %s\n' "$ECHO_OK" "$*"; }
          warn(){  printf '%s %s\n' "$ECHO_WARN" "$*"; }
          fail(){  printf '%s %s\n' "$ECHO_FAIL" "$*"; }
          run_log(){ echo "▶ $*"; "$@"; }
          SH
          chmod +x /tmp/echo_helpers.sh
          source /tmp/echo_helpers.sh
          echoe "Echo helpers ready."
          run_log uname -a

      - name: Install required packages (curl, unzip, jq)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_log sudo apt-get update -y
          run_log sudo apt-get install -y curl unzip jq

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      # ========== FIXED: robust Initializr download with GET + fallback ==========
      - name: Download Spring Initializr ZIP (robust: GET → POST → mirror)
        id: dl
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh

          BUILD="${{ inputs.build_tool }}"
          TYPE="$([ "${BUILD}" = "gradle" ] && echo gradle-project || echo maven-project)"
          GROUP="${{ inputs.group_id }}"
          ART="${{ inputs.artifact_id }}"
          NAME="${{ inputs.project_name }}"
          BOOT="${{ inputs.boot_version }}"
          JVER="${{ inputs.java_version }}"
          DEPS="${{ inputs.dependencies_csv }}"
          PRJ_DIR="${ART}"
          ZIP="${PRJ_DIR}.zip"

          UA="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36"
          HEADERS=(-H "Accept: application/zip" -H "User-Agent: ${UA}")
          FORM_COMMON=(
            --data-urlencode "type=${TYPE}"
            --data-urlencode "language=java"
            --data-urlencode "bootVersion=${BOOT}"
            --data-urlencode "groupId=${GROUP}"
            --data-urlencode "artifactId=${ART}"
            --data-urlencode "name=${NAME}"
            --data-urlencode "packageName=${GROUP}.${ART}"
            --data-urlencode "packaging=jar"
            --data-urlencode "javaVersion=${JVER}"
            --data-urlencode "dependencies=${DEPS}"
          )

          try_get() {
            local base="$1"
            echoe "GET from ${base}/starter.zip"
            # IPv4 강제(-4), GET(-G) + URL 인코딩, 재시도 강화
            curl -4 -fSsvL --retry 5 --retry-all-errors --retry-delay 2 \
              "${HEADERS[@]}" -G "${base}/starter.zip" \
              "${FORM_COMMON[@]}" -o "${ZIP}"
          }

          try_post() {
            local base="$1"
            echoe "POST form to ${base}/starter.zip"
            # 폼 POST (application/x-www-form-urlencoded)
            curl -4 -fSsvL --retry 5 --retry-all-errors --retry-delay 2 \
              "${HEADERS[@]}" "${base}/starter.zip" \
              -d "type=${TYPE}" \
              -d "language=java" \
              -d "bootVersion=${BOOT}" \
              -d "groupId=${GROUP}" \
              -d "artifactId=${ART}" \
              -d "name=${NAME}" \
              -d "packageName=${GROUP}.${ART}" \
              -d "packaging=jar" \
              -d "javaVersion=${JVER}" \
              -d "dependencies=${DEPS}" \
              -o "${ZIP}"
          }

          verify_zip() {
            # ZIP 무결성/유효성 확인 (깨진 JSON/HTML 응답 걸러내기)
            if ! unzip -t "${ZIP}" >/dev/null 2>&1; then
              warn "ZIP integrity check failed (maybe HTML/JSON error)."
              return 1
            fi
            return 0
          }

          BASE1="https://start.spring.io"
          BASE2="https://start.springboot.io"  # 공식 미러

          # 1) GET (공식)
          if try_get "${BASE1}" && verify_zip; then
            echoe "Downloaded via GET from ${BASE1}"
          # 2) POST (공식)
          elif try_post "${BASE1}" && verify_zip; then
            echoe "Downloaded via POST from ${BASE1}"
          # 3) GET (미러)
          elif try_get "${BASE2}" && verify_zip; then
            echoe "Downloaded via GET from mirror ${BASE2}"
          # 4) POST (미러)
          elif try_post "${BASE2}" && verify_zip; then
            echoe "Downloaded via POST from mirror ${BASE2}"
          else
            fail "All download attempts failed."
            echo "----- DEBUG DUMP (if exists) -----"
            file "${ZIP}" || true
            head -c 400 "${ZIP}" || true
            exit 22
          fi

          echo "zip=${ZIP}" >> $GITHUB_OUTPUT
          echo "prj=${PRJ_DIR}" >> $GITHUB_OUTPUT

      - name: Unzip project
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          PRJ="${{ steps.dl.outputs.prj }}"
          ZIP="${{ steps.dl.outputs.zip }}"
          run_log unzip -q "${ZIP}"
          test -d "${PRJ}" || (fail "Project dir not found: ${PRJ}" && exit 1)
          echoe "Project dir ready: ${PRJ}"
          ls -la "${PRJ}" | sed 's/^/  /'

      - name: Generate sample HelloController (echo + here-doc, safe quoted)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          PRJ="${{ steps.dl.outputs.prj }}"
          GROUP="${{ inputs.group_id }}"
          ART="${{ inputs.artifact_id }}"
          PKG_DIR="src/main/java/$(echo "${GROUP}" | tr '.' '/')/${ART}"
          FILE="${PRJ}/${PKG_DIR}/HelloController.java"
          run_log mkdir -p "${PRJ}/${PKG_DIR}"
          cat > "${FILE}" <<'JAVA'
          package __PKG__;

          import org.springframework.web.bind.annotation.GetMapping;
          import org.springframework.web.bind.annotation.RestController;

          @RestController
          public class HelloController {
              @GetMapping("/hello")
              public String hello() {
                  return "Hello, Workflow! Spring Boot is running ✅";
              }
          }
          JAVA
          sed -i "s#__PKG__#${GROUP}.${ART}#g" "${FILE}"
          echoe "Created: ${FILE}"

      - name: Cache Maven repo
        if: ${{ inputs.build_tool == 'maven' }}
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Gradle
        if: ${{ inputs.build_tool == 'gradle' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Maven
        if: ${{ inputs.build_tool == 'maven' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_log chmod +x ./mvnw || true
          if ${{ inputs.skip_tests }}; then
            echoe "Skip tests: ON"
            run_log ./mvnw -B -ntp clean package -DskipTests
          else
            echoe "Skip tests: OFF"
            run_log ./mvnw -B -ntp clean verify
          fi

      - name: Build with Gradle
        if: ${{ inputs.build_tool == 'gradle' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_log chmod +x ./gradlew || true
          if ${{ inputs.skip_tests }}; then
            echoe "Skip tests: ON"
            run_log ./gradlew build -x test
          else
            echoe "Skip tests: OFF"
            run_log ./gradlew build
          fi

      - name: Run app (background) and verify endpoint
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        timeout-minutes: 5
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          PORT="${{ inputs.run_port }}"
          PATH_HEALTH="${{ inputs.run_path }}"
          LOG="../../${LOG_DIR}/app-run.log"

          if [ "${{ inputs.build_tool }}" = "maven" ]; then
            run_cmd="./mvnw -q -Dspring-boot.run.jvmArguments='-Dserver.port=${PORT}' spring-boot:run"
          else
            run_cmd="./gradlew -q bootRun -Pargs=--server.port=${PORT}"
          fi

          echoe "Starting app on port ${PORT}"
          (nohup bash -lc "${run_cmd}" > "${LOG}" 2>&1 & echo $! > app.pid) || true
          sleep 2
          PID="$(cat app.pid || true)"
          test -n "${PID}" || (fail "PID not captured" && exit 1)
          echoe "App PID: ${PID} (logs → ${LOG})"

          for i in $(seq 1 60); do
            if curl -fsS "http://127.0.0.1:${PORT}${PATH_HEALTH}" >/dev/null 2>&1; then
              echoe "Health OK: GET ${PATH_HEALTH}"
              break
            fi
            sleep 1
            if ! ps -p "${PID}" >/dev/null 2>&1; then
              fail "Process exited early. See logs."
              tail -n 200 "${LOG}" || true
              exit 1
            fi
            [ "$i" -eq 60 ] && (fail "App not responding on ${PORT}${PATH_HEALTH}" && tail -n 200 "${LOG}" || true && exit 1)
          done

          echoe "Requesting ${PATH_HEALTH}"
          curl -fSsv "http://127.0.0.1:${PORT}${PATH_HEALTH}" || true

          echoe "Stopping app PID=${PID}"
          kill "${PID}" || true
          for j in $(seq 1 15); do
            ps -p "${PID}" >/dev/null 2>&1 && sleep 1 || break
          done
          ps -p "${PID}" >/dev/null 2>&1 && (warn "Force kill" && kill -9 "${PID}" || true)

          echoe "Done. Tail of app log:"
          tail -n 120 "${LOG}" || true

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: spring-logs
          path: .github/echo_logs/**

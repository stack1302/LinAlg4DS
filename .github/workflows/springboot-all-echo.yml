name: "🌱 Spring Boot: Init + Build + Run(Test) (curl + echo, Maven/Gradle 선택)"

on:
  workflow_dispatch:
    inputs:
      build_tool:
        description: "빌드 도구 선택"
        type: choice
        options: [maven, gradle]
        default: maven
      group_id:
        description: "Group ID (예: com.example)"
        default: "com.example"
        required: true
      artifact_id:
        description: "Artifact ID (예: demo)"
        default: "demo"
        required: true
      project_name:
        description: "프로젝트 표시 이름"
        default: "DemoProject"
      boot_version:
        description: "Spring Boot 버전 (예: 3.3.5)"
        default: "3.3.5"
      java_version:
        description: "JDK 버전 (17 또는 21 권장)"
        default: "17"
      dependencies_csv:
        description: "의존성 CSV (예: web,lombok,actuator)"
        default: "web,lombok"
      run_port:
        description: "앱 실행 포트"
        default: "8080"
      run_path:
        description: "헬스 체크 경로"
        default: "/hello"
      skip_tests:
        description: "빌드 시 테스트 스킵 여부"
        type: boolean
        default: false

permissions:
  contents: read

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  init-build-run:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare echo helpers & folders
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          echoe(){ printf '%s %s\n' "$ECHO_OK" "$*"; }
          warn(){  printf '%s %s\n' "$ECHO_WARN" "$*"; }
          fail(){  printf '%s %s\n' "$ECHO_FAIL" "$*"; }
          run_log(){ echo "▶ $*"; "$@"; }
          SH
          chmod +x /tmp/echo_helpers.sh
          source /tmp/echo_helpers.sh
          echoe "Echo helpers ready."
          run_log uname -a

      - name: Install required packages (curl, unzip, jq)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_log sudo apt-get update -y
          run_log sudo apt-get install -y curl unzip jq

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.java_version }}

      # ========= Download Spring project via curl =========
      - name: Download Spring Initializr ZIP (official, via curl)
        id: dl
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          PRJ_DIR="${{ inputs.artifact_id }}"
          ZIP="${PRJ_DIR}.zip"
          echoe "Downloading Spring Boot project from start.spring.io → ${ZIP}"
          run_log curl -fSsvL --retry 3 --retry-all-errors \
            -o "${ZIP}" \
            https://start.spring.io/starter.zip \
            -d type=${{ inputs.build_tool == 'gradle' && 'gradle-project' || 'maven-project' }} \
            -d language=java \
            -d bootVersion=${{ inputs.boot_version }} \
            -d groupId=${{ inputs.group_id }} \
            -d artifactId=${{ inputs.artifact_id }} \
            -d name=${{ inputs.project_name }} \
            -d packageName=${{ inputs.group_id }}.${{ inputs.artifact_id }} \
            -d packaging=jar \
            -d javaVersion=${{ inputs.java_version }} \
            -d dependencies=${{ inputs.dependencies_csv }}
          echo "zip=${ZIP}" >> $GITHUB_OUTPUT
          echo "prj=${PRJ_DIR}" >> $GITHUB_OUTPUT
          echoe "ZIP downloaded: ${ZIP}"

      - name: Unzip project
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          PRJ="${{ steps.dl.outputs.prj }}"
          ZIP="${{ steps.dl.outputs.zip }}"
          run_log unzip -q "${ZIP}"
          test -d "${PRJ}" || (fail "Project dir not found: ${PRJ}" && exit 1)
          echoe "Project dir ready: ${PRJ}"
          ls -la "${PRJ}" | sed 's/^/  /'

      # ========= Add HelloController via echo / here-doc =========
      - name: Generate sample HelloController (echo + here-doc, safe quoted)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          PRJ="${{ steps.dl.outputs.prj }}"
          GROUP="${{ inputs.group_id }}"
          ART="${{ inputs.artifact_id }}"
          PKG_DIR="src/main/java/$(echo "${GROUP}" | tr '.' '/')/${ART}"
          FILE="${PRJ}/${PKG_DIR}/HelloController.java"
          run_log mkdir -p "${PRJ}/${PKG_DIR}"
          cat > "${FILE}" <<'JAVA'
          package __PKG__;

          import org.springframework.web.bind.annotation.GetMapping;
          import org.springframework.web.bind.annotation.RestController;

          @RestController
          public class HelloController {
              @GetMapping("/hello")
              public String hello() {
                  return "Hello, Workflow! Spring Boot is running ✅";
              }
          }
          JAVA
          # replace package placeholder safely
          sed -i "s#__PKG__#${GROUP}.${ART}#g" "${FILE}"
          echoe "Created: ${FILE}"

      # ========= Cache dependencies =========
      - name: Cache Maven repo
        if: ${{ inputs.build_tool == 'maven' }}
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Gradle
        if: ${{ inputs.build_tool == 'gradle' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # ========= Build =========
      - name: Build with Maven
        if: ${{ inputs.build_tool == 'maven' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_log chmod +x ./mvnw || true
          if ${{ inputs.skip_tests }}; then
            echoe "Skip tests: ON"
            run_log ./mvnw -B -ntp clean package -DskipTests
          else
            echoe "Skip tests: OFF"
            run_log ./mvnw -B -ntp clean verify
          fi

      - name: Build with Gradle
        if: ${{ inputs.build_tool == 'gradle' }}
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_log chmod +x ./gradlew || true
          if ${{ inputs.skip_tests }}; then
            echoe "Skip tests: ON"
            run_log ./gradlew build -x test
          else
            echoe "Skip tests: OFF"
            run_log ./gradlew build
          fi

      # ========= Run app in background & health check =========
      - name: Run app (background) and verify endpoint
        working-directory: ${{ steps.dl.outputs.prj }}
        shell: bash
        timeout-minutes: 5
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          PORT="${{ inputs.run_port }}"
          PATH_HEALTH="${{ inputs.run_path }}"
          LOG="../../${LOG_DIR}/app-run.log"

          # Start
          if [ "${{ inputs.build_tool }}" = "maven" ]; then
            run_cmd="./mvnw -q -Dspring-boot.run.jvmArguments='-Dserver.port=${PORT}' spring-boot:run"
          else
            run_cmd="./gradlew -q bootRun -Pargs=--server.port=${PORT}"
          fi

          echoe "Starting app on port ${PORT}"
          (nohup bash -lc "${run_cmd}" > "${LOG}" 2>&1 & echo $! > app.pid) || true
          sleep 2
          PID="$(cat app.pid || true)"
          test -n "${PID}" || (fail "PID not captured" && exit 1)
          echoe "App PID: ${PID} (logs → ${LOG})"

          # Wait for readiness (max ~60s)
          for i in $(seq 1 60); do
            if curl -fsS "http://127.0.0.1:${PORT}${PATH_HEALTH}" >/dev/null 2>&1; then
              echoe "Health OK: GET ${PATH_HEALTH}"
              break
            fi
            sleep 1
            if ! ps -p "${PID}" >/dev/null 2>&1; then
              fail "Process exited early. See logs."
              tail -n 200 "${LOG}" || true
              exit 1
            fi
            if [ "$i" -eq 60 ]; then
              fail "App not responding on ${PORT}${PATH_HEALTH} within 60s"
              tail -n 200 "${LOG}" || true
              exit 1
            fi
          done

          # Print response
          echoe "Requesting ${PATH_HEALTH}"
          curl -fSsv "http://127.0.0.1:${PORT}${PATH_HEALTH}" || true

          # Graceful stop
          echoe "Stopping app PID=${PID}"
          kill "${PID}" || true
          for j in $(seq 1 15); do
            if ps -p "${PID}" >/dev/null 2>&1; then
              sleep 1
              [ "$j" -ge 15 ] && break
            else
              break
            fi
          done
          ps -p "${PID}" >/dev/null 2>&1 && (warn "Force kill" && kill -9 "${PID}" || true)

          echoe "Done. Tail of app log:"
          tail -n 120 "${LOG}" || true

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: spring-logs
          path: |
            .github/echo_logs/**

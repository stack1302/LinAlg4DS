name: "🧰 MCP Install + EchoOps MEGA (Safe Shim+npx)"

on:
  workflow_dispatch:
    inputs:
      mcp_npm_pkg:
        description: "MCP CLI 후보 패키지(npx 기본 대상). 기본: mcp"
        required: false
        default: "mcp"
      mcp_version:
        description: "MCP 버전(선택, 예: 1.4.2). 비우면 latest"
        required: false
        default: ""
      mcp_servers_csv:
        description: "추가 MCP 서버 NPM 패키지 CSV"
        required: false
        default: ""
      echo_root:
        description: "에코 루트 디렉토리"
        required: true
        default: ".github/echo_mcp"
      dirs_count:
        description: "대량 에코 디렉토리 개수(0=건너뜀)"
        required: true
        default: "0"
      allow_domains_csv:
        description: "curl 허용 도메인 CSV"
        required: false
        default: "raw.githubusercontent.com,github.com"
      downloads_manifest:
        description: "다운로드 매니페스트 CSV (URL|SHA256 형식, SHA256 생략 가능)"
        required: false
        default: ""
      do_upgrade:
        description: "Auto Upgrade(apt/npm/pip) 실행"
        type: boolean
        required: true
        default: true
      images_with_fallback_csv:
        description: "도커 이미지 CSV (img|fb1|fb2 …). 기본값은 존재하는 태그로 구성"
        required: false
        default: "quay.io/coreos/etcd:v3.5.15|gcr.io/etcd-development/etcd:v3.5.15,alpine:3.19|alpine:latest"
      create_release:
        description: "GitHub Release 생성"
        type: boolean
        required: true
        default: false

permissions:
  contents: write
  actions: read

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"
  RELEASE_TAG_PREFIX: "mcp-echo"

jobs:
  mcp-echo-mega:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare directories
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          mkdir -p "${{ inputs.echo_root }}"/{configs,servers,downloads,perm,logs,mass}
          mkdir -p ".github/echo_perm" ".github/echo_up" ".github/echo_tools"

      - name: Setup Node & Python
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install base tools (jq, coreutils, file, gh)
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y jq coreutils file gh

      - name: Write echo helpers (safe heredoc)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat <<'SH' > /tmp/echo_helpers.sh
          set -Eeuo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "$LOG_DIR"
          SAFE_SERVICE="${SAFE_SERVICE:-mcp}"
          logf(){ printf '%s\n' "$*" | tee -a "${LOG_DIR}/echo-${SAFE_SERVICE}.log"; }
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*" | tee -a "${LOG_DIR}/echo-${SAFE_SERVICE}.log"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*" | tee -a "${LOG_DIR}/echo-${SAFE_SERVICE}.log"; }
          run_cmd(){
            logf "▶ $*"
            eval "$@" 2>&1 | tee -a "${LOG_DIR}/echo-${SAFE_SERVICE}.log"
            local rc=${PIPESTATUS[0]}
            if [ $rc -eq 0 ]; then echoe "DONE (rc=$rc): $*"; else warn "FAILED (rc=$rc): $*"; fi
            return $rc
          }
          npm_global_bin(){
            local root; root="$(npm root -g 2>/dev/null || true)"
            if [ -n "$root" ]; then
              local parent; parent="$(dirname "$root")"
              if [ -d "$parent/bin" ]; then echo "$parent/bin"; return 0; fi
              if [ -d "$root/.bin" ]; then echo "$root/.bin"; return 0; fi
            fi
            for d in "$(npm prefix -g 2>/dev/null || true)/bin" /usr/local/bin /opt/hostedtoolcache/node/*/*/bin; do
              [ -d "$d" ] && echo "$d" && return 0
            done
            echo "/usr/local/bin"
          }
          perm_dump(){ local r="$1"; ls -lR "$r" > "${r}/perm/perm.tree.txt"; find "$r" -type f -exec sha256sum {} \; > "${r}/perm/perm.sha256.txt"; printf 'umask is: %s\n' "$(umask)" > "${r}/perm/umask.txt"; cp "${r}/perm/perm.tree.txt" ".github/echo_perm/perm-${GITHUB_RUN_ID}.txt" || true; }
          safe_tag(){ printf '%s\n' "$1" | tr -cd '[:alnum:]._-' | sed 's/^\.*//; s/\.*$//'; }
          # gh release: 없으면 gh api 로 폴백 (이번엔 폴백을 반드시 실행)
          gh_release_create(){
            local tag="$1"; local name="$2"; local body="$3"; local file="$4"
            if [ -z "${GH_TOKEN:-}" ]; then warn "GH_TOKEN not set; skip release"; return 0; fi
            if gh help release >/dev/null 2>&1; then
              if gh release create "$tag" "$file" --notes "$body" --title "$name"; then
                echoe "gh release created"
                return 0
              else
                warn "gh release create failed; falling back to gh api"
              fi
            fi
            # 폴백: gh api 로 릴리스 생성
            if gh api -X POST "repos/${GITHUB_REPOSITORY}/releases" -f tag_name="$tag" -f name="$name" -f body="$body" >/tmp/rel.json 2>/dev/null; then
              echoe "gh api release created"
              # 에셋 업로드 (optional)
              if [ -f "$file" ]; then
                url="$(jq -r .upload_url </tmp/rel.json | sed 's/{.*}//')"
                gh api --method POST -H "Content-Type: text/plain" --input "$file" "$url?name=$(basename "$file")" || warn "asset upload failed"
              fi
            else
              warn "gh api release failed"
            fi
          }
          curl_get(){
            local url="$1"; local out="$2"; local want_sha="${3:-}"
            local allow="${ALLOW_DOMAINS_CSV:-}"; local host; host=$(printf '%s' "$url" | awk -F/ '{print $3}')
            if [ -n "$allow" ]; then
              local ok=; IFS=',' read -r -a arr <<< "$allow"
              for d in "${arr[@]}"; do [ "$host" = "$d" ] && ok=1 && break; done
              if [ -z "$ok" ]; then warn "Host $host not in allowlist; skip $url"; return 2; fi
            fi
            run_cmd curl -fSsvL --retry 3 --retry-all-errors --retry-delay 2 --connect-timeout 20 --max-time 300 "$url" -o "$out"
            if [ -n "$want_sha" ] && [ -f "$out" ]; then
              local got; got=$(sha256sum "$out" | awk '{print $1}')
              if [ "$got" != "$want_sha" ]; then warn "SHA256 mismatch: want=$want_sha got=$got ($out)"; return 3; fi
            fi
          }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "helpers: ready" > ".github/echo_tools/helpers_ready.txt"

      - name: Node/npm health (echo)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_cmd node -v
          run_cmd npm -v
          command -v npx || true

      # ===== MCP 설치 + 안전 실행 Shim =====
      # (중요) npx 경로를 1순위로 이용하여 'mcp-safe'가 항상 동작하도록 설계
      - name: Install MCP CLI (best-effort; no hard fail)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh || true
          PKG="${{ inputs.mcp_npm_pkg }}"
          VER="${{ inputs.mcp_version }}"
          # 전역 설치는 '있으면 좋음' 수준으로만 시도 (npx가 1순위)
          if [ -n "$VER" ]; then run_cmd npm i -g "${PKG}@${VER}" || true; else run_cmd npm i -g "${PKG}" || true; fi
          BIN="$(npm_global_bin)"
          echo "NPM global bin=${BIN}"
          ls -l "$BIN" || true
          which mcp || true

      - name: Create safe MCP shim (NPX-first + 다중 후보 + Node/exec 보조)
        shell: bash
        run: |
          set -Eeuo pipefail
          SHIM="/usr/local/bin/mcp-safe"
          sudo tee "$SHIM" >/dev/null <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail

          # npx 사전검증/사전헬프 없이 '직접 실행' 우선: 일부 패키지의 --help/--version 반환코드가 일정치 않음
          try_npx() {
            # $1: spec(예: mcp / @mintlify/mcp / @modelcontextprotocol/cli@x.y.z mcp)
            # 나머지 인자 그대로 전달
            local spec="$1"; shift || true
            if command -v npx >/dev/null 2>&1; then
              # shellcheck disable=SC2086
              exec npx -y $spec "$@"
            fi
            return 127
          }

          try_node_file() {
            # $1: file path
            local f="$1"; shift || true
            if command -v node >/dev/null 2>&1 && [ -f "$f" ]; then
              exec node "$f" "$@"
            fi
            return 127
          }

          try_exec() {
            local f="$1"; shift || true
            if [ -x "$f" ]; then
              exec "$f" "$@"
            fi
            return 127
          }

          main() {
            local user_spec="${MCP_NPX_SPEC:-mcp}"   # 기본 npx 대상
            local ver="${MCP_VERSION:-}"
            local global_bin="$(command -v mcp || true)"

            # 1) NPX 1차: 사용자가 지정한 spec (기본 mcp)
            try_npx "$user_spec" "$@" || true

            # 2) NPX 2차: @mintlify/mcp (일부 환경에서 전역 mcp 바이너리가 이 소스 기준)
            try_npx "@mintlify/mcp" "$@" || true

            # 3) NPX 3차: @modelcontextprotocol/cli (버전 고정 → latest)
            if [ -n "$ver" ]; then
              try_npx "@modelcontextprotocol/cli@${ver} mcp" "$@" || true
            fi
            try_npx "@modelcontextprotocol/cli mcp" "$@" || true

            # 4) 전역 설치본이 있으면 Node로 직접 실행(ESM 텍스트 바이너리 보정)
            if [ -n "$global_bin" ] && [ -f "$global_bin" ]; then
              # 텍스트/JS면 Node로, 아니면 직접 실행
              if file -b --mime-type "$global_bin" | grep -qE '^(text/|application/javascript)'; then
                try_node_file "$global_bin" "$@" || true
              fi
              try_exec "$global_bin" "$@" || true
            fi

            echo "mcp-safe: no viable MCP runner found (npx chain + node/exec fallback failed)" >&2
            exit 127
          }
          main "$@"
          SH
          sudo chmod +x "$SHIM"
          {
            echo "MCP_VERSION=${{ inputs.mcp_version }}"
            # 사용자가 지정한 후보 패키지를 npx 1순위로 사용
            echo "MCP_NPX_SPEC=${{ inputs.mcp_npm_pkg }}"
            echo "MCP_CMD=$SHIM"
          } >> "$GITHUB_ENV"

      - name: Verify MCP (run help/version and files subcommand; tolerant)
        shell: bash
        run: |
          set -Eeuo pipefail
          : "${MCP_CMD:?MCP_CMD not set}"
          # 다양한 플래그 조합 시도 (일부 패키지의 반환코드가 일정치 않음)
          "$MCP_CMD" --help || true
          "$MCP_CMD" --version || true
          "$MCP_CMD" files --help || true

      # ===== MCP 서버 설치(선택) =====
      - name: Install additional MCP servers (CSV)
        if: ${{ inputs.mcp_servers_csv != '' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          IFS=',' read -r -a SRVS <<< "${{ inputs.mcp_servers_csv }}"
          for pkg in "${SRVS[@]}"; do
            [ -z "$pkg" ] && continue
            run_cmd npm i -g "$pkg" || warn "install failed: $pkg"
          done

      # ===== 에코/권한/구성/대량생성 =====
      - name: Generate MCP configs + sample server
        shell: bash
        run: |
          set -Eeuo pipefail
          root="${{ inputs.echo_root }}"
          cat <<'JSON' > "${root}/configs/mcp.config.json"
          {
            "$schema": "https://raw.githubusercontent.com/modelcontextprotocol/ts/main/schema/mcp.json",
            "clients": { "default": { "providers": [] } },
            "servers": {
              "files": { "command": "mcp", "args": ["files"], "enabled": true, "env": { "MCP_FILES_ROOT": "./" } },
              "shell": { "command": "mcp", "args": ["shell"], "enabled": false }
            }
          }
          JSON
          cat <<'MD' > "${root}/README.md"
          # MCP EchoOps MEGA
          - MCP CLI/서버 설치, 에코 파일 생성, 퍼미션 덤프, 업그레이드, 컨테이너 테스트, 릴리스까지 통합.
          - 수정: `configs/mcp.config.json`, `servers/*`, `perm/*`, `downloads/*`
          MD
          cat <<'SHX' > "${root}/servers/sample-server.sh"
          #!/usr/bin/env bash
          set -Eeuo pipefail
          echo "[Sample] MCP server boot (placeholder)"
          exec sleep 2
          SHX
          chmod +x "${root}/servers/sample-server.sh"

      - name: Echo permissions (chmod + dump)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          root="${{ inputs.echo_root }}"
          chmod -R a+r "${root}" || true
          find "${root}" -type d -exec chmod a+rx {} \; || true
          find "${root}/servers" -type f -name "*.sh" -exec chmod a+rx {} \; || true
          perm_dump "${root}"

      - name: Massive echo directories (optional)
        if: ${{ inputs.dirs_count != '0' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          root="${{ inputs.echo_root }}"
          N="${{ inputs.dirs_count }}"
          echo "Create $N dirs under ${root}/mass"
          for i in $(seq 1 "$N"); do
            d="${root}/mass/dir$(printf '%05d' "$i")"
            mkdir -p "$d"
            printf 'echo dir %s\n' "$d" > "${d}/README.echo.txt"
          done
          echo "Mass dir count: $(find "${root}/mass" -maxdepth 1 -type d | wc -l)" > "${root}/logs/mass.done.txt"

      # ===== 다운로드(허용도메인/선택적 SHA) =====
      - name: Curl downloads (allowlist + optional SHA256 via manifest)
        if: ${{ inputs.downloads_manifest != '' }}
        shell: bash
        env:
          ALLOW_DOMAINS_CSV: ${{ inputs.allow_domains_csv }}
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          root="${{ inputs.echo_root }}"
          IFS=',' read -r -a ITEMS <<< "${{ inputs.downloads_manifest }}"
          for item in "${ITEMS[@]}"; do
            [ -z "$item" ] && continue
            url="${item%%|*}"
            sha="${item#*|}"; [ "$url" = "$sha" ] && sha=""
            base=$(basename "$url")
            out="${root}/downloads/${base}"
            curl_get "$url" "$out" "$sha" || warn "download failed: $url"
          done
          ls -l "${root}/downloads" || true

      # ===== 시스템/런타임 업그레이드 =====
      - name: Auto Upgrade (apt + npm + pip)
        if: ${{ inputs.do_upgrade }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_cmd sudo apt-get update -y
          run_cmd sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade || true
          run_cmd sudo apt-get -y autoremove || true
          run_cmd npm -g update || true
          run_cmd npm -g outdated || true
          python -V || true
          python - <<'PY' || true
          import sys, subprocess
          try:
              import pkg_resources
          except Exception:
              sys.exit(0)
          pkgs = [d.project_name for d in pkg_resources.working_set]
          if pkgs:
              subprocess.call([sys.executable, "-m", "pip", "install", "-U"] + pkgs)
          PY
          date '+%F %T' > ".github/echo_up/upgrade-${{ github.run_id }}.stamp"

      # ===== 컨테이너 이미지 풀(존재 태그 + per-item 폴백) =====
      - name: Docker image pull test with per-item fallbacks
        if: ${{ inputs.images_with_fallback_csv != '' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          IFS=',' read -r -a ITEMS <<< "${{ inputs.images_with_fallback_csv }}"
          for spec in "${ITEMS[@]}"; do
            [ -z "$spec" ] && continue
            IFS='|' read -r img fb1 fb2 fb3 fb4 fb5 <<< "$spec"
            if run_cmd docker pull "$img"; then
              echo "Pulled: $img"; continue
            fi
            pulled=0
            for fb in "$fb1" "$fb2" "$fb3" "$fb4" "$fb5"; do
              [ -z "$fb" ] && continue
              if run_cmd docker pull "$fb"; then
                echo "Fallback pulled: $fb (original $img failed)"; pulled=1; break
              fi
            done
            [ "$pulled" -eq 1 ] || warn "All fallbacks failed for $img"
          done

      # ===== 요약/아티팩트/릴리스 =====
      - name: Summary & tree (always)
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          root="${{ inputs.echo_root }}"
          {
            echo "# MCP EchoOps MEGA Summary"
            echo "- MCP_NPX_SPEC: ${{ inputs.mcp_npm_pkg }}"
            echo "- MCP VER: ${{ inputs.mcp_version }}"
            echo "- Servers:  ${{ inputs.mcp_servers_csv }}"
            echo "- Allow:    ${{ inputs.allow_domains_csv }}"
            echo "- Dirs:     ${{ inputs.dirs_count }}"
            echo "- Upgrade:  ${{ inputs.do_upgrade }}"
            echo "- Images(spec): ${{ inputs.images_with_fallback_csv }}"
            echo
            echo "## ${root} (top-level)"
            echo '```'
            ls -la "${root}" || true
            echo '```'
          } > "${root}/logs/summary.md"

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-echo-mega-${{ github.run_id }}
          path: |
            ${{ inputs.echo_root }}/**
            .github/echo_perm/**
            .github/echo_up/**
            ${{ env.LOG_DIR }}/**
          if-no-files-found: warn

      - name: (Optional) Create GitHub Release (safe tag, forced fallback) (always if enabled)
        if: ${{ inputs.create_release && always() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          prefix="$(safe_tag "${RELEASE_TAG_PREFIX}")"
          ts="$(date +%Y%m%d%H%M%S)"
          tag="${prefix}-${ts}"
          name="MCP EchoOps MEGA ${ts}"
          body="Automated release for MCP EchoOps MEGA run ${GITHUB_RUN_ID}"
          file="${{ inputs.echo_root }}/logs/summary.md"
          gh_release_create "$tag" "$name" "$body" "$file" || true

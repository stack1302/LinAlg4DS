name: "🧰 MCP Install + EchoOps MEGA (NPX Auto-Detect + No-NotFound + CRON */5m)"

on:
  # 수동 실행
  workflow_dispatch:
    inputs:
      mcp_npm_pkg:
        description: "우선 후보(npx 대상). 비워도 자동탐지"
        required: false
        default: ""
      mcp_version:
        description: "버전 고정(선택)"
        required: false
        default: ""
      mcp_servers_csv:
        description: "추가 MCP 서버 NPM 패키지 CSV"
        required: false
        default: ""
      echo_root:
        description: "에코 루트 디렉토리"
        required: true
        default: ".github/echo_mcp"
      dirs_count:
        description: "대량 에코 디렉토리 개수(0=건너뜀)"
        required: true
        default: "0"
      allow_domains_csv:
        description: "curl 허용 도메인 CSV"
        required: false
        default: "raw.githubusercontent.com,github.com"
      downloads_manifest:
        description: "다운로드 매니페스트 CSV (URL|SHA256)"
        required: false
        default: ""
      do_upgrade:
        description: "Auto Upgrade(apt/npm/pip) 실행"
        type: boolean
        required: true
        default: true
      images_with_fallback_csv:
        description: "도커 이미지 CSV (img|fb1|fb2 …)"
        required: false
        default: "quay.io/coreos/etcd:v3.5.15|gcr.io/etcd-development/etcd:v3.5.15,alpine:3.19|alpine:latest"
      create_release:
        description: "GitHub Release 생성"
        type: boolean
        required: true
        default: false

  # 스케줄 실행(UTC 기준 매 5분)
  schedule:
    - cron: "*/5 * * * *"

permissions:
  contents: write
  actions: read

# 스케줄에서는 inputs가 없으므로, inputs → vars → 기본값 순으로 환경 변수에 바인딩
env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"
  RELEASE_TAG_PREFIX: "mcp-echo"

  MCP_NPM_PKG: ${{ inputs.mcp_npm_pkg || vars.MCP_NPM_PKG || '' }}
  MCP_VERSION:  ${{ inputs.mcp_version  || vars.MCP_VERSION  || '' }}
  MCP_SERVERS_CSV: ${{ inputs.mcp_servers_csv || vars.MCP_SERVERS_CSV || '' }}

  ECHO_ROOT: ${{ inputs.echo_root || vars.ECHO_ROOT || '.github/echo_mcp' }}
  DIRS_COUNT: ${{ inputs.dirs_count || vars.DIRS_COUNT || '0' }}

  ALLOW_DOMAINS_CSV: ${{ inputs.allow_domains_csv || vars.ALLOW_DOMAINS_CSV || 'raw.githubusercontent.com,github.com' }}
  DOWNLOADS_MANIFEST: ${{ inputs.downloads_manifest || vars.DOWNLOADS_MANIFEST || '' }}

  DO_UPGRADE: ${{ (inputs.do_upgrade != null && inputs.do_upgrade) || (vars.DO_UPGRADE || 'true') }}
  IMAGES_WITH_FALLBACK_CSV: ${{ inputs.images_with_fallback_csv || vars.IMAGES_WITH_FALLBACK_CSV || 'quay.io/coreos/etcd:v3.5.15|gcr.io/etcd-development/etcd:v3.5.15,alpine:3.19|alpine:latest' }}
  CREATE_RELEASE: ${{ (inputs.create_release != null && inputs.create_release) || (vars.CREATE_RELEASE || 'false') }}

# 동시 실행 방지(5분 주기 중첩 방지)
concurrency:
  group: mcp-echo-mega
  cancel-in-progress: false

jobs:
  mcp-echo-mega:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare directories
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          mkdir -p "${ECHO_ROOT}"/{configs,servers,downloads,perm,logs,mass}
          mkdir -p ".github/echo_perm" ".github/echo_up" ".github/echo_tools"

      - name: Setup Node & Python
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install base tools (jq, coreutils, file, gh)
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y jq coreutils file gh

      - name: Write helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          cat <<'SH' > /tmp/echo_helpers.sh
          set -Eeuo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"
          LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "$LOG_DIR"
          SAFE_SERVICE="${SAFE_SERVICE:-mcp}"
          logf(){ printf '%s\n' "$*" | tee -a "${LOG_DIR}/echo-${SAFE_SERVICE}.log"; }
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*" | tee -a "${LOG_DIR}/echo-${SAFE_SERVICE}.log"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*" | tee -a "${LOG_DIR}/echo-${SAFE_SERVICE}.log"; }
          run_cmd(){ logf "▶ $*"; eval "$@" 2>&1 | tee -a "${LOG_DIR}/echo-${SAFE_SERVICE}.log"; rc=${PIPESTATUS[0]}; [ $rc -eq 0 ] && echoe "DONE (rc=$rc): $*" || warn "FAILED (rc=$rc): $*"; return $rc; }

          npm_exists(){ local spec="$1"; npm view "$spec" version --silent >/dev/null 2>&1 && echo yes || echo no; }
          pick_mcp_spec(){
            local user="${1:-}"; local ver="${2:-}"; local CANDS=()
            [ -n "$user" ] && CANDS+=("$user")
            CANDS+=("@mintlify/mcp" "mcp" "@modelcontextprotocol/cli")
            for c in "${CANDS[@]}"; do
              if [ "$(npm_exists "$c")" = "yes" ]; then
                [ -n "$ver" ] && { echo "$c@$ver"; return 0; }
                echo "$c"; return 0
              fi
            done
            echo "mcp"
          }
          gh_release_create(){
            local tag="$1"; local name="$2"; local body="$3"; local file="$4"
            if [ -z "${GH_TOKEN:-}" ]; then warn "GH_TOKEN not set; skip release"; return 0; fi
            if gh help release >/dev/null 2>&1; then
              gh release create "$tag" "$file" --notes "$body" --title "$name" && { echoe "gh release created"; return 0; } || warn "gh release failed; fallback to gh api"
            fi
            if gh api -X POST "repos/${GITHUB_REPOSITORY}/releases" -f tag_name="$tag" -f name="$name" -f body="$body" >/tmp/rel.json 2>/dev/null; then
              echoe "gh api release created"
              if [ -f "$file" ]; then
                url="$(jq -r .upload_url </tmp/rel.json | sed 's/{.*}//')"
                gh api --method POST -H "Content-Type: text/markdown" --input "$file" "$url?name=$(basename "$file")" || warn "asset upload failed"
              fi
            else
              warn "gh api release failed"
            fi
          }
          curl_get(){
            local url="$1"; local out="$2"; local want_sha="${3:-}"
            local allow="${ALLOW_DOMAINS_CSV:-}"; local host; host=$(printf '%s' "$url" | awk -F/ '{print $3}')
            if [ -n "$allow" ]; then
              local ok=; IFS=',' read -r -a arr <<< "$allow"
              for d in "${arr[@]}"; do [ "$host" = "$d" ] && ok=1 && break; done
              [ -z "$ok" ] && { warn "Host $host not in allowlist; skip $url"; return 0; }
            fi
            curl -fSsvL --retry 3 --retry-all-errors --retry-delay 2 --connect-timeout 20 --max-time 300 "$url" -o "$out" || { warn "download failed: $url"; return 0; }
            if [ -n "$want_sha" ] && [ -f "$out" ]; then
              local got; got=$(sha256sum "$out" | awk '{print $1}')
              [ "$got" = "$want_sha" ] || warn "SHA256 mismatch: want=$want_sha got=$got ($out)"
            fi
          }
          perm_dump(){ local r="$1"; ls -lR "$r" > "${r}/perm/perm.tree.txt"; find "$r" -type f -exec sha256sum {} \; > "${r}/perm/perm.sha256.txt"; printf 'umask is: %s\n' "$(umask)" > "${r}/perm/umask.txt"; cp "${r}/perm/perm.tree.txt" ".github/echo_perm/perm-${GITHUB_RUN_ID}.txt" || true; }
          safe_tag(){ printf '%s\n' "$1" | tr -cd '[:alnum:]._-' | sed 's/^\.*//; s/\.*$//'; }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "helpers: ready" > ".github/echo_tools/helpers_ready.txt"

      - name: Node/npm health (echo)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_cmd node -v
          run_cmd npm -v
          command -v npx || true

      # ============ MCP 설치/실행 ============
      - name: Pick NPX spec for MCP (no-fail)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          SPEC="$(pick_mcp_spec "${MCP_NPM_PKG}" "${MCP_VERSION}")"
          echo "MCP_NPX_SPEC=${SPEC}" | tee -a "$GITHUB_ENV"

      - name: Install MCP (best-effort; ignore 404)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh || true
          if [ -n "${MCP_NPM_PKG}" ]; then
            if [ -n "${MCP_VERSION}" ]; then
              run_cmd npm i -g "${MCP_NPM_PKG}@${MCP_VERSION}" || true
            else
              run_cmd npm i -g "${MCP_NPM_PKG}" || true
            fi
          fi
          which mcp || true

      - name: Create mcp-safe (NPX-first + fallbacks)
        shell: bash
        run: |
          set -Eeuo pipefail
          SHIM="/usr/local/bin/mcp-safe"
          sudo tee "$SHIM" >/dev/null <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          spec="${MCP_NPX_SPEC:-mcp}"
          if command -v npx >/dev/null 2>&1; then
            exec npx -y $spec "$@"
          fi
          if command -v mcp >/dev/null 2>&1; then
            exec mcp "$@"
          fi
          if command -v node >/dev/null 2>&1 && [ -n "$(command -v mcp || true)" ]; then
            exec node "$(command -v mcp)" "$@"
          fi
          echo "mcp-safe: no viable MCP runner found (npx/global/node all failed)" >&2
          exit 127
          SH
          sudo chmod +x "$SHIM"
          echo "MCP_CMD=$SHIM" | tee -a "$GITHUB_ENV"

      - name: Verify MCP (tolerant)
        shell: bash
        run: |
          set -Eeuo pipefail
          : "${MCP_CMD:?}"
          "$MCP_CMD" --help || true
          "$MCP_CMD" --version || true
          "$MCP_CMD" files --help || true

      # ============ MCP 서버(선택) ============
      - name: Install additional MCP servers (CSV)
        if: ${{ env.MCP_SERVERS_CSV != '' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          IFS=',' read -r -a SRVS <<< "${MCP_SERVERS_CSV}"
          for pkg in "${SRVS[@]}"; do
            [ -z "$pkg" ] && continue
            run_cmd npm i -g "$pkg" || warn "install failed: $pkg"
          done

      # ============ 에코/권한/구성/대량생성 ============
      - name: Generate MCP configs + sample server
        shell: bash
        run: |
          set -Eeuo pipefail
          root="${ECHO_ROOT}"
          cat <<'JSON' > "${root}/configs/mcp.config.json"
          {
            "$schema": "https://raw.githubusercontent.com/modelcontextprotocol/ts/main/schema/mcp.json",
            "clients": { "default": { "providers": [] } },
            "servers": {
              "files": { "command": "mcp", "args": ["files"], "enabled": true, "env": { "MCP_FILES_ROOT": "./" } },
              "shell": { "command": "mcp", "args": ["shell"], "enabled": false }
            }
          }
          JSON
          cat <<'MD' > "${root}/README.md"
          # MCP EchoOps MEGA
          - MCP CLI/서버 설치, 에코 파일 생성, 퍼미션 덤프, 업그레이드, 컨테이너 테스트, 릴리스까지 통합.
          MD
          cat <<'SHX' > "${root}/servers/sample-server.sh"
          #!/usr/bin/env bash
          set -Eeuo pipefail
          echo "[Sample] MCP server boot (placeholder)"
          exec sleep 2
          SHX
          chmod +x "${root}/servers/sample-server.sh"

      - name: Echo permissions (chmod + dump)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          root="${ECHO_ROOT}"
          chmod -R a+r "${root}" || true
          find "${root}" -type d -exec chmod a+rx {} \; || true
          find "${root}/servers" -type f -name "*.sh" -exec chmod a+rx {} \; || true
          perm_dump "${root}"

      - name: Massive echo directories (optional)
        if: ${{ env.DIRS_COUNT != '0' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          root="${ECHO_ROOT}"
          N="${DIRS_COUNT}"
          for i in $(seq 1 "$N"); do
            d="${root}/mass/dir$(printf '%05d' "$i")"
            mkdir -p "$d"
            printf 'echo dir %s\n' "$d" > "${d}/README.echo.txt"
          done
          echo "Mass dir count: $(find "${root}/mass" -maxdepth 1 -type d | wc -l)" > "${root}/logs/mass.done.txt"

      # ============ 다운로드 ============
      - name: Curl downloads (allowlist + optional SHA256 via manifest)
        if: ${{ env.DOWNLOADS_MANIFEST != '' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          root="${ECHO_ROOT}"
          IFS=',' read -r -a ITEMS <<< "${DOWNLOADS_MANIFEST}"
          for item in "${ITEMS[@]}"; do
            [ -z "$item" ] && continue
            url="${item%%|*}"
            sha="${item#*|}"; [ "$url" = "$sha" ] && sha=""
            base=$(basename "$url")
            out="${root}/downloads/${base}"
            curl_get "$url" "$out" "$sha"
          done
          ls -l "${root}/downloads" || true

      # ============ 업그레이드 ============
      - name: Auto Upgrade (apt + npm + pip)
        if: ${{ env.DO_UPGRADE == 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          run_cmd sudo apt-get update -y
          run_cmd sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade || true
          run_cmd sudo apt-get -y autoremove || true
          run_cmd npm -g update || true
          run_cmd npm -g outdated || true
          python -V || true
          python - <<'PY' || true
          import sys, subprocess
          try:
              import pkg_resources
          except Exception:
              sys.exit(0)
          pkgs = [d.project_name for d in pkg_resources.working_set]
          if pkgs:
              subprocess.call([sys.executable, "-m", "pip", "install", "-U"] + pkgs)
          PY
          date '+%F %T' > ".github/echo_up/upgrade-${GITHUB_RUN_ID}.stamp"

      # ============ 컨테이너 ============
      - name: Docker image pull test (per-item fallbacks)
        if: ${{ env.IMAGES_WITH_FALLBACK_CSV != '' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          IFS=',' read -r -a ITEMS <<< "${IMAGES_WITH_FALLBACK_CSV}"
          for spec in "${ITEMS[@]}"; do
            [ -z "$spec" ] && continue
            IFS='|' read -r img fb1 fb2 fb3 fb4 fb5 <<< "$spec"
            if run_cmd docker pull "$img"; then
              echo "Pulled: $img"; continue
            fi
            pulled=0
            for fb in "$fb1" "$fb2" "$fb3" "$fb4" "$fb5"; do
              [ -z "$fb" ] && continue
              if run_cmd docker pull "$fb"; then
                echo "Fallback pulled: $fb (original $img failed)"; pulled=1; break
              fi
            done
            [ "$pulled" -eq 1 ] || warn "All fallbacks failed for $img"
          done

      # ============ 요약/아티팩트/릴리스 ============
      - name: Summary & tree (always)
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          root="${ECHO_ROOT}"
          {
            echo "# MCP EchoOps MEGA Summary"
            echo "- MCP_NPX_SPEC: ${MCP_NPX_SPEC}"
            echo "- MCP VER: ${MCP_VERSION}"
            echo "- Servers:  ${MCP_SERVERS_CSV}"
            echo "- Allow:    ${ALLOW_DOMAINS_CSV}"
            echo "- Dirs:     ${DIRS_COUNT}"
            echo "- Upgrade:  ${DO_UPGRADE}"
            echo "- Images(spec): ${IMAGES_WITH_FALLBACK_CSV}"
            echo
            echo "## ${root} (top-level)"
            echo '```'
            ls -la "${root}" || true
            echo '```'
          } > "${root}/logs/summary.md"

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-echo-mega-${{ github.run_id }}
          path: |
            ${{ env.ECHO_ROOT }}/**
            .github/echo_perm/**
            .github/echo_up/**
            ${{ env.LOG_DIR }}/**
          if-no-files-found: warn

      - name: (Optional) Create GitHub Release (always if enabled; forced fallback)
        if: ${{ env.CREATE_RELEASE == 'true' && always() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          prefix="$(safe_tag "${RELEASE_TAG_PREFIX}")"
          ts="$(date +%Y%m%d%H%M%S)"
          tag="${prefix}-${ts}"
          name="MCP EchoOps MEGA ${ts}"
          body="Automated release for MCP EchoOps MEGA run ${GITHUB_RUN_ID}"
          file="${ECHO_ROOT}/logs/summary.md"
          gh_release_create "$tag" "$name" "$body" "$file" || true

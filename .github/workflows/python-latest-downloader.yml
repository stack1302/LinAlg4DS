name: "🐍 Python Latest Downloader (curl + official URLs + Echo + 호출용, 대량 디렉토리 포함)"

on:
  workflow_dispatch:
    inputs:
      track:
        description: "받을 트랙: latest(최신 3.x) 또는 3.13/3.12 등"
        required: false
        default: "latest"
      version_override:
        description: "정확한 버전 강제 (예: 3.13.2). 지정 시 track 무시"
        required: false
        default: ""
      include_installers:
        description: "Windows/macOS 설치 파일까지 다운로드"
        type: boolean
        required: false
        default: false
      dirs_root:
        description: "대량 디렉토리 생성 루트(예: .github/echo_dirs)"
        required: false
        default: ".github/echo_dirs"
      dirs_count:
        description: "생성할 디렉토리 개수(예: 2000, 0이면 스킵)"
        required: false
        default: "0"
  workflow_call:
    inputs:
      track:
        required: false
        type: string
        default: "latest"
      version_override:
        required: false
        type: string
        default: ""
      include_installers:
        required: false
        type: boolean
        default: false
      dirs_root:
        required: false
        type: string
        default: ".github/echo_dirs"
      dirs_count:
        required: false
        type: string
        default: "0"

permissions:
  contents: read

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  resolve-and-download:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Install tools (jq, coreutils)"
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq coreutils

      - name: "Init echo helpers (export to env)"
        id: echo_init
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          set -Eeuo pipefail
          # ▶ 모든 에코/로그는 stdout 오염 방지를 위해 stderr로 보냅니다.
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*" | tee -a "${LOG_DIR}/python-download.log" 1>&2; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*" | tee -a "${LOG_DIR}/python-download.log" 1>&2; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*" | tee -a "${LOG_DIR}/python-download.log" 1>&2; }
          run_cmd(){
            printf '▶ %s\n' "$*" | tee -a "${LOG_DIR}/python-download.log" 1>&2
            # 명령 stdout은 그대로 두되, stderr는 로그로 남깁니다.
            eval "$@" 2> >(tee -a "${LOG_DIR}/python-download.log" 1>&2)
          }
          curl_get(){
            local url="$1"; local out="$2"
            run_cmd "curl -fSsvL --retry 5 --retry-all-errors --retry-delay 2 --connect-timeout 20 --max-time 600 \"$url\" -o \"$out\""
          }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "ECHO_HELPERS=/tmp/echo_helpers.sh" >> "$GITHUB_ENV"
          echo "helpers=/tmp/echo_helpers.sh"      >> "$GITHUB_OUTPUT"

      # ── 강건한 버전 해석: Releases → Tags → python.org ───────────────────────
      - name: "Resolve Python version (robust: Releases → Tags → python.org fallback)"
        id: resolve
        env:
          INPUT_TRACK: ${{ inputs.track || github.event.inputs.track }}
          INPUT_VERSION_OVERRIDE: ${{ inputs.version_override || github.event.inputs.version_override }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"

          TRACK="${INPUT_TRACK:-latest}"
          OVERRIDE="${INPUT_VERSION_OVERRIDE:-}"

          UA_HDR=(-H "User-Agent: python-latest-downloader/1.0")
          AUTH_HDR=()
          [ -n "${GH_TOKEN:-}" ] && AUTH_HDR=(-H "Authorization: Bearer ${GH_TOKEN}")

          # JSON 배열에서 3.x.y만 추출, prefix(예: 3.13.)가 있으면 해당 계열만
          pick_from_json(){
            local prefix="$1"
            jq -r --arg pfx "$prefix" '
              map(if has("tag_name") then .tag_name else .name end)
              | map(gsub("^v";""))
              | map(select((. | test("^3\\.[0-9]+\\.[0-9]+$")) and (if $pfx != "" then startswith($pfx) else true end)))
              | sort_by( split(".") | map(tonumber) ) | reverse | .[0]
            '
          }

          choose_version_from_github(){
            # Releases 1..3 pages
            for page in 1 2 3; do
              URL="https://api.github.com/repos/python/cpython/releases?per_page=100&page=${page}"
              echoe "GitHub Releases 페이지 ${page} 조회: $URL"
              RESP="$(curl -fSsL "${UA_HDR[@]}" "${AUTH_HDR[@]}" -H "Accept: application/vnd.github+json" "$URL" || true)"
              [ -z "$RESP" ] && continue
              RESP_STABLE="$(echo "$RESP" | jq '[.[] | select(.prerelease==false and .draft==false)]')"
              if [ "${TRACK}" = "latest" ]; then
                CANDIDATE="$(echo "$RESP_STABLE" | pick_from_json "")"
              else
                CANDIDATE="$(echo "$RESP_STABLE" | pick_from_json "${TRACK}.")"
              fi
              if [ -n "$CANDIDATE" ] && [ "$CANDIDATE" != "null" ]; then
                printf '%s\n' "$CANDIDATE"   # ← 오직 버전만 stdout
                return 0
              fi
            done
            # Tags 1..3 pages
            for page in 1 2 3; do
              URL="https://api.github.com/repos/python/cpython/tags?per_page=100&page=${page}"
              echoe "GitHub Tags 페이지 ${page} 조회: $URL"
              RESP="$(curl -fSsL "${UA_HDR[@]}" "${AUTH_HDR[@]}" -H "Accept: application/vnd.github+json" "$URL" || true)"
              [ -z "$RESP" ] && continue
              if [ "${TRACK}" = "latest" ]; then
                CANDIDATE="$(echo "$RESP" | pick_from_json "")"
              else
                CANDIDATE="$(echo "$RESP" | pick_from_json "${TRACK}.")"
              fi
              if [ -n "$CANDIDATE" ] && [ "$CANDIDATE" != "null" ]; then
                printf '%s\n' "$CANDIDATE"   # ← 오직 버전만 stdout
                return 0
              fi
            done
            return 1
          }

          fetch_from_python_org(){
            local URL_DL="https://www.python.org/downloads/"
            echoe "python.org 다운로드 페이지 조회: $URL_DL"
            local HTML; HTML="$(curl -fSsL "${UA_HDR[@]}" "$URL_DL" || true)"
            [ -z "$HTML" ] && return 1
            local VER=""
            if [ "${TRACK}" = "latest" ]; then
              VER="$(printf '%s' "$HTML" | grep -Po 'Latest Python 3 Release\s*-\s*Python\s*\K3\.\d+\.\d+' | head -n1)"
            else
              VER="$(printf '%s' "$HTML" | grep -Po "Python\s*\K${TRACK//./\\.}\.\d+" | head -n1)"
            fi
            [ -n "$VER" ] || return 1
            local FTP_BASE="https://www.python.org/ftp/python/${VER}"
            if curl -fsI "${FTP_BASE}/Python-${VER}.tar.xz" >/dev/null 2>&1 || curl -fsI "${FTP_BASE}/Python-${VER}.tgz" >/dev/null 2>&1; then
              printf '%s\n' "$VER"           # ← 오직 버전만 stdout
              return 0
            fi
            return 1
          }

          if [ -n "$OVERRIDE" ]; then
            VERSION="$OVERRIDE"
            echoe "version_override 지정됨 → VERSION=${VERSION}"
          else
            # stdout로는 버전만 나오도록 하고, 혹시 섞여도 필터링
            VERSION="$(choose_version_from_github 2>/dev/stderr | grep -Eo '^3\.[0-9]+\.[0-9]+$' | head -n1 || true)"
            if [ -z "$VERSION" ]; then
              VERSION="$(fetch_from_python_org 2>/dev/stderr | grep -Eo '^3\.[0-9]+\.[0-9]+$' | head -n1 || true)"
            fi
            if [ -z "$VERSION" ]; then
              fail "버전을 자동으로 찾지 못했습니다. track=${TRACK} — GitHub/Tags/python.org 모두 실패"
              exit 1
            fi
            echoe "해결된 최신 버전: ${VERSION} (track=${TRACK})"
          fi

          # 안전하게 한 줄 값으로만 기록
          printf 'version=%s\n' "${VERSION}" >> "$GITHUB_OUTPUT"

      # ── 공식 URL에서만 다운로드 (curl 전용) ────────────────────────────────
      - name: "Download from official python.org (source + optional installers)"
        id: download
        env:
          VERSION: ${{ steps.resolve.outputs.version }}
          INCLUDE_INSTALLERS: ${{ inputs.include_installers || github.event.inputs.include_installers }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"

          BASE_DIR="downloads/python-${VERSION}"
          run_cmd "mkdir -p \"$BASE_DIR\""

          PY_FTP_BASE="https://www.python.org/ftp/python/${VERSION}"
          SRC_TGZ="${PY_FTP_BASE}/Python-${VERSION}.tgz"
          SRC_TXZ="${PY_FTP_BASE}/Python-${VERSION}.tar.xz"

          echoe "소스 다운로드 (python.org 공식):"
          curl_get "$SRC_TGZ" "$BASE_DIR/Python-${VERSION}.tgz" || warn "tgz 미제공일 수 있음"
          curl_get "$SRC_TXZ" "$BASE_DIR/Python-${VERSION}.tar.xz" || warn "tar.xz 미제공일 수 있음"

          if [ "${INCLUDE_INSTALLERS}" = "true" ]; then
            echoe "설치 파일(공식) 추가 다운로드:"
            curl_get "${PY_FTP_BASE}/python-${VERSION}-amd64.exe"       "$BASE_DIR/python-${VERSION}-amd64.exe"       || warn "Windows exe 미제공"
            curl_get "${PY_FTP_BASE}/python-${VERSION}-embed-amd64.zip" "$BASE_DIR/python-${VERSION}-embed-amd64.zip" || warn "Windows embed 미제공"
            curl_get "${PY_FTP_BASE}/python-${VERSION}-macos11.pkg"     "$BASE_DIR/python-${VERSION}-macos11.pkg"     || warn "macOS pkg 미제공"
          fi

          echoe "다운로드 목록:"
          run_cmd "ls -al \"$BASE_DIR\" || true"

          # 0바이트 파일 정리
          find "$BASE_DIR" -type f -size 0 -print -delete | tee -a "${LOG_DIR}/python-download.log" || true

          echo "base_dir=${BASE_DIR}" >> "$GITHUB_OUTPUT"

      # ── (옵션) 대량 디렉토리 생성 ──────────────────────────────────────────
      - name: "(옵션) 대량 디렉토리 생성 (echo logged)"
        if: ${{ (inputs.dirs_count || github.event.inputs.dirs_count) != '0' }}
        env:
          VERSION: ${{ steps.resolve.outputs.version }}
          DIRS_ROOT: ${{ inputs.dirs_root || github.event.inputs.dirs_root }}
          DIRS_COUNT: ${{ inputs.dirs_count || github.event.inputs.dirs_count }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"

          ROOT="${DIRS_ROOT:-.github/echo_dirs}"
          COUNT="${DIRS_COUNT:-0}"
          TARGET_ROOT="${ROOT}/python/${VERSION}"
          run_cmd "mkdir -p \"$TARGET_ROOT\""

          if ! [[ "$COUNT" =~ ^[0-9]+$ ]]; then
            warn "dirs_count 값이 숫자가 아닙니다: $COUNT → 스킵"
            exit 0
          fi

          if [ "$COUNT" -gt 0 ]; then
            echoe "대량 디렉토리 생성: ${TARGET_ROOT} 에 ${COUNT}개"
            seq -w 1 "$COUNT" | while read -r i; do
              run_cmd "mkdir -p \"${TARGET_ROOT}/dir_${i}\""
            done
            run_cmd "ls -al \"${TARGET_ROOT}\" | head -n 50"
          fi

      # ── 아티팩트 업로드 ────────────────────────────────────────────────────
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: python-${{ steps.resolve.outputs.version }}-official
          path: |
            ${{ steps.download.outputs.base_dir }}
            ${{ inputs.dirs_root || github.event.inputs.dirs_root }}/python/${{ steps.resolve.outputs.version }}
          if-no-files-found: warn
          compression-level: 6

      # ── 요약 ──────────────────────────────────────────────────────────────
      - name: "Summary"
        env:
          VERSION: ${{ steps.resolve.outputs.version }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"
          echoe "✅ 완료: Python ${VERSION} 다운로드 (공식 URL)."
          echoe "아티팩트: python-${VERSION}-official"

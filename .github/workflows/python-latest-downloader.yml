name: "🐍 Python Latest Downloader + Verify + ISO (공식 URL/다중백업/데이터주입/보안)"

on:
  workflow_dispatch:
    inputs:
      track:
        description: "받을 트랙: latest(최신 3.x) 또는 3.13/3.12"
        required: false
        default: "latest"
      version_override:
        description: "정확한 버전 강제 (예: 3.13.2). 지정 시 track 무시"
        required: false
        default: ""
      include_installers:
        description: "Windows/macOS 설치 파일까지 다운로드"
        type: boolean
        required: false
        default: false
      dirs:
        description: "대량 디렉토리: root=경로,count=숫자 (예: root=.github/echo_dirs,count=2000)"
        required: false
        default: "root=.github/echo_dirs,count=0"
      iso_name:
        description: "생성할 ISO 파일 이름(확장자 제외)"
        required: false
        default: "python-latest"
      iso_label:
        description: "ISO 볼륨 라벨(최대 32)"
        required: false
        default: "PYTHON_LATEST"
      iso_inject:
        description: "ISO 주입: dir=경로,glob=패턴 (예: dir=docs,glob=docs/**/*.md)"
        required: false
        default: "dir=,glob="
      iso_extra_text:
        description: "ISO 내부 README.txt에 넣을 텍스트"
        required: false
        default: ""
      retention_days:
        description: "아티팩트 보관일수"
        required: false
        default: "14"
      create_release:
        description: "성공시 GitHub Release 생성/첨부"
        type: boolean
        required: false
        default: false

  workflow_call:
    inputs:
      track:           { required: false, type: string,  default: "latest" }
      version_override:{ required: false, type: string,  default: "" }
      include_installers:{ required: false, type: boolean, default: false }
      dirs:            { required: false, type: string,  default: "root=.github/echo_dirs,count=0" }
      iso_name:        { required: false, type: string,  default: "python-latest" }
      iso_label:       { required: false, type: string,  default: "PYTHON_LATEST" }
      iso_inject:      { required: false, type: string,  default: "dir=,glob=" }
      iso_extra_text:  { required: false, type: string,  default: "" }
      retention_days:  { required: false, type: string,  default: "14" }
      create_release:  { required: false, type: boolean, default: false }

permissions:
  contents: read

concurrency:
  group: python-dl-${{ github.ref }}
  cancel-in-progress: false

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  resolve-and-download:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Install tools (jq, coreutils, gpg, genisoimage/xorriso, node)"
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq coreutils gnupg genisoimage xorriso
          sudo apt-get install -y nodejs npm || true

      - name: "Init echo helpers (stderr logging + resumable curl)"
        id: echo_init
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          set -Eeuo pipefail
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*" | tee -a "${LOG_DIR}/python-download.log" 1>&2; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*" | tee -a "${LOG_DIR}/python-download.log" 1>&2; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*" | tee -a "${LOG_DIR}/python-download.log" 1>&2; }
          run_cmd(){
            printf '▶ %s\n' "$*" | tee -a "${LOG_DIR}/python-download.log" 1>&2
            eval "$@" 2> >(tee -a "${LOG_DIR}/python-download.log" 1>&2)
          }
          try(){ local n=0; until "$@"; do n=$((n+1)); [ $n -ge 5 ] && return 1; sleep $((2**n)); done; }
          curl_get(){
            local url="$1"; local out="$2"
            run_cmd "curl -C - -fSsvL --retry 5 --retry-all-errors --retry-delay 2 --connect-timeout 20 --max-time 1200 \"$url\" -o \"$out\""
          }
          # 간단한 key=value 파서 (콤마 구분, 키 대소문자 무시)
          kv_get(){ echo "$1" | tr ',' '\n' | awk -F= -v k="$2" 'BEGIN{IGNORECASE=1} $1==k{ $1=""; sub(/^=/,""); print $0 }'; }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "ECHO_HELPERS=/tmp/echo_helpers.sh" >> "$GITHUB_ENV"
          echo "helpers=/tmp/echo_helpers.sh"      >> "$GITHUB_OUTPUT"

      - name: "Validate inputs"
        run: |
          set -Eeuo pipefail
          t="${{ inputs.track || github.event.inputs.track }}"
          v="${{ inputs.version_override || github.event.inputs.version_override }}"
          label="${{ inputs.iso_label || github.event.inputs.iso_label }}"
          if [ -n "$t" ] && ! [[ "$t" =~ ^latest$|^3\.[0-9]{1,2}$ ]]; then
            echo "::error::track 형식 오류 (latest 또는 3.13 형태)"; exit 1; fi
          if [ -n "$v" ] && ! [[ "$v" =~ ^3\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::version_override 형식 오류 (3.x.y)"; exit 1; fi
          if [ -n "$label" ] && [ ${#label} -gt 32 ]; then
            echo "::error::iso_label 최대 길이 32"; exit 1; fi

      - name: "Cache downloads"
        uses: actions/cache@v4
        with:
          path: downloads
          key: python-${{ inputs.version_override || 'auto' }}-${{ inputs.track || 'latest' }}-downloads

      # ── 버전 해석: Releases → Tags → python.org ───────────────────────────
      - name: "Resolve Python version (robust)"
        id: resolve
        env:
          INPUT_TRACK: ${{ inputs.track || github.event.inputs.track }}
          INPUT_VERSION_OVERRIDE: ${{ inputs.version_override || github.event.inputs.version_override }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"

          TRACK="${INPUT_TRACK:-latest}"
          OVERRIDE="${INPUT_VERSION_OVERRIDE:-}"

          UA_HDR=(-H "User-Agent: python-latest-downloader/1.0")
          AUTH_HDR=()
          [ -n "${GH_TOKEN:-}" ] && AUTH_HDR=(-H "Authorization: Bearer ${GH_TOKEN}")

          pick_from_json(){
            local prefix="$1"
            jq -r --arg pfx "$prefix" '
              map(if has("tag_name") then .tag_name else .name end)
              | map(gsub("^v";""))
              | map(select((. | test("^3\\.[0-9]+\\.[0-9]+$")) and (if $pfx != "" then startswith($pfx) else true end)))
              | sort_by( split(".") | map(tonumber) ) | reverse | .[0]
            '
          }

          choose_version_from_github(){
            for page in 1 2 3; do
              URL="https://api.github.com/repos/python/cpython/releases?per_page=100&page=${page}"
              echoe "GitHub Releases 페이지 ${page} 조회: $URL"
              RESP="$(try curl -fSsL "${UA_HDR[@]}" "${AUTH_HDR[@]}" -H "Accept: application/vnd.github+json" "$URL" || true)"
              [ -z "$RESP" ] && continue
              RESP_STABLE="$(echo "$RESP" | jq '[.[] | select(.prerelease==false and .draft==false)]')"
              if [ "${TRACK}" = "latest" ]; then
                CANDIDATE="$(echo "$RESP_STABLE" | pick_from_json "")"
              else
                CANDIDATE="$(echo "$RESP_STABLE" | pick_from_json "${TRACK}.")"
              fi
              if [ -n "$CANDIDATE" ] && [ "$CANDIDATE" != "null" ]; then
                printf '%s\n' "$CANDIDATE"; return 0
              fi
            done
            for page in 1 2 3; do
              URL="https://api.github.com/repos/python/cpython/tags?per_page=100&page=${page}"
              echoe "GitHub Tags 페이지 ${page} 조회: $URL"
              RESP="$(try curl -fSsL "${UA_HDR[@]}" "${AUTH_HDR[@]}" -H "Accept: application/vnd.github+json" "$URL" || true)"
              [ -z "$RESP" ] && continue
              if [ "${TRACK}" = "latest" ]; then
                CANDIDATE="$(echo "$RESP" | pick_from_json "")"
              else
                CANDIDATE="$(echo "$RESP" | pick_from_json "${TRACK}.")"
              fi
              if [ -n "$CANDIDATE" ] && [ "$CANDIDATE" != "null" ]; then
                printf '%s\n' "$CANDIDATE"; return 0
              fi
            done
            return 1
          }

          fetch_from_python_org(){
            local URL_DL="https://www.python.org/downloads/"
            echoe "python.org 다운로드 페이지 조회: $URL_DL"
            local HTML; HTML="$(try curl -fSsL "${UA_HDR[@]}" "$URL_DL" || true)"
            [ -z "$HTML" ] && return 1
            local VER=""
            if [ "${TRACK}" = "latest" ]; then
              VER="$(printf '%s' "$HTML" | grep -Po 'Latest Python 3 Release\\s*-\\s*Python\\s*\\K3\\.\\d+\\.\\d+' | head -n1)"
            else
              VER="$(printf '%s' "$HTML" | grep -Po "Python\\s*\\K${TRACK//./\\.}\\.\\d+" | head -n1)"
            fi
            [ -n "$VER" ] || return 1
            local FTP_BASE="https://www.python.org/ftp/python/${VER}"
            if curl -fsI "${FTP_BASE}/Python-${VER}.tar.xz" >/dev/null 2>&1 || curl -fsI "${FTP_BASE}/Python-${VER}.tgz" >/dev/null 2>&1; then
              printf '%s\n' "$VER"; return 0
            fi
            return 1
          }

          if [ -n "$OVERRIDE" ]; then
            VERSION="$OVERRIDE"; echoe "version_override 지정됨 → ${VERSION}"
          else
            VERSION="$(choose_version_from_github 2>/dev/stderr | grep -Eo '^3\\.[0-9]+\\.[0-9]+$' | head -n1 || true)"
            [ -z "$VERSION" ] && VERSION="$(fetch_from_python_org 2>/dev/stderr | grep -Eo '^3\\.[0-9]+\\.[0-9]+$' | head -n1 || true)"
            [ -z "$VERSION" ] && { fail "버전을 자동으로 찾지 못했습니다. track=${TRACK}"; exit 1; }
            echoe "해결된 최신 버전: ${VERSION} (track=${TRACK})"
          fi

          printf 'version=%s\n' "${VERSION}" >> "$GITHUB_OUTPUT"

      - name: "Cache key warm"
        if: always()
        run: mkdir -p downloads

      # ── 공식 URL에서만 다운로드 ───────────────────────────────────────────
      - name: "Download from official python.org (sources + optional installers)"
        id: download
        env:
          VERSION: ${{ steps.resolve.outputs.version }}
          INCLUDE_INSTALLERS: ${{ inputs.include_installers || github.event.inputs.include_installers }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"

          BASE_DIR="downloads/python-${VERSION}"
          run_cmd "mkdir -p \"$BASE_DIR\""
          find downloads -name "*.part" -delete || true

          PY_FTP_BASE="https://www.python.org/ftp/python/${VERSION}"
          SRC_TGZ="${PY_FTP_BASE}/Python-${VERSION}.tgz"
          SRC_TXZ="${PY_FTP_BASE}/Python-${VERSION}.tar.xz"

          echoe "소스 다운로드:"
          curl_get "$SRC_TGZ" "$BASE_DIR/Python-${VERSION}.tgz" || warn "tgz 미제공일 수 있음"
          curl_get "$SRC_TXZ" "$BASE_DIR/Python-${VERSION}.tar.xz" || warn "tar.xz 미제공일 수 있음"

          if [ "${INCLUDE_INSTALLERS}" = "true" ]; then
            echoe "설치 파일:"
            curl_get "${PY_FTP_BASE}/python-${VERSION}-amd64.exe"       "$BASE_DIR/python-${VERSION}-amd64.exe"       || warn "Windows exe 미제공"
            curl_get "${PY_FTP_BASE}/python-${VERSION}-embed-amd64.zip" "$BASE_DIR/python-${VERSION}-embed-amd64.zip" || warn "Windows embed 미제공"
            curl_get "${PY_FTP_BASE}/python-${VERSION}-macos11.pkg"     "$BASE_DIR/python-${VERSION}-macos11.pkg"     || warn "macOS pkg 미제공"
          fi

          echoe "다운로드 결과:"
          run_cmd "ls -al \"$BASE_DIR\" || true"
          find "$BASE_DIR" -type f -size 0 -print -delete | tee -a "${LOG_DIR}/python-download.log" || true
          echo "base_dir=${BASE_DIR}" >> "$GITHUB_OUTPUT"

      # ── 체크섬/GPG 검증 ───────────────────────────────────────────────────
      - name: "Verify checksums (sha256) & GPG signatures (if available)"
        env:
          VERSION: ${{ steps.resolve.outputs.version }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"
          BASE="downloads/python-${VERSION}"
          FTP="https://www.python.org/ftp/python/${VERSION}"
          for f in tgz tar.xz; do
            curl_get "${FTP}/Python-${VERSION}.${f}.sha256" "${BASE}/Python-${VERSION}.${f}.sha256" || true
            curl_get "${FTP}/Python-${VERSION}.${f}.asc"    "${BASE}/Python-${VERSION}.${f}.asc"    || true
          done
          for f in tgz tar.xz; do
            if [ -s "${BASE}/Python-${VERSION}.${f}" ] && [ -s "${BASE}/Python-${VERSION}.${f}.sha256" ]; then
              echo "($(cut -d' ' -f1 ${BASE}/Python-${VERSION}.${f}.sha256))  ${BASE}/Python-${VERSION}.${f}" | sha256sum -c -
            fi
          done
          curl_get "https://www.python.org/static/files/pubkeys.txt" "${BASE}/python_pubkeys.txt" || true
          if [ -s "${BASE}/python_pubkeys.txt" ]; then
            gpg --batch --import "${BASE}/python_pubkeys.txt" || true
            for f in tgz tar.xz; do
              if [ -s "${BASE}/Python-${VERSION}.${f}" ] && [ -s "${BASE}/Python-${VERSION}.${f}.asc" ]; then
                gpg --batch --verify "${BASE}/Python-${VERSION}.${f}.asc" "${BASE}/Python-${VERSION}.${f}" || warn "GPG verify warning: ${f}"
              fi
            done
          else
            warn "python_pubkeys.txt 미입수 → GPG 검증 스킵"
          fi

      # ── SBOM / 보안 스캔(가볍게) ──────────────────────────────────────────
      - name: "Generate SBOM (CycloneDX)"
        continue-on-error: true
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"
          npm i -g @cyclonedx/cyclonedx-npm || true
          echo '{}' > /tmp/package.json
          cyclonedx-npm --output-file downloads/sbom-python.json || true

      - name: "Trivy scan (fs)"
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: downloads
          format: 'table'
          output: 'downloads/trivy.txt'

      # ── (옵션) 대량 디렉토리 생성 ─────────────────────────────────────────
      - name: "(옵션) 대량 디렉토리 생성 (echo logged)"
        if: ${{ (inputs.dirs || github.event.inputs.dirs) != '' }}
        env:
          VERSION: ${{ steps.resolve.outputs.version }}
          DIRS_SPEC: ${{ inputs.dirs || github.event.inputs.dirs }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"
          ROOT="$(kv_get "${DIRS_SPEC}" root)"; [ -n "$ROOT" ] || ROOT=".github/echo_dirs"
          COUNT="$(kv_get "${DIRS_SPEC}" count)"; [ -n "$COUNT" ] || COUNT="0"
          TARGET_ROOT="${ROOT}/python/${VERSION}"
          run_cmd "mkdir -p \"$TARGET_ROOT\""
          if ! [[ "$COUNT" =~ ^[0-9]+$ ]]; then
            warn "dirs.count가 숫자가 아닙니다: $COUNT → 스킵"; exit 0; fi
          if [ "$COUNT" -gt 0 ]; then
            echoe "대량 디렉토리 생성: ${TARGET_ROOT} 에 ${COUNT}개"
            seq -w 1 "$COUNT" | while read -r i; do
              run_cmd "mkdir -p \"${TARGET_ROOT}/dir_${i}\""
            done
            run_cmd "ls -al \"${TARGET_ROOT}\" | head -n 50"
          fi

      # ── ISO 생성(데이터 주입 포함) ────────────────────────────────────────
      - name: "Build ISO (with injected data)"
        id: iso
        env:
          VERSION: ${{ steps.resolve.outputs.version }}
          ISO_NAME:  ${{ inputs.iso_name  || github.event.inputs.iso_name }}
          ISO_LABEL: ${{ inputs.iso_label || github.event.inputs.iso_label }}
          INJECT_SPEC: ${{ inputs.iso_inject || github.event.inputs.iso_inject }}
          ISO_EXTRA_TEXT: ${{ inputs.iso_extra_text || github.event.inputs.iso_extra_text }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"

          # iso_inject 파싱 (dir, glob)
          INJECT_DIR="$(kv_get "${INJECT_SPEC}" dir)";  INJECT_DIR="${INJECT_DIR:-}"
          INJECT_GLOB="$(kv_get "${INJECT_SPEC}" glob)"; INJECT_GLOB="${INJECT_GLOB:-}"

          DL_DIR="downloads/python-${VERSION}"
          ISO_ROOT="iso_root/python-${VERSION}"
          OUT_DIR="outputs"
          mkdir -p "$ISO_ROOT" "$OUT_DIR"

          # 1) 공식 다운로드 파일 복사
          run_cmd "cp -a ${DL_DIR}/* ${ISO_ROOT}/ 2>/dev/null || true"

          # 2) 주입: 디렉토리
          if [ -n "${INJECT_DIR}" ] && [ -d "${INJECT_DIR}" ]; then
            echoe "주입(디렉토리): ${INJECT_DIR} → ${ISO_ROOT}/extras/"
            run_cmd "mkdir -p ${ISO_ROOT}/extras"
            run_cmd "cp -a \"${INJECT_DIR}\" \"${ISO_ROOT}/extras/\""
          fi

          # 3) 주입: 글롭
          if [ -n "${INJECT_GLOB}" ]; then
            echoe "주입(글롭): ${INJECT_GLOB} → ${ISO_ROOT}/extras/"
            run_cmd "mkdir -p ${ISO_ROOT}/extras"
            shopt -s globstar nullglob
            for f in ${INJECT_GLOB}; do
              [ -e "$f" ] || continue
              run_cmd "cp -a \"$f\" \"${ISO_ROOT}/extras/\""
            done
            shopt -u globstar || true
          fi

          # 4) 주입: README.txt
          if [ -n "${ISO_EXTRA_TEXT}" ]; then
            run_cmd "mkdir -p ${ISO_ROOT}"
            {
              echo "Python Version: ${VERSION}"
              echo "Generated at: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
              echo "Repo: $GITHUB_REPOSITORY (run #$GITHUB_RUN_NUMBER)"
              echo ""
              echo "${ISO_EXTRA_TEXT}"
            } > "${ISO_ROOT}/README.txt"
          fi

          # 5) ISO 이름/라벨
          NAME="${ISO_NAME:-python-${VERSION}}"
          LABEL="${ISO_LABEL:-PYTHON_${VERSION//./_}}"
          ISO_PATH="${OUT_DIR}/${NAME}.iso"

          # 6) ISO 생성 (Joliet + Rock Ridge)
          run_cmd "genisoimage -quiet -V \"${LABEL}\" -J -R -o \"${ISO_PATH}\" \"${ISO_ROOT}\"" || true
          if [ ! -s "${ISO_PATH}" ]; then
            warn "genisoimage 실패 또는 0바이트 → xorriso로 재시도"
            run_cmd "xorriso -as mkisofs -quiet -volid \"${LABEL}\" -J -R -o \"${ISO_PATH}\" \"${ISO_ROOT}\""
          fi
          [ -s "${ISO_PATH}" ] || { fail "ISO 생성 실패"; exit 1; }

          sha256sum "${ISO_PATH}" | tee "${ISO_PATH}.sha256" 1>&2
          printf 'iso_path=%s\n' "${ISO_PATH}" >> "$GITHUB_OUTPUT"

      # ── 아티팩트 업로드 ────────────────────────────────────────────────────
      - name: "Upload artifacts (downloads + ISO + logs + SBOM + scan)"
        uses: actions/upload-artifact@v4
        with:
          name: python-${{ steps.resolve.outputs.version }}-bundle-${{ github.run_number }}
          path: |
            ${{ steps.download.outputs.base_dir }}
            iso_root
            ${{ steps.iso.outputs.iso_path }}
            ${{ steps.iso.outputs.iso_path }}.sha256
            downloads/sbom-python.json
            downloads/trivy.txt
            .github/echo_logs
          if-no-files-found: warn
          retention-days: ${{ inputs.retention_days || github.event.inputs.retention_days }}
          compression-level: 6

      # ── Provenance & Release(옵션) ────────────────────────────────────────
      - name: "Attest build provenance (SLSA-ish)"
        if: always()
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: "python-${{ steps.resolve.outputs.version }}-bundle"
          subject-digest: "sha256:$(sha256sum ${{ steps.iso.outputs.iso_path }} | cut -d' ' -f1)"

      - name: "Create GitHub Release (optional)"
        if: ${{ (inputs.create_release || github.event.inputs.create_release) == true }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.resolve.outputs.version }}
          name: "Python ${{ steps.resolve.outputs.version }} bundle"
          draft: false
          prerelease: false
          files: |
            ${{ steps.download.outputs.base_dir }}/*
            ${{ steps.iso.outputs.iso_path }}
            ${{ steps.iso.outputs.iso_path }}.sha256
            downloads/sbom-python.json
            downloads/trivy.txt

      # ── 실패 시 덤프 ──────────────────────────────────────────────────────
      - name: "Failure dump"
        if: failure()
        run: |
          set -Eeuo pipefail
          echo "### Downloads tree" >> $GITHUB_STEP_SUMMARY
          { echo '```'; find downloads -maxdepth 3 -type f -printf '%P\n' | sort || true; echo '```'; } >> $GITHUB_STEP_SUMMARY
          echo "### ISO root tree" >> $GITHUB_STEP_SUMMARY
          { echo '```'; find iso_root -maxdepth 4 -type f -printf '%P\n' | sort || true; echo '```'; } >> $GITHUB_STEP_SUMMARY

      - name: "Summary"
        env:
          VERSION: ${{ steps.resolve.outputs.version }}
        run: |
          set -Eeuo pipefail
          source "$ECHO_HELPERS"
          echoe "✅ 완료: Python ${VERSION} 다운로드/검증 + ISO 생성/주입 + 아티팩트 업로드 완료."

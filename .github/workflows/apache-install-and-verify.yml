name: "üß± Apache Install + Configure + Start + Verify (ALL-ECHO, Ubuntu)"

on:
  workflow_dispatch:
    inputs:
      site_name:
        description: "Í∞ÄÏÉÅÌò∏Ïä§Ìä∏ ServerName (Í∏∞Î≥∏: localhost)"
        required: true
        default: "localhost"
      index_title:
        description: "index.html ÌÉÄÏù¥ÌãÄ"
        required: true
        default: "Apache ALL-ECHO"
      index_message:
        description: "index.html Î≥∏Î¨∏ Î©îÏãúÏßÄ"
        required: true
        default: "Apache is up on GitHub Actions runner üöÄ"

permissions:
  contents: write

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_apache
  ECHO_OK: "‚úÖ"
  ECHO_WARN: "‚ö†Ô∏è"
  ECHO_FAIL: "‚ùå"

jobs:
  apache:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚ôªÔ∏è Prepare echo helpers & trap
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          HELPER="${LOG_DIR}/echo_helpers.sh"
          cat > "${HELPER}" <<'SH'
          set -Eeuo pipefail
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*"; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*"; }
          logf(){  printf '%s\n' "$*" | tee -a "${LOG_DIR}/run.log"; }
          run_cmd(){
            logf "‚ñ∂ $*"
            # shellcheck disable=SC2086
            eval $* 2>&1 | tee -a "${LOG_DIR}/run.log"
            local rc=${PIPESTATUS[0]}
            if [ $rc -eq 0 ]; then echoe "DONE($rc): $*"; else warn "RC=$rc ‚Üê $*"; fi
            return $rc
          }
          SH
          source "${HELPER}"

          cleanup(){
            warn "CLEANUP: collecting diagnostics‚Ä¶"
            {
              echo "=== APACHE PROCESSES ==="
              ps -eo pid,ppid,user,cmd | grep -E 'apache2|httpd' | grep -v grep || true
              echo
              echo "=== LISTEN PORTS (80/443) ==="
              ss -lntp || true
              echo
              echo "=== APACHE CONFIGTEST ==="
              sudo apache2ctl configtest || true
              echo
              echo "=== APACHE ERROR LOG (tail) ==="
              sudo tail -n 200 /var/log/apache2/error.log || true
              echo
              echo "=== SAVED HEADERS ==="
              sed -n '1,200p' "${LOG_DIR}"/curl_*.hdr 2>/dev/null || true
              echo
              echo "=== SAVED HTML (first 80 lines) ==="
              for f in "${LOG_DIR}"/curl_*.html; do
                [ -f "$f" ] || continue
                echo "--- $f ---"
                sed -n '1,80p' "$f"
              done
            } | tee -a "${LOG_DIR}/diagnostics.txt"
          }
          trap 'rc=$?; [ $rc -eq 0 ] || cleanup; exit $rc' EXIT
          echoe "Echo helpers ready at ${HELPER}"

      - name: üß© System info (echo)
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"
          logf "Runner: $(uname -a)"
          logf "User: $(id)"
          logf "TZ: ${TZ}"
          logf "Date: $(date -Iseconds)"
          logf "Disk: $(df -h)"
          logf "Mem: $(free -h || true)"

      - name: üß∞ Install Apache (apt) + enable common modules
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"
          run_cmd sudo apt-get update -y
          run_cmd sudo DEBIAN_FRONTEND=noninteractive apt-get install -y apache2
          run_cmd sudo a2enmod rewrite
          run_cmd sudo a2enmod headers
          run_cmd sudo a2enmod mime
          run_cmd sudo a2enmod env
          run_cmd sudo a2enmod dir
          run_cmd sudo a2enmod deflate

      - name: üèóÔ∏è Configure vhost + document root
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"

          SITE_NAME="${{ inputs.site_name }}"
          DOCROOT="/var/www/html"
          VHOST="/etc/apache2/sites-available/000-default.conf"

          run_cmd sudo mkdir -p "${DOCROOT}"
          run_cmd sudo chown -R $USER:$USER "${DOCROOT}"

          TMP_CONF="$(mktemp)"
          cat > "${TMP_CONF}" <<CONF
          <VirtualHost *:80>
              ServerName ${SITE_NAME}
              ServerAdmin webmaster@localhost
              DocumentRoot ${DOCROOT}

              <Directory ${DOCROOT}>
                  Options Indexes FollowSymLinks
                  AllowOverride All
                  Require all granted
              </Directory>

              Header always set Cache-Control "no-store"
              Header always set X-Content-Type-Options "nosniff"
              Header always set X-Frame-Options "SAMEORIGIN"
              Header always set X-XSS-Protection "1; mode=block"

              ErrorLog \${APACHE_LOG_DIR}/error.log
              CustomLog \${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>
          CONF

          run_cmd sudo cp "${TMP_CONF}" "${VHOST}"
          run_cmd sudo a2enconf servername || true
          echo "ServerName ${SITE_NAME}" | sudo tee /etc/apache2/conf-available/servername.conf >/dev/null
          run_cmd sudo a2enconf servername

      - name: üßæ Write index.html (echo content)
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"
          TITLE="${{ inputs.index_title }}"
          MSG="${{ inputs.index_message }}"
          INDEX="/var/www/html/index.html"
          cat > /tmp/index.html <<HTML
          <!doctype html>
          <html lang="ko">
          <head>
            <meta charset="utf-8">
            <meta http-equiv="Cache-Control" content="no-store" />
            <title>${TITLE}</title>
          </head>
          <body>
            <h1>${TITLE}</h1>
            <p id="msg">${MSG}</p>
            <hr/>
            <pre>Host: $(hostname) | Date: $(date -Iseconds)</pre>
          </body>
          </html>
          HTML
          run_cmd sudo mv /tmp/index.html "${INDEX}"
          run_cmd sudo ls -al /var/www/html
          run_cmd sudo sed -n '1,60p' "${INDEX}"

      - name: ‚úÖ apache2 configtest + graceful
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"
          run_cmd sudo apache2ctl configtest
          # ÏïÑÏßÅ Ïã§Ìñâ Ï†ÑÏù¥ÎùºÎèÑ Î≥ÄÍ≤Ω ÎÇ¥Ïö© Ï†ÅÏö©ÏùÑ ÏúÑÌï¥ graceful(Ïã§Ìñâ Ï§ëÏù¥Î©¥ reload, ÏïÑÎãàÎ©¥ Î¨¥Ìï¥)
          run_cmd sudo apache2ctl -k graceful || true

      - name: üöÄ Start Apache (service ‚Üí fallback apache2ctl)
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"
          if run_cmd sudo service apache2 start; then
            echoe "service apache2 start OK"
          else
            warn "service start failed ‚Üí fallback to apache2ctl"
            sudo mkdir -p /var/run/apache2
            pgrep -fa apache2 && warn "apache2 already running" || true
            run_cmd sudo apache2ctl -k start
          fi
          sleep 1
          ps -eo pid,ppid,user,cmd | grep -E 'apache2|httpd' | grep -v grep | tee -a "${LOG_DIR}/process.txt" || true
          ss -lntp | tee -a "${LOG_DIR}/ports.txt" || true

      - name: üîé Verify HTTP 200 + Body (robust, with retries)
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"

          TITLE_RE='${{ inputs.index_title }}'
          MSG_RE='${{ inputs.index_message }}'
          SITE='${{ inputs.site_name }}'

          urls=("http://127.0.0.1" "http://localhost")
          i=0
          for url in "${urls[@]}"; do
            for try in $(seq 1 10); do
              out_html="${LOG_DIR}/curl_$(echo "$url" | sed 's#[:/\.]#_#g')_${try}.html"
              out_hdr="${LOG_DIR}/curl_$(echo "$url" | sed 's#[:/\.]#_#g')_${try}.hdr"
              if curl -fsS -o "$out_html" -D "$out_hdr" "$url"; then
                echoe "CURL OK ‚Üí $url (try=$try)"
                grep -iE '^HTTP/' "$out_hdr" || true
                code=$(awk 'BEGIN{c=0} /^HTTP\//{c=$2} END{print c}' "$out_hdr")
                if [ "$code" != "200" ]; then
                  warn "HTTP code=$code (expect 200)"
                  sleep 1; continue
                fi
                # Î≥∏Î¨∏ Í≤ÄÏÇ¨: title, h1, msg Ï§ë ÌïòÎÇòÎùºÎèÑ Îß§ÏπòÎêòÎ©¥ ÌÜµÍ≥º
                if grep -qi -- "$TITLE_RE" "$out_html" || \
                   grep -qi -- "<h1>.*$TITLE_RE.*</h1>" "$out_html" || \
                   grep -qi -- "$MSG_RE" "$out_html"; then
                  echoe "Body contains expected text (title/h1/msg)"
                  i=1; break
                else
                  warn "Body check failed (try=$try); showing snippet:"
                  sed -n '1,80p' "$out_html" || true
                fi
              else
                warn "CURL FAIL ‚Üí $url (try=$try)"
              fi
              sleep 1
            done
            [ $i -eq 1 ] && break
            # Host Ìó§ÎçîÎ°úÎèÑ Ïû¨ÏãúÎèÑ(Í∞ÄÏÉÅÌò∏Ïä§Ìä∏ Îß§Ïπ≠)
            for try in $(seq 1 5); do
              out_html="${LOG_DIR}/curl_host_${try}.html"
              out_hdr="${LOG_DIR}/curl_host_${try}.hdr"
              if curl -fsS -H "Host: $SITE" -o "$out_html" -D "$out_hdr" "http://127.0.0.1"; then
                echoe "CURL OK (Host: $SITE) ‚Üí http://127.0.0.1 (try=$try)"
                code=$(awk 'BEGIN{c=0} /^HTTP\//{c=$2} END{print c}' "$out_hdr")
                if [ "$code" = "200" ] && ( grep -qi -- "$TITLE_RE" "$out_html" || grep -qi -- "$MSG_RE" "$out_html" ); then
                  echoe "Body contains expected text with Host header"
                  i=1; break
                fi
              else
                warn "CURL FAIL (Host header) (try=$try)"
              fi
              sleep 1
            done
            [ $i -eq 1 ] && break
          done

          if [ $i -ne 1 ]; then
            fail "Index title/message not found in any response"
            echo "=== Headers ==="
            sed -n '1,200p' "${LOG_DIR}"/curl_*.hdr 2>/dev/null || true
            echo "=== HTML (first 80 lines) ==="
            for f in "${LOG_DIR}"/curl_*.html; do
              [ -f "$f" ] || continue
              echo "--- $f ---"
              sed -n '1,80p' "$f"
            done
            exit 1
          fi

      - name: üì¶ Collect configs & logs
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"
          OUTDIR="apache-collect"
          run_cmd mkdir -p "${OUTDIR}/etc-apache2" "${OUTDIR}/var-log-apache2" "${OUTDIR}/echo"
          run_cmd sudo cp -a /etc/apache2/* "${OUTDIR}/etc-apache2/" || true
          run_cmd sudo cp -a /var/log/apache2/* "${OUTDIR}/var-log-apache2/" || true
          run_cmd cp -a "${LOG_DIR}"/* "${OUTDIR}/echo/" || true
          tar -czf apache-artifacts.tgz -C "${OUTDIR}" .
          echo "Created: $(pwd)/apache-artifacts.tgz"

      - name: ‚¨ÜÔ∏è Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apache-artifacts
          path: |
            apache-artifacts.tgz
            ${{ env.LOG_DIR }}/run.log
            ${{ env.LOG_DIR }}/diagnostics.txt
          if-no-files-found: warn

name: "🧱 Apache Install + Configure + Start + Verify + Copy-to-Workflows (ALL-ECHO, v3)"

on:
  workflow_dispatch:
    inputs:
      site_name:
        description: "가상호스트 ServerName (기본: localhost)"
        required: true
        default: "localhost"
      index_title:
        description: "index.html 타이틀"
        required: true
        default: "Apache ALL-ECHO"
      index_message:
        description: "index.html 본문 메시지"
        required: true
        default: "Apache is up on GitHub Actions runner 🚀"
      copy_sources:
        description: "복사할 파일/글롭(쉼표/공백/줄바꿈 구분). 예: workflows/*.yml, extra.yml"
        required: false
        default: ""
      copy_dest_subdir:
        description: ".github/workflows 하위 폴더명 (예: apache-added)"
        required: false
        default: "apache-added"
      create_pr:
        description: "복사한 파일을 PR로 올릴까요?"
        type: boolean
        required: true
        default: true
      pr_title:
        description: "PR 제목"
        required: false
        default: "chore: add copied workflow files (auto)"

permissions:
  contents: write
  pull-requests: write

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_apache
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  apache:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ♻️ Prepare echo helpers & trap
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          HELPER="${LOG_DIR}/echo_helpers.sh"
          cat > "${HELPER}" <<'SH'
          set -Eeuo pipefail
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*"; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*"; }
          logf(){  printf '%s\n' "$*" | tee -a "${LOG_DIR}/run.log"; }
          run_cmd(){
            logf "▶ $*"
            eval $* 2>&1 | tee -a "${LOG_DIR}/run.log"
            local rc=${PIPESTATUS[0]}
            if [ $rc -eq 0 ]; then echoe "DONE($rc): $*"; else warn "RC=$rc ← $*"; fi
            return $rc
          }
          SH
          source "${HELPER}"

          cleanup(){
            warn "CLEANUP: collecting diagnostics…"
            {
              echo "=== APACHE PROCESSES ==="
              ps -eo pid,ppid,user,cmd | grep -E 'apache2|httpd' | grep -v grep || true
              echo
              echo "=== LISTEN PORTS (80/443) ==="
              ss -lntp || true
              echo
              echo "=== ports.conf ==="
              sudo sed -n '1,160p' /etc/apache2/ports.conf 2>/dev/null || true
              echo
              echo "=== sites-available/000-default.conf ==="
              sudo sed -n '1,200p' /etc/apache2/sites-available/000-default.conf 2>/dev/null || true
              echo
              echo "=== apache2ctl -S ==="
              sudo apache2ctl -S || true
              echo
              echo "=== apache2ctl -M ==="
              sudo apache2ctl -M || true
              echo
              echo "=== APACHE ERROR LOG (tail) ==="
              sudo tail -n 200 /var/log/apache2/error.log || true
              echo
              echo "=== SAVED HEADERS ==="
              sed -n '1,200p' "${LOG_DIR}"/curl_*.hdr 2>/dev/null || true
              echo
              echo "=== SAVED HTML (first 80 lines) ==="
              for f in "${LOG_DIR}"/curl_*.html; do
                [ -f "$f" ] || continue
                echo "--- $f ---"
                sed -n '1,80p' "$f"
              done
            } | tee -a "${LOG_DIR}/diagnostics.txt"
          }
          trap 'rc=$?; [ $rc -eq 0 ] || cleanup; exit $rc' EXIT
          echoe "Echo helpers ready at ${HELPER}"

      # (중략) — 아파치 설치/설정/기동/검증 스텝은 이전 v2와 동일
      # == 설치/설정/검증 스텝은 그대로 유지하세요 ==
      # 필요 시 제가 드린 Ultra-Robust v2 본문을 여기에 그대로 둡니다.

      - name: 📦 Collect configs & logs
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"
          OUTDIR="apache-collect"
          run_cmd mkdir -p "${OUTDIR}/etc-apache2" "${OUTDIR}/var-log-apache2" "${OUTDIR}/echo"
          run_cmd sudo cp -a /etc/apache2/* "${OUTDIR}/etc-apache2/" || true
          run_cmd sudo cp -a /var/log/apache2/* "${OUTDIR}/var-log-apache2/" || true
          run_cmd cp -a "${LOG_DIR}"/* "${OUTDIR}/echo/" || true
          tar -czf apache-artifacts.tgz -C "${OUTDIR}" .
          echo "Created: $(pwd)/apache-artifacts.tgz"

      - name: 🗂️ Copy files into .github/workflows (by pattern)
        if: ${{ inputs.copy_sources != '' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          source "${LOG_DIR}/echo_helpers.sh"

          DEST_BASE=".github/workflows"
          SUBDIR="${{ inputs.copy_dest_subdir }}"
          DEST="${DEST_BASE}/${SUBDIR}"
          RAW="${{ inputs.copy_sources }}"

          run_cmd mkdir -p "${DEST}"
          echo "Copy dest: ${DEST}" | tee -a "${LOG_DIR}/run.log"

          # 패턴 목록 분리(쉼표/공백/줄바꿈)
          printf '%s\n' "$RAW" | tr ', ' '\n' | sed '/^$/d' > /tmp/copy_list.txt
          echo "Patterns:"; cat /tmp/copy_list.txt || true

          shopt -s nullglob globstar
          : > "${LOG_DIR}/copy_map.txt"

          while IFS= read -r pattern; do
            # 패턴을 그대로 글롭 확장
            found=0
            for f in $pattern; do
              # 디렉토리는 스킵, 파일만
              [ -f "$f" ] || continue
              base="$(basename "$f")"
              # 상위 경로 역참조 방지(파일은 워킹트리에 있다고 가정)
              run_cmd install -m0644 -D "$f" "${DEST}/${base}"
              echo "$f -> ${DEST}/${base}" | tee -a "${LOG_DIR}/copy_map.txt"
              found=$((found+1))
            done
            if [ $found -eq 0 ]; then
              warn "No match for pattern: $pattern"
            else
              echoe "Copied $found file(s) for pattern: $pattern"
            fi
          done < /tmp/copy_list.txt

          echo "==== COPY SUMMARY ===="
          sed -n '1,200p' "${LOG_DIR}/copy_map.txt" || true

      - name: ⬆️ Upload artifact (logs + copy map)
        uses: actions/upload-artifact@v4
        with:
          name: apache-artifacts
          path: |
            apache-artifacts.tgz
            ${{ env.LOG_DIR }}/run.log
            ${{ env.LOG_DIR }}/diagnostics.txt
            ${{ env.LOG_DIR }}/copy_map.txt
          if-no-files-found: warn

      - name: 🔀 Create Pull Request with copied files
        if: ${{ inputs.copy_sources != '' && inputs.create_pr }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          add-paths: |
            .github/workflows/**
          commit-message: |
            chore(workflows): add copied files under .github/workflows/${{ inputs.copy_dest_subdir }}

            - Auto-copied via Apache workflow
            - See .github/echo_apache/copy_map.txt for mapping
          title: ${{ inputs.pr_title }}
          body: |
            ## Summary
            This PR adds files under `.github/workflows/${{ inputs.copy_dest_subdir }}`.

            - Source patterns: `${{ inputs.copy_sources }}`
            - Mapping recorded in: `.github/echo_apache/copy_map.txt`

            _Automated by Apache ALL-ECHO workflow._
          branch: "auto/workflows-copy-${{ inputs.copy_dest_subdir }}"
          delete-branch: true

name: "üß± Apache Install + Verify + Fixed Copy-to-.github/workflows + Upgrade (ALL-ECHO v5)"

on:
  workflow_dispatch:
    inputs:
      site_name:
        description: "Í∞ÄÏÉÅÌò∏Ïä§Ìä∏ ServerName"
        required: true
        default: "localhost"
      index_title:
        description: "index.html ÌÉÄÏù¥ÌãÄ"
        required: true
        default: "Apache ALL-ECHO"
      index_message:
        description: "index.html Î≥∏Î¨∏ Î©îÏãúÏßÄ"
        required: true
        default: "Apache is up on GitHub Actions runner üöÄ"

      # ---- ÌååÏùº Î≥µÏÇ¨(Í≤ΩÎ°ú Í≥†Ï†ï) ----
      copy_sources:
        description: "Î≥µÏÇ¨Ìï† ÌååÏùº/Í∏ÄÎ°≠(ÏâºÌëú¬∑Í≥µÎ∞±¬∑Ï§ÑÎ∞îÍøà Íµ¨Î∂Ñ) ‚Äî ÎåÄÏÉÅ Í≤ΩÎ°úÎäî Í≥†Ï†ï: .github/workflows/"
        required: false
        default: ""
      overwrite_mode:
        description: "Í∏∞Ï°¥ ÌååÏùº ÏûàÏùÑ Îïå ÎèôÏûë"
        type: choice
        options: ["backup", "overwrite", "skip"]
        required: true
        default: "backup"
      backup_retention_days:
        description: ".github/workflows/.backup Î≥¥Í¥Ä ÏùºÏàò(Ï¥àÍ≥ºÎ∂Ñ ÏûêÎèô ÏÇ≠Ï†ú)"
        required: true
        default: "7"
      create_pr:
        description: "Î≥µÏÇ¨/Ï†ïÍ∑úÌôî Í≤∞Í≥ºÎ•º PRÎ°ú Ïò¨Î¶¨Í∏∞"
        type: boolean
        required: true
        default: true
      pr_title:
        description: "PR Ï†úÎ™©"
        required: false
        default: "chore: copy workflows + normalize actions (auto)"

      # ---- ÏóÖÍ∑∏Î†àÏù¥Îìú/Ï†ïÍ∑úÌôî ÏòµÏÖò ----
      upgrade_os:
        description: "Îü¨ÎÑà OS Ìå®ÌÇ§ÏßÄ ÏóÖÍ∑∏Î†àÏù¥Îìú(apt-get upgrade Îì±)"
        type: boolean
        required: true
        default: true
      upgrade_apache:
        description: "apache2 Ìå®ÌÇ§ÏßÄ ÏóÖÍ∑∏Î†àÏù¥Îìú(--only-upgrade)"
        type: boolean
        required: true
        default: true
      normalize_actions:
        description: "Î≥µÏÇ¨Ìïú ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌååÏùºÏùò Ï£ºÏöî Ïï°ÏÖò Î≤ÑÏ†Ñ Ï†ïÍ∑úÌôî"
        type: boolean
        required: true
        default: true

permissions:
  contents: write
  pull-requests: write

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_apache
  ECHO_OK: "‚úÖ"
  ECHO_WARN: "‚ö†Ô∏è"
  ECHO_FAIL: "‚ùå"

jobs:
  apache:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚ôªÔ∏è Prepare echo helpers & trap
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          HELPER="${LOG_DIR}/echo_helpers.sh"
          cat > "${HELPER}" <<'SH'
          set -Eeuo pipefail
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*"; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*"; }
          logf(){  printf '%s\n' "$*" | tee -a "${LOG_DIR}/run.log"; }
          run_cmd(){
            logf "‚ñ∂ $*"
            eval $* 2>&1 | tee -a "${LOG_DIR}/run.log"
            local rc=${PIPESTATUS[0]}
            if [ $rc -eq 0 ]; then echoe "DONE($rc): $*"; else warn "RC=$rc ‚Üê $*"; fi
            return $rc
          }
          SH
          source "${HELPER}"
          cleanup(){
            warn "CLEANUP: collecting diagnostics‚Ä¶"
            {
              echo "=== APACHE PROCESSES ==="
              ps -eo pid,ppid,user,cmd | grep -E 'apache2|httpd' | grep -v grep || true
              echo; echo "=== LISTEN PORTS ==="; ss -lntp || true
              echo; echo "=== /etc/apache2/ports.conf ==="; sudo sed -n '1,200p' /etc/apache2/ports.conf 2>/dev/null || true
              echo; echo "=== 000-default.conf ==="; sudo sed -n '1,200p' /etc/apache2/sites-available/000-default.conf 2>/dev/null || true
              echo; echo "=== apache2ctl -S ==="; sudo apache2ctl -S || true
              echo; echo "=== apache2ctl -M ==="; sudo apache2ctl -M || true
              echo; echo "=== ERROR LOG (tail) ==="; sudo tail -n 200 /var/log/apache2/error.log || true
              echo; echo "=== COPY MAP ==="; sed -n '1,200p' "${LOG_DIR}/copy_map.txt" 2>/dev/null || true
            } | tee -a "${LOG_DIR}/diagnostics.txt"
          }
          trap 'rc=$?; [ $rc -eq 0 ] || cleanup; exit $rc' EXIT
          echoe "Echo helpers ready at ${HELPER}"

      - name: üß© System info (echo)
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          logf "Runner: $(uname -a)"
          logf "User: $(id)"
          logf "Date: $(date -Iseconds)"
          logf "Ports(before): $(ss -lntp || true)"

      - name: üß∞ Install Apache + modules
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          run_cmd sudo apt-get update -y
          run_cmd sudo DEBIAN_FRONTEND=noninteractive apt-get install -y apache2
          run_cmd apache2 -v
          for m in rewrite headers mime env dir deflate; do run_cmd sudo a2enmod "$m"; done

      - name: üõ†Ô∏è Optional OS/Apache upgrade
        if: ${{ inputs.upgrade_os || inputs.upgrade_apache }}
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          if [ "${{ inputs.upgrade_os }}" = "true" ]; then
            run_cmd sudo apt-get update -y
            run_cmd sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade
            run_cmd sudo DEBIAN_FRONTEND=noninteractive apt-get -y autoremove --purge
            run_cmd sudo apt-get -y clean
          fi
          if [ "${{ inputs.upgrade_apache }}" = "true" ]; then
            run_cmd sudo apt-get update -y
            run_cmd sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --only-upgrade apache2
          fi

      - name: üèóÔ∏è Configure ports/env/vhost (robust IfModule blocks)
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          SITE="${{ inputs.site_name }}"
          DOCROOT="/var/www/html"
          VHOST="/etc/apache2/sites-available/000-default.conf"
          PORTS="/etc/apache2/ports.conf"

          run_cmd sudo install -d -m0755 /etc/apache2/conf-available
          run_cmd sudo mkdir -p /var/run/apache2 /var/lock/apache2 /var/log/apache2
          run_cmd sudo chown -R www-data:www-data /var/log/apache2 || true

          # envvars Î≥¥Ïû•
          cat <<'ENV' | sudo tee /etc/apache2/envvars >/dev/null
          export APACHE_RUN_USER=www-data
          export APACHE_RUN_GROUP=www-data
          export APACHE_PID_FILE=/var/run/apache2/apache2.pid
          export APACHE_RUN_DIR=/var/run/apache2
          export APACHE_LOCK_DIR=/var/lock/apache2
          export APACHE_LOG_DIR=/var/log/apache2
          ENV

          # ‚úÖ Î©ÄÌã∞ÎùºÏù∏ IfModule Î∏îÎ°ùÏúºÎ°ú Ìè¨Ìä∏ ÏÑ§Ï†ï(Íµ¨Î¨∏ Ïò§Î•ò Î∞©ÏßÄ)
          sudo bash -c "cat > '${PORTS}'" <<'CONF'
          Listen 0.0.0.0:80

          <IfModule ssl_module>
              Listen 0.0.0.0:443
          </IfModule>

          <IfModule mod_gnutls.c>
              Listen 0.0.0.0:443
          </IfModule>
          CONF

          run_cmd sudo sed -n '1,200p' "${PORTS}"

          # servername.conf ‚Üí a2enconf (Ìïú Î≤àÎßå)
          echo "ServerName ${SITE}" | sudo tee /etc/apache2/conf-available/servername.conf >/dev/null
          run_cmd sudo a2enconf servername

          # vhost + docroot
          run_cmd sudo mkdir -p "${DOCROOT}"
          run_cmd sudo chown -R $USER:$USER "${DOCROOT}"

          TMP="$(mktemp)"
          cat > "${TMP}" <<CONF
          <VirtualHost *:80>
            ServerName ${SITE}
            ServerAdmin webmaster@localhost
            DocumentRoot ${DOCROOT}
            <Directory ${DOCROOT}>
              Options Indexes FollowSymLinks
              AllowOverride All
              Require all granted
            </Directory>
            Header always set Cache-Control "no-store"
            Header always set X-Content-Type-Options "nosniff"
            Header always set X-Frame-Options "SAMEORIGIN"
            Header always set X-XSS-Protection "1; mode=block"
            ErrorLog \${APACHE_LOG_DIR}/error.log
            CustomLog \${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>
          CONF
          run_cmd sudo cp "${TMP}" "${VHOST}"

      - name: üßæ Write index.html (remove nginx sample)
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          TITLE="${{ inputs.index_title }}"; MSG='${{ inputs.index_message }}'
          cat > /tmp/index.html <<HTML
          <!doctype html>
          <html lang="ko"><head>
            <meta charset="utf-8">
            <meta http-equiv="Cache-Control" content="no-store" />
            <title>${TITLE}</title>
          </head>
          <body>
            <h1>${TITLE}</h1>
            <p id="msg">${MSG}</p>
            <hr/><pre>Host: $(hostname) | Date: $(date -Iseconds)</pre>
          </body></html>
          HTML
          run_cmd sudo mv /tmp/index.html /var/www/html/index.html
          [ -f /var/www/html/index.nginx-debian.html ] && run_cmd sudo rm -f /var/www/html/index.nginx-debian.html || true
          run_cmd sudo sed -n '1,80p' /var/www/html/index.html

      - name: ‚úÖ apache2 configtest (auto-fix ports.conf on failure)
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          if sudo apache2ctl configtest; then
            echoe "Syntax OK"
          else
            warn "configtest failed ‚Äî rewriting ports.conf to minimal (Listen 80 only)"
            sudo bash -c "cat > /etc/apache2/ports.conf" <<'CONF'
            Listen 0.0.0.0:80
            CONF
            run_cmd sudo sed -n '1,80p' /etc/apache2/ports.conf
            run_cmd sudo apache2ctl configtest
          fi

      - name: üöÄ Start Apache (multi-fallback + bind check)
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          show_state(){ echo "----state----"; ps -eo pid,ppid,user,cmd|grep -E 'apache2|httpd'|grep -v grep||true; ss -lntp||true; sudo tail -n 50 /var/log/apache2/error.log||true; echo "--------------"; }
          ok=0
          warn "Phase0 graceful"; run_cmd sudo apache2ctl -k graceful || true; sleep 1; show_state; ss -lntp|grep -q ':80 ' && ok=1
          if [ $ok -ne 1 ]; then warn "Phase1 service"; run_cmd sudo service apache2 stop||true; run_cmd sudo service apache2 start||true; sleep 1; show_state; ss -lntp|grep -q ':80 ' && ok=1; fi
          if [ $ok -ne 1 ]; then warn "Phase2 apache2ctl"; run_cmd sudo apache2ctl -k stop||true; run_cmd sudo apache2ctl -k start||true; sleep 1; show_state; ss -lntp|grep -q ':80 ' && ok=1; fi
          if [ $ok -ne 1 ]; then warn "Phase3 NO_DETACH"; sudo bash -c 'apache2ctl -DNO_DETACH -k start >/var/log/apache2/fg.log 2>&1 &'||true; sleep 2; show_state; ss -lntp|grep -q ':80 ' && ok=1; fi
          if [ $ok -ne 1 ]; then warn "Phase4 FOREGROUND"; sudo bash -c 'export APACHE_RUN_USER=www-data; export APACHE_RUN_GROUP=www-data; export APACHE_PID_FILE=/var/run/apache2/apache2.pid; export APACHE_RUN_DIR=/var/run/apache2; export APACHE_LOCK_DIR=/var/lock/apache2; export APACHE_LOG_DIR=/var/log/apache2; /usr/sbin/apache2 -DFOREGROUND >/var/log/apache2/fg2.log 2>&1 &'||true; sleep 2; show_state; ss -lntp|grep -q ':80 ' && ok=1; fi
          [ $ok -eq 1 ] || { fail "Apache failed to bind :80"; exit 1; }
          echoe "Apache is listening on :80"

      - name: üîé Verify HTTP 200 + Body (robust)
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          TITLE='${{ inputs.index_title }}'; MSG='${{ inputs.index_message }}'; SITE='${{ inputs.site_name }}'
          urls=("http://127.0.0.1" "http://localhost"); pass=0
          for url in "${urls[@]}"; do
            for try in $(seq 1 15); do
              H="${LOG_DIR}/curl_$(echo "$url"|sed 's#[:/\.]#_#g')_${try}.hdr"
              B="${LOG_DIR}/curl_$(echo "$url"|sed 's#[:/\.]#_#g')_${try}.html"
              if curl --retry 5 --retry-connrefused --retry-delay 1 -fsS -o "$B" -D "$H" "$url"; then
                code=$(awk 'BEGIN{c=0} /^HTTP\//{c=$2} END{print c}' "$H"); [ "$code" = "200" ] || { sleep 1; continue; }
                if grep -qi -- "$TITLE" "$B" || grep -qi -- "$MSG" "$B"; then pass=1; break; fi
              fi; sleep 1
            done
            [ $pass -eq 1 ] && break
            for try in $(seq 1 8); do
              H="${LOG_DIR}/curl_host_${try}.hdr"; B="${LOG_DIR}/curl_host_${try}.html"
              if curl --retry 5 --retry-connrefused --retry-delay 1 -fsS -H "Host: $SITE" -o "$B" -D "$H" "http://127.0.0.1"; then
                code=$(awk 'BEGIN{c=0} /^HTTP\//{c=$2} END{print c}' "$H"); [ "$code" = "200" ] || { sleep 1; continue; }
                if grep -qi -- "$TITLE" "$B" || grep -qi -- "$MSG" "$B"; then pass=1; break; fi
              fi; sleep 1
            done
            [ $pass -eq 1 ] && break
          done
          [ $pass -eq 1 ] || { fail "Response body check failed"; exit 1; }

      # =========================
      # Í≥†Ï†ï Í≤ΩÎ°ú Î≥µÏÇ¨ + Ï†ïÍ∑úÌôî + Î≥¥Í¥ÄÏ£ºÍ∏∞ + PR
      # =========================
      - name: üóÇÔ∏è Copy files into .github/workflows (FIXED PATH)
        if: ${{ inputs.copy_sources != '' }}
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          DEST=".github/workflows"
          RAW="${{ inputs.copy_sources }}"
          MODE="${{ inputs.overwrite_mode }}"
          RETAIN="${{ inputs.backup_retention_days }}"
          run_cmd mkdir -p "${DEST}"

          # Î≥¥Í¥ÄÏ£ºÍ∏∞ Ï†ÅÏö©(Ïò§ÎûòÎêú Î∞±ÏóÖ ÏÇ≠Ï†ú)
          if [ -d "${DEST}/.backup" ]; then
            warn "Pruning backups older than ${RETAIN} days in ${DEST}/.backup"
            # -mindepth 1 Î°ú ÏµúÏÉÅÏúÑ ÎîîÎ†âÌÜ†Î¶¨ Î≥¥Ï°¥, ÏãúÎß®Ìã±: ÎîîÎ†âÌÜ†Î¶¨ Í∏∞Ï§Ä ÏÇ≠Ï†ú
            find "${DEST}/.backup" -mindepth 1 -type d -mtime +"${RETAIN}" -print -exec rm -rf {} +
          fi

          printf '%s\n' "$RAW" | tr ', ' '\n' | sed '/^$/d' > /tmp/copy_list.txt
          echo "Patterns:"; sed -n '1,200p' /tmp/copy_list.txt || true
          shopt -s nullglob globstar
          : > "${LOG_DIR}/copy_map.txt"
          TS="$(date +%Y%m%d%H%M%S)"
          BAK="${DEST}/.backup/${TS}"
          [ "$MODE" = "backup" ] && run_cmd mkdir -p "$BAK"

          while IFS= read -r pattern; do
            hit=0
            for f in $pattern; do
              [ -f "$f" ] || continue
              base="$(basename "$f")"
              if [ -e "${DEST}/${base}" ]; then
                case "$MODE" in
                  backup)  run_cmd install -m0644 -D "${DEST}/${base}" "${BAK}/${base}";;
                  skip)    warn "Skip existing: ${DEST}/${base}"; echo "SKIP $f -> ${DEST}/${base}" >> "${LOG_DIR}/copy_map.txt"; hit=$((hit+1)); continue;;
                  overwrite) : ;;
                esac
              fi
              run_cmd install -m0644 -D "$f" "${DEST}/${base}"
              echo "$f -> ${DEST}/${base}" >> "${LOG_DIR}/copy_map.txt"
              hit=$((hit+1))
            done
            [ $hit -gt 0 ] && echoe "Copied $hit file(s) for: $pattern" || warn "No match: $pattern"
          done < /tmp/copy_list.txt

          echo "==== COPY SUMMARY ===="; sed -n '1,200p' "${LOG_DIR}/copy_map.txt" || true
          [ -d "$BAK" ] && { echo "Backup dir: $BAK"; ls -al "$BAK" || true; }

      - name: üßº Normalize action versions in copied files (extended)
        if: ${{ inputs.copy_sources != '' && inputs.normalize_actions }}
        shell: bash
        run: |
          set -Eeuo pipefail; source "${LOG_DIR}/echo_helpers.sh"
          awk '{print $NF}' "${LOG_DIR}/copy_map.txt" | sort -u > /tmp/targets.txt || true
          [ -s /tmp/targets.txt ] || { warn "No copied files to normalize"; exit 0; }
          while IFS= read -r y; do
            [ -f "$y" ] || continue
            # ÏïàÏ†ï Î¶¥Î¶¨Ïä§Î°ú Ï†ïÍ∑úÌôî(Î≥¥ÏàòÏ†Å)
            run_cmd sed -i \
              -e 's#actions/checkout@v[0-9]\+#actions/checkout@v4#g' \
              -e 's#actions/upload-artifact@v[0-9]\+#actions/upload-artifact@v4#g' \
              -e 's#actions/setup-java@v[0-9]\+#actions/setup-java@v4#g' \
              -e 's#actions/setup-python@v[0-9]\+#actions/setup-python@v5#g' \
              -e 's#actions/cache@v[0-9]\+#actions/cache@v4#g' \
              -e 's#peter-evans/create-pull-request@v[0-9]\+#peter-evans/create-pull-request@v6#g' \
              "$y"
            echoe "Normalized: $y"
          done < /tmp/targets.txt

      - name: üì¶ Upload artifact (logs + copy map)
        uses: actions/upload-artifact@v4
        with:
          name: apache-artifacts
          path: |
            ${{ env.LOG_DIR }}/run.log
            ${{ env.LOG_DIR }}/diagnostics.txt
            ${{ env.LOG_DIR }}/copy_map.txt
          if-no-files-found: warn

      - name: üîÄ Create Pull Request
        if: ${{ inputs.copy_sources != '' && inputs.create_pr }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          add-paths: |
            .github/workflows/**
          commit-message: |
            chore(workflows): copy to .github/workflows (fixed) + normalize actions

            - Overwrite mode: ${{ inputs.overwrite_mode }}
            - Backup retention(days): ${{ inputs.backup_retention_days }}
            - Normalized core actions (v4/v5/v6)
            - See .github/echo_apache/copy_map.txt
          title: ${{ inputs.pr_title }}
          body: |
            ## What
            - Fixed-path copy to `.github/workflows/`
            - Optional normalization of core action versions to stable:
              - actions/checkout@v4
              - actions/upload-artifact@v4
              - actions/setup-java@v4
              - actions/setup-python@v5
              - actions/cache@v4
              - peter-evans/create-pull-request@v6

            ## Backups
            - Old backups under `.github/workflows/.backup/` older than **${{ inputs.backup_retention_days }} days** are pruned.

            _Automated by ALL-ECHO v5._
          branch: "auto/workflows-copy-fp"
          delete-branch: true

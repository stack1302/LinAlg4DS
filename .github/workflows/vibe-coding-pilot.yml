name: "🎧 Vibe Coding Pilot — Skip-on-Fail + Dir/File Create + Always-Success"

on:
  workflow_dispatch:
    inputs:
      framework:
        description: "샘플 프로토타입 프레임워크"
        type: choice
        required: true
        default: "fastapi"
        options: ["fastapi", "springboot", "node-express"]
      run_security:
        description: "SBOM/취약점(Trivy) 실행"
        type: boolean
        default: true
      run_docs:
        description: "문서(ADR/설계/API 스펙) 자동 생성"
        type: boolean
        default: true
      dirs_root:
        description: "대량 디렉토리 루트(예: .github/echo_dirs)"
        required: true
        default: ".github/echo_dirs"
      dirs_count:
        description: "생성할 디렉토리 개수"
        required: true
        default: "25"
      files_root:
        description: "대량 파일 루트(예: .github/echo_files)"
        required: true
        default: ".github/echo_files"
      files_count:
        description: "생성할 파일 개수"
        required: true
        default: "30"
      force_success_message:
        description: "마지막에 ✅ 성공 배너 강제 출력"
        type: boolean
        default: true
  push:
    paths:
      - ".github/workflows/vibe-coding-pilot.yml"

permissions:
  contents: write
  actions: read
  checks: read
  security-events: write

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ARTIFACT_DIR: .github/artifacts
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  setup-generate-create:
    name: "0) 준비 · 프로토타입 · 디렉토리/파일 생성(반드시) — Skip-on-Fail"
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Echo helpers (skip-safe)
        id: echo_helpers
        shell: bash
        continue-on-error: true
        run: |
          set +e
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set +e
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "$LOG_DIR"
          LOG_FILE="${LOG_DIR}/vibe-$(date +%Y%m%d%H%M%S).log"
          FAIL_COUNT_FILE="${LOG_DIR}/.fail.count"; : > "$FAIL_COUNT_FILE"

          echoe(){ printf '%s %s\n' "$ECHO_OK" "$*" | tee -a "$LOG_FILE"; }
          warne(){ printf '%s %s\n' "$ECHO_WARN" "$*" | tee -a "$LOG_FILE"; }
          faile(){ printf '%s %s (rc=%s)\n' "$ECHO_FAIL" "$1" "${2:-1}" | tee -a "$LOG_FILE"; }
          inc_fail(){ n=$(cat "$FAIL_COUNT_FILE" 2>/dev/null || echo 0); n=$((n+1)); echo "$n" > "$FAIL_COUNT_FILE"; }

          # 실패해도 0 반환 → 파이프라인 계속 진행
          run_cmd(){
            local cmd="$*"
            echoe "▶ ${cmd}"
            bash -lc "$cmd"
            local rc=$?
            if [ $rc -ne 0 ]; then faile "CMD FAILED: $cmd" $rc; inc_fail; fi
            return 0
          }

          print_summary(){
            local n=$(cat "$FAIL_COUNT_FILE" 2>/dev/null || echo 0)
            echoe "현재 단계 완료(실패 ${n}건 기록됨). 파이프라인은 계속 진행됩니다."
          }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "helpers_ready=1" >> "$GITHUB_OUTPUT"

      - name: Base tooling (Node/Python/Zip) — skip on fail
        if: steps.echo_helpers.outputs.helpers_ready == '1'
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "sudo apt-get update -y"
          run_cmd "sudo apt-get install -y jq moreutils zip"
          run_cmd "corepack enable || true"
          run_cmd "sudo apt-get install -y python3-venv || true"
          print_summary

      # ── 반드시: 대량 디렉토리 생성 ─────────────────────────────────────────────
      - name: MUST — Create directories (bulk) — always skip-on-fail
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          ROOT="${{ inputs.dirs_root }}"; COUNT="${{ inputs.dirs_count }}"
          run_cmd "mkdir -p \"$ROOT\""
          run_cmd "i=1; while [ \$i -le \"$COUNT\" ]; do d=\$(printf '%s/d%04d' \"$ROOT\" \"\$i\"); mkdir -p \"\$d\" || true; i=\$((i+1)); done"
          run_cmd "mkdir -p .github/echo_dirs .github/echo_files .github/echo_artifacts app tests docs/adr docs/api"
          print_summary

      # ── 반드시: 대량 파일 생성 ────────────────────────────────────────────────
      - name: MUST — Create files (bulk) — always skip-on-fail
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          FROOT="${{ inputs.files_root }}"; FCOUNT="${{ inputs.files_count }}"
          run_cmd "mkdir -p \"$FROOT\""
          run_cmd "i=1; while [ \$i -le \"$FCOUNT\" ]; do f=\$(printf '%s/file%04d.txt' \"$FROOT\" \"\$i\"); echo \"echo-file-\$i $(date -Iseconds)\" > \"\$f\" || true; i=\$((i+1)); done"
          # 샘플 필수 파일(README/설계/API/헬스체크)
          run_cmd "printf '# Vibe Coding Pilot\n\n- Created at: %s\n' \"$(date -Iseconds)\" > README.md"
          run_cmd "printf '# ADR-0001: Adopt Vibe Coding\n- Status: Accepted\n' > docs/adr/0001-adopt-vibe-coding.md"
          run_cmd "printf '# API Notes\n- /health\n- /items/{id}\n' > docs/api/openapi-notes.md"
          print_summary

      # ── 프레임워크 스캐폴드(옵션) ─────────────────────────────────────────────
      - name: Framework scaffold — FastAPI
        if: ${{ inputs.framework == 'fastapi' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "python3 -m venv .venv && . .venv/bin/activate && pip -q install --upgrade pip"
          run_cmd ". .venv/bin/activate && pip -q install fastapi uvicorn[standard] pytest httpx"
          cat > app/main.py <<'PY'
          from fastapi import FastAPI
          app = FastAPI()
          @app.get("/health")
          def health(): return {"status":"ok"}
          @app.get("/items/{item_id}")
          def read_item(item_id:int): return {"id": item_id, "name": f"item-{item_id}"}
          PY
          cat > tests/test_app.py <<'PY'
          from fastapi.testclient import TestClient
          from app.main import app
          c = TestClient(app)
          def test_health(): assert c.get("/health").json()["status"] == "ok"
          def test_item(): assert c.get("/items/7").json()["id"] == 7
          PY
          print_summary

      - name: Framework scaffold — Spring (guarded)
        if: ${{ inputs.framework == 'springboot' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "sudo apt-get install -y maven"
          run_cmd "mkdir -p demo && cd demo && mvn -q -B archetype:generate -DgroupId=com.example -DartifactId=demo -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.5"
          run_cmd "sed -i 's/junit:junit:4.11/junit:junit:4.13.2/' demo/pom.xml || true"
          print_summary

      - name: Framework scaffold — Node/Express
        if: ${{ inputs.framework == 'node-express' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "mkdir -p nodeapp && cd nodeapp && npm init -y"
          cat > nodeapp/index.js <<'JS'
          const express = require('express'); const app = express();
          app.get('/health', (_,res)=>res.json({status:'ok'}));
          app.get('/items/:id', (req,res)=>res.json({id:+req.params.id, name:`item-${req.params.id}`}));
          app.listen(3000, ()=>console.log('up'));
          JS
          cat > nodeapp/package.json <<'JSON'
          {"name":"nodeapp","version":"1.0.0","main":"index.js",
           "scripts":{"start":"node index.js","test":"node -e \"process.exit(0)\""}}
          JSON
          print_summary

      - name: MUST — Verify created items (listing) — skip on fail
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "echo '### Created directories/files (top 100)'; find '${{ inputs.dirs_root }}' '${{ inputs.files_root }}' -maxdepth 2 | head -n 100 | tee -a ${LOG_DIR}/created-list.txt"
          run_cmd "find . -maxdepth 2 -type f -name 'README.md' -o -name '*.md' | head -n 50 | tee -a ${LOG_DIR}/created-list.txt"
          print_summary

      - name: Proto run smoke (FastAPI/Node) — skip on fail
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          if [ "${{ inputs.framework }}" = "fastapi" ]; then
            run_cmd ". .venv/bin/activate && uvicorn app.main:app --host 127.0.0.1 --port 8000 &"
            sleep 2
            run_cmd "curl -fsSL http://127.0.0.1:8000/health | tee ${LOG_DIR}/health.json"
            run_cmd "pkill -f uvicorn || true"
          elif [ "${{ inputs.framework }}" = "node-express" ]; then
            run_cmd "cd nodeapp && npm run -s start &"
            sleep 2
            run_cmd "curl -fsSL http://127.0.0.1:3000/health | tee ${LOG_DIR}/health-node.json"
            run_cmd "pkill -f node || true"
          else
            warne "spring scaffold는 빌드만 시연"
          fi
          print_summary

      - name: Zip prototype artifact
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "zip -qr ${ARTIFACT_DIR}/prototype-${{ inputs.framework }}.zip app nodeapp demo || true"

      - name: Upload prototype artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: prototype-${{ inputs.framework }}
          path: .github/artifacts/prototype-${{ inputs.framework }}.zip
          if-no-files-found: ignore

      - name: ✅ Always-success banner (job tail)
        if: ${{ inputs.force_success_message == 'true' || inputs.force_success_message == true }}
        shell: bash
        run: |
          echo "## ✅ Setup/Generate/Create 단계 완료 (실패는 모두 스킵됨 & 성공 메시지 강제 출력)" >> "$GITHUB_STEP_SUMMARY"

  test-docs-security:
    name: "1) 테스트 · 문서 · 보안(SBOM/Scan) — Skip-on-Fail"
    runs-on: ubuntu-24.04
    needs: setup-generate-create

    steps:
      - uses: actions/checkout@v4

      - name: Echo helpers (reuse)
        shell: bash
        continue-on-error: true
        run: |
          set +e
          if [ ! -f /tmp/echo_helpers.sh ]; then
            mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
            cat > /tmp/echo_helpers.sh <<'SH'
            #!/usr/bin/env bash
            set +e
            ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
            LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "$LOG_DIR"
            LOG_FILE="${LOG_DIR}/vibe-$(date +%Y%m%d%H%M%S).log"
            FAIL_COUNT_FILE="${LOG_DIR}/.fail.count"; : > "$FAIL_COUNT_FILE"
            echoe(){ printf '%s %s\n' "$ECHO_OK" "$*" | tee -a "$LOG_FILE"; }
            warne(){ printf '%s %s\n' "$ECHO_WARN" "$*" | tee -a "$LOG_FILE"; }
            faile(){ printf '%s %s (rc=%s)\n' "$ECHO_FAIL" "$1" "${2:-1}" | tee -a "$LOG_FILE"; }
            inc_fail(){ n=$(cat "$FAIL_COUNT_FILE" 2>/dev/null || echo 0); n=$((n+1)); echo "$n" > "$FAIL_COUNT_FILE"; }
            run_cmd(){ local cmd="$*"; echoe "▶ ${cmd}"; bash -lc "$cmd"; local rc=$?; if [ $rc -ne 0 ]; then faile "CMD FAILED: $cmd" $rc; inc_fail; fi; return 0; }
            print_summary(){ local n=$(cat "$FAIL_COUNT_FILE" 2>/dev/null || echo 0); echoe "현재 단계 완료(실패 ${n}건). 계속 진행."; }
            SH
            chmod +x /tmp/echo_helpers.sh
          fi

      - name: Python tests (FastAPI) — skip on fail
        if: ${{ github.event.inputs.framework == 'fastapi' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "python3 -m venv .venv && . .venv/bin/activate && pip -q install --upgrade pip pytest httpx fastapi uvicorn[standard]"
          run_cmd ". .venv/bin/activate && pytest -q || true"
          print_summary

      - name: Maven test (Spring) — guarded
        if: ${{ github.event.inputs.framework == 'springboot' && hashFiles('demo/pom.xml') != '' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "sudo apt-get install -y maven"
          run_cmd "cd demo && mvn -q -B -e -DskipTests=false test || true"
          print_summary

      - name: Node test (Express) — skip on fail
        if: ${{ github.event.inputs.framework == 'node-express' && hashFiles('nodeapp/package.json') != '' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "cd nodeapp && npm i --silent || true"
          run_cmd "cd nodeapp && npm test || true"
          print_summary

      - name: Docs (ADR/설계/API) — skip on fail
        if: ${{ github.event.inputs.run_docs == 'true' || github.event.inputs.run_docs == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "mkdir -p docs/adr docs/api"
          run_cmd "zip -qr ${ARTIFACT_DIR}/docs.zip docs || true"
          print_summary

      - name: SBOM (Syft) — skip on fail
        if: ${{ github.event.inputs.run_security == 'true' || github.event.inputs.run_security == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "curl -fsSL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin || true"
          run_cmd "syft packages dir:. -o cyclonedx-json > ${ARTIFACT_DIR}/sbom.json || true"
          print_summary

      - name: Vulnerability scan (Trivy) — skip on fail
        if: ${{ github.event.inputs.run_security == 'true' || github.event.inputs.run_security == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "curl -fsSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin || true"
          run_cmd "trivy fs --scanners vuln,secret,misconfig --timeout 10m --no-progress -f json -o ${ARTIFACT_DIR}/trivy.json . || true"
          print_summary

      - name: Upload artifacts (logs/docs/sbom/scan)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vibe-artifacts
          path: |
            .github/echo_logs/**
            .github/artifacts/**
            ${{ inputs.dirs_root }}/**
            ${{ inputs.files_root }}/**
            app/**
            tests/**
            docs/**
            nodeapp/**
            demo/**
          if-no-files-found: warn

      - name: ✅ Always-success banner (job tail)
        if: ${{ github.event.inputs.force_success_message == 'true' || github.event.inputs.force_success_message == true }}
        shell: bash
        run: |
          echo "## ✅ Test/Docs/Security 단계 완료 (파일/디렉토리 생성 포함, 실패는 모두 스킵됨)" >> "$GITHUB_STEP_SUMMARY"

  summary:
    name: "2) 최종 요약 (항상 성공 메세지)"
    runs-on: ubuntu-24.04
    needs: [setup-generate-create, test-docs-security]
    steps:
      - name: ✅ Final SUCCESS banner
        shell: bash
        run: |
          echo "## ✅ 전체 워크플로우 완료 (FAIL SAFE)" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- Framework: ${{ github.event.inputs.framework }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Docs: ${{ github.event.inputs.run_docs }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Security: ${{ github.event.inputs.run_security }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Dirs Root: ${{ github.event.inputs.dirs_root }} (count=${{ github.event.inputs.dirs_count }})" >> "$GITHUB_STEP_SUMMARY"
          echo "- Files Root: ${{ github.event.inputs.files_root }} (count=${{ github.event.inputs.files_count }})" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "아티팩트(prototype-*, vibe-artifacts)에서 생성된 디렉토리/파일과 로그·SBOM·스캔 결과를 확인하세요."

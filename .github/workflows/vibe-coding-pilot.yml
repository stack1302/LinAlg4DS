name: "🎧 Vibe Coding Pilot — Generate → Test → Docs → SBOM (Skip-on-Fail)"

on:
  workflow_dispatch:
    inputs:
      framework:
        description: "샘플 프로토타입 프레임워크"
        type: choice
        required: true
        default: "fastapi"
        options: ["fastapi", "springboot", "node-express"]
      run_security:
        description: "SBOM/취약점(Trivy) 실행"
        type: boolean
        default: true
      run_docs:
        description: "문서(ADR/설계/API 스펙) 자동 생성"
        type: boolean
        default: true
  push:
    paths:
      - ".github/workflows/vibe-coding-pilot.yml"

permissions:
  contents: write
  actions: read
  checks: read
  security-events: write

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ARTIFACT_DIR: .github/artifacts
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  setup-and-generate:
    name: "0) 스택 준비 & 프로토타입 생성"
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Echo helpers
        id: echo_helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set -Eeo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "$LOG_DIR"
          LOG_FILE="${LOG_DIR}/vibe-$(date +%Y%m%d%H%M%S).log"
          echoe(){ printf '%s %s\n' "$ECHO_OK" "$*" | tee -a "$LOG_FILE"; }
          warne(){ printf '%s %s\n' "$ECHO_WARN" "$*" | tee -a "$LOG_FILE"; }
          faile(){ printf '%s %s (rc=%s)\n' "$ECHO_FAIL" "$1" "${2:-1}" | tee -a "$LOG_FILE"; }
          # 실패해도 워크플로우는 계속: 내부적으로 rc를 저장하되 0으로 마스킹
          run_cmd(){ local cmd="$*"; echoe "▶ ${cmd}"; bash -lc "$cmd"; local rc=$?; if [ $rc -ne 0 ]; then faile "CMD FAILED: $cmd" $rc; return 0; fi; }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "helpers_ready=1" >> "$GITHUB_OUTPUT"

      - name: Base tooling (Node/Python/Java) — skip on fail
        if: steps.echo_helpers.outputs.helpers_ready == '1'
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "sudo apt-get update -y"
          run_cmd "sudo apt-get install -y jq moreutils"
          run_cmd "echo '::group::Setup Node'; corepack enable || true; echo '::endgroup::'"
          run_cmd "echo '::group::Setup Python'; sudo apt-get install -y python3-venv || true; echo '::endgroup::'"
          run_cmd "echo '::group::Setup Java (Temurin 21)'; echo 'Java는 이후 Spring 단계에서만 사용'; echo '::endgroup::'"

      - name: Framework scaffold — FastAPI
        if: ${{ inputs.framework == 'fastapi' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "python3 -m venv .venv && . .venv/bin/activate && pip -q install --upgrade pip"
          run_cmd ". .venv/bin/activate && pip -q install fastapi uvicorn[standard] pytest httpx pydantic"
          run_cmd "mkdir -p app tests"
          cat > app/main.py <<'PY'
          from fastapi import FastAPI
          app = FastAPI()
          @app.get("/health")
          def health(): return {"status":"ok"}
          @app.get("/items/{item_id}")
          def read_item(item_id:int): return {"id": item_id, "name": f"item-{item_id}"}
          PY
          cat > tests/test_app.py <<'PY'
          from fastapi.testclient import TestClient
          from app.main import app
          c = TestClient(app)
          def test_health(): assert c.get("/health").json()["status"] == "ok"
          def test_item(): assert c.get("/items/7").json()["id"] == 7
          PY
          run_cmd "echoe 'FastAPI scaffold OK'"

      - name: Framework scaffold — Spring Boot (guarded)
        if: ${{ inputs.framework == 'springboot' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "sudo apt-get install -y maven"
          run_cmd "mkdir -p demo && cd demo && mvn -q -B archetype:generate -DgroupId=com.example -DartifactId=demo -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.5"
          run_cmd "sed -i 's/junit:junit:4.11/junit:junit:4.13.2/' demo/pom.xml"
          run_cmd "echoe 'Spring skeleton generated (not full Boot, test-only demo to avoid network hiccups)'"

      - name: Framework scaffold — Node/Express
        if: ${{ inputs.framework == 'node-express' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "mkdir -p nodeapp && cd nodeapp && npm init -y"
          cat > nodeapp/index.js <<'JS'
          const express = require('express'); const app = express();
          app.get('/health', (_,res)=>res.json({status:'ok'}));
          app.get('/items/:id', (req,res)=>res.json({id:+req.params.id, name:`item-${req.params.id}`}));
          app.listen(3000, ()=>console.log('up'));
          JS
          cat > nodeapp/package.json <<'JSON'
          {
            "name":"nodeapp","version":"1.0.0","main":"index.js",
            "scripts":{"start":"node index.js","test":"node -e \"process.exit(0)\""}
          }
          JSON
          run_cmd "echoe 'Node/Express scaffold OK'"

      - name: Proto run smoke (FastAPI/Node) — skip on fail
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          if [ "${{ inputs.framework }}" = "fastapi" ]; then
            run_cmd ". .venv/bin/activate && uvicorn app.main:app --host 127.0.0.1 --port 8000 & sleep 2 && curl -fsSL http://127.0.0.1:8000/health | tee ${LOG_DIR}/health.json"
            run_cmd "pkill -f uvicorn || true"
          elif [ "${{ inputs.framework }}" = "node-express" ]; then
            run_cmd "cd nodeapp && npm run -s start & sleep 2 && curl -fsSL http://127.0.0.1:3000/health | tee ${LOG_DIR}/health-node.json"
            run_cmd "pkill -f node || true"
          else
            warne "spring scaffold는 빌드만 시연"
          fi

      - name: Zip prototype artifact
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "zip -qr ${ARTIFACT_DIR}/prototype-${{ inputs.framework }}.zip app nodeapp demo || true"

      - name: Upload prototype artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: prototype-${{ inputs.framework }}
          path: .github/artifacts/prototype-${{ inputs.framework }}.zip
          if-no-files-found: ignore

  test-docs-security:
    name: "1) 테스트 · 문서 · 보안(SBOM/Scan)"
    runs-on: ubuntu-24.04
    needs: setup-and-generate

    steps:
      - uses: actions/checkout@v4

      - name: Echo helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          cat /tmp/echo_helpers.sh >/dev/null 2>&1 || {
            mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}";
            cat > /tmp/echo_helpers.sh <<'SH'
            #!/usr/bin/env bash
            set -Eeo pipefail
            ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
            LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "$LOG_DIR"
            LOG_FILE="${LOG_DIR}/vibe-$(date +%Y%m%d%H%M%S).log"
            echoe(){ printf '%s %s\n' "$ECHO_OK" "$*" | tee -a "$LOG_FILE"; }
            warne(){ printf '%s %s\n' "$ECHO_WARN" "$*" | tee -a "$LOG_FILE"; }
            faile(){ printf '%s %s (rc=%s)\n' "$ECHO_FAIL" "$1" "${2:-1}" | tee -a "$LOG_FILE"; }
            run_cmd(){ local cmd="$*"; echoe "▶ ${cmd}"; bash -lc "$cmd"; local rc=$?; if [ $rc -ne 0 ]; then faile "CMD FAILED: $cmd" $rc; return 0; fi; }
            SH
            chmod +x /tmp/echo_helpers.sh;
          }

      - name: Python tests (FastAPI) — skip on fail
        if: ${{ github.event.inputs.framework == 'fastapi' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "python3 -m venv .venv && . .venv/bin/activate && pip -q install --upgrade pip pytest httpx fastapi uvicorn[standard]"
          run_cmd ". .venv/bin/activate && pytest -q || true"

      - name: Maven test (Spring) — guarded
        if: ${{ github.event.inputs.framework == 'springboot' && hashFiles('demo/pom.xml') != '' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "sudo apt-get install -y maven"
          run_cmd "cd demo && mvn -q -B -e -DskipTests=false test || true"

      - name: Node test (Express) — skip on fail
        if: ${{ github.event.inputs.framework == 'node-express' && hashFiles('nodeapp/package.json') != '' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "cd nodeapp && npm i --silent || true"
          run_cmd "cd nodeapp && npm test || true"

      - name: Docs (ADR/설계/API) — skip on fail
        if: ${{ github.event.inputs.run_docs == 'true' || github.event.inputs.run_docs == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "mkdir -p docs/adr docs/api"
          cat > docs/adr/0001-adopt-vibe-coding.md <<'MD'
          # ADR-0001: Adopt Vibe Coding
          - Status: Accepted
          - Context: 자연어→설계→코드 자동화를 통한 리드타임 단축
          - Decision: IDE LLM + 프로토타입 빌더 + 문서 Q&A + 에이전트 파이프라인
          - Consequences: 코드리뷰 가드레일/SBOM/라이선스 스캔 상시화
          MD
          cat > docs/api/openapi-notes.md <<'MD'
          # API Notes
          - /health : 상태 체크
          - /items/{id} : 단순 조회
          MD
          run_cmd "zip -qr ${ARTIFACT_DIR}/docs.zip docs || true"

      - name: SBOM (Syft) — skip on fail
        if: ${{ github.event.inputs.run_security == 'true' || github.event.inputs.run_security == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "curl -fsSL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin || true"
          run_cmd "syft packages dir:. -o cyclonedx-json > ${ARTIFACT_DIR}/sbom.json || true"

      - name: Vulnerability scan (Trivy) — skip on fail
        if: ${{ github.event.inputs.run_security == 'true' || github.event.inputs.run_security == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "curl -fsSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin || true"
          run_cmd "trivy fs --scanners vuln,secret,misconfig --timeout 10m --no-progress -f json -o ${ARTIFACT_DIR}/trivy.json . || true"

      - name: Upload artifacts (logs/docs/sbom/scan)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vibe-artifacts
          path: |
            .github/echo_logs/**
            .github/artifacts/**
          if-no-files-found: warn

  summary:
    name: "2) 요약"
    runs-on: ubuntu-24.04
    needs: [setup-and-generate, test-docs-security]
    steps:
      - uses: actions/checkout@v4
      - name: Build summary — always success
        shell: bash
        continue-on-error: true
        run: |
          set -Eeuo pipefail
          mkdir -p .github/echo_logs
          {
            echo "## ✅ Vibe Coding Pilot 결과 요약"
            echo "- Framework: ${{ github.event.inputs.framework }}"
            echo "- Docs:     ${{ github.event.inputs.run_docs }}"
            echo "- Security: ${{ github.event.inputs.run_security }}"
            echo ""
            echo "아티팩트(vibe-artifacts)로 로그·문서·SBOM/Trivy 결과를 확인하세요."
          } | tee .github/echo_logs/summary.md
      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: vibe-summary
          path: .github/echo_logs/summary.md
          if-no-files-found: ignore

name: "🎧 Vibe Coding Pilot — MUST Create + Perm/Server + Bulk Modify + Safe-Continue + Always-Success"

on:
  workflow_dispatch:
    inputs:
      framework:
        type: choice
        default: "fastapi"
        options: ["fastapi", "springboot", "node-express"]
      run_security:
        type: boolean
        default: true
      run_docs:
        type: boolean
        default: true
      dirs_root:
        default: ".github/echo_dirs"
      dirs_count:
        default: "50"
      files_root:
        default: ".github/echo_files"
      files_count:
        default: "80"
      install_servers:
        description: "Nginx/Apache/Redis/PostgreSQL 설치·기동 시도(실패해도 통과)"
        type: boolean
        default: true
      # ----- 대량 수정 옵션 -----
      bulk_globs:
        description: "대량 수정 대상 글롭(공백 구분)"
        default: ".github/echo_files/*.txt docs/**/*.md README.md"
      replace_from:
        description: "치환: FROM (비워두면 미실행)"
        default: "echo-file"
      replace_to:
        description: "치환: TO (비워두면 미실행)"
        default: "vibe-file"
      append_line:
        description: "각 파일 끝에 추가할 라인"
        default: "# appended-by-workflow"
      rename_prefix:
        description: "파일명 접두사(빈 문자열이면 미적용)"
        default: "bulk_"
      rename_suffix:
        description: "파일명 접미사(확장자 앞)"
        default: ""
      duplicate_copies:
        description: "각 파일 복제본 개수(0이면 미복제)"
        default: "2"
      chmod_mode:
        description: "일괄 chmod 모드(예: 644, 디렉토리엔 755 적용)"
        default: "644"
      auto_commit:
        type: boolean
        default: false
      force_success_message:
        type: boolean
        default: true

permissions:
  contents: write
  security-events: write

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ARTIFACT_DIR: .github/artifacts
  GATHER_DIR: .github/artifacts/gather
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  all-in-one:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      # ---------- 공통 헬퍼 ----------
      - name: Init echo helpers (fail-safe)
        id: helpers
        shell: bash
        continue-on-error: true
        run: |
          set +e
          mkdir -p "${LOG_DIR}" "${ARTIFACT_DIR}" "${GATHER_DIR}"
          cat > /tmp/safe_run.sh <<'SH'
          #!/usr/bin/env bash
          set +e
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "$LOG_DIR"
          LOG_FILE="${LOG_DIR}/vibe-$(date +%Y%m%d%H%M%S).log"
          FAIL_COUNT_FILE="${LOG_DIR}/.fail.count"; : > "$FAIL_COUNT_FILE"
          echoe(){ printf '%s %s\n' "$ECHO_OK" "$*" | tee -a "$LOG_FILE"; }
          warne(){ printf '%s %s\n' "$ECHO_WARN" "$*" | tee -a "$LOG_FILE"; }
          faile(){ printf '%s %s (rc=%s)\n' "$ECHO_FAIL" "$1" "${2:-1}" | tee -a "$LOG_FILE"; }
          inc_fail(){ n=$(cat "$FAIL_COUNT_FILE" 2>/dev/null || echo 0); n=$((n+1)); echo "$n" > "$FAIL_COUNT_FILE"; }
          safe_run(){
            local cmd="$*"
            echoe "▶ ${cmd}"
            bash -lc "$cmd"
            local rc=$?
            if [ $rc -ne 0 ]; then faile "FAILED: $cmd" $rc; inc_fail; fi
            return 0
          }
          summarize(){
            local n=$(cat "$FAIL_COUNT_FILE" 2>/dev/null || echo 0)
            echoe "단계 완료 (실패 ${n}건 기록, 파이프라인 계속 진행)."
          }
          SH
          chmod +x /tmp/safe_run.sh
          echo "ok=1" >> "$GITHUB_OUTPUT"

      # ---------- 기본 도구 + 권한 정리 ----------
      - name: Base toolchain & permission normalize
        if: steps.helpers.outputs.ok == '1'
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          safe_run "sudo apt-get update -y"
          safe_run "sudo apt-get install -y jq moreutils zip coreutils curl rsync python3-venv"
          safe_run "corepack enable || true"
          WS="${GITHUB_WORKSPACE}"
          safe_run "sudo chown -R $USER:$USER \"$WS\" || true"
          safe_run "chmod -R u+rwX,go+rX \"$WS\" || true"
          summarize

      # ---------- MUST: 디렉토리/파일 생성 ----------
      - name: MUST — Bulk directory create
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          ROOT="${{ inputs.dirs_root }}"; COUNT="${{ inputs.dirs_count }}"
          safe_run "mkdir -p \"$ROOT\" .github/echo_files .github/echo_artifacts app tests docs/adr docs/api"
          safe_run "i=1; while [ \$i -le \"$COUNT\" ]; do d=\$(printf '%s/d%04d' \"$ROOT\" \"\$i\"); mkdir -p \"\$d\" || true; i=\$((i+1)); done"
          summarize

      - name: MUST — Bulk file create
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          FROOT="${{ inputs.files_root }}"; FCOUNT="${{ inputs.files_count }}"
          safe_run "mkdir -p \"$FROOT\""
          safe_run "i=1; while [ \$i -le \"$FCOUNT\" ]; do f=\$(printf '%s/file%04d.txt' \"$FROOT\" \"\$i\"); echo \"echo-file-\$i $(date -Iseconds)\" > \"\$f\" || true; i=\$((i+1)); done"
          safe_run "printf '# Vibe Coding Pilot\n- Created: %s\n' \"$(date -Iseconds)\" > README.md"
          safe_run "printf '# ADR-0001: Adopt Vibe Coding\n- Status: Accepted\n' > docs/adr/0001-adopt-vibe-coding.md"
          safe_run "printf '# API Notes\n- /health\n- /items/{id}\n' > docs/api/openapi-notes.md"
          summarize

      # ---------- 프레임워크 스캐폴드 ----------
      - name: Scaffold — FastAPI
        if: ${{ inputs.framework == 'fastapi' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          safe_run "python3 -m venv .venv && . .venv/bin/activate && pip -q install --upgrade pip fastapi uvicorn[standard] pytest httpx"
          cat > app/main.py <<'PY'
          from fastapi import FastAPI
          app = FastAPI()
          @app.get("/health")
          def health(): return {"status":"ok"}
          @app.get("/items/{item_id}")
          def read_item(item_id:int): return {"id": item_id, "name": f"item-{item_id}"}
          PY
          cat > tests/test_app.py <<'PY'
          from fastapi.testclient import TestClient
          from app.main import app
          c = TestClient(app)
          def test_health(): assert c.get("/health").json()["status"] == "ok"
          def test_item(): assert c.get("/items/7").json()["id"] == 7
          PY
          summarize

      - name: Scaffold — Spring demo
        if: ${{ inputs.framework == 'springboot' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          safe_run "sudo apt-get install -y maven"
          safe_run "mkdir -p demo && cd demo && mvn -q -B archetype:generate -DgroupId=com.example -DartifactId=demo -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.5"
          safe_run "sed -i 's/junit:junit:4.11/junit:junit:4.13.2/' demo/pom.xml || true"
          summarize

      - name: Scaffold — Node/Express
        if: ${{ inputs.framework == 'node-express' }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          safe_run "mkdir -p nodeapp && cd nodeapp && npm init -y"
          cat > nodeapp/index.js <<'JS'
          const express = require('express'); const app = express();
          app.get('/health', (_,res)=>res.json({status:'ok'}));
          app.get('/items/:id', (req,res)=>res.json({id:+req.params.id, name:`item-${req.params.id}`}));
          app.listen(3000, ()=>console.log('up'));
          JS
          cat > nodeapp/package.json <<'JSON'
          {"name":"nodeapp","version":"1.0.0","main":"index.js",
           "scripts":{"start":"node index.js","test":"node -e \"process.exit(0)\""}}
          JSON
          summarize

      - name: Smoke run — FastAPI/Node
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          if [ "${{ inputs.framework }}" = "fastapi" ]; then
            safe_run ". .venv/bin/activate && uvicorn app.main:app --host 127.0.0.1 --port 8000 &"
            sleep 2
            safe_run "curl -fsSL http://127.0.0.1:8000/health | tee ${LOG_DIR}/health.json"
            # 종료 실패해도 메시지 후 통과
            safe_run "pkill -f uvicorn || true"
          elif [ "${{ inputs.framework }}" = "node-express" ]; then
            safe_run "cd nodeapp && npm run -s start &"
            sleep 2
            safe_run "curl -fsSL http://127.0.0.1:3000/health | tee ${LOG_DIR}/health-node.json"
            safe_run "pkill -f node || true"
          else
            warne "spring demo는 빌드만 시연"
          fi
          summarize

      # ---------- 서버 설치·기동 ----------
      - name: Server stack install & start (nginx/apache/redis/postgres)
        if: ${{ inputs.install_servers == 'true' || inputs.install_servers == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          safe_run "sudo apt-get update -y"
          safe_run "sudo apt-get install -y nginx apache2 redis-server postgresql postgresql-contrib"
          safe_run "echo 'OK NGINX $(date -Iseconds)' | sudo tee /var/www/html/index.html >/dev/null"
          safe_run "echo '<h1>OK APACHE $(date -Iseconds)</h1>' | sudo tee /var/www/html/index-apache.html >/dev/null"
          safe_run "sudo systemctl daemon-reload || true"
          safe_run "sudo systemctl enable --now nginx || sudo service nginx start || true"
          safe_run "sudo systemctl enable --now apache2 || sudo service apache2 start || true"
          safe_run "sudo systemctl enable --now redis-server || sudo service redis-server start || true"
          safe_run "sudo systemctl enable --now postgresql || sudo service postgresql start || true"
          safe_run "curl -fsS http://127.0.0.1/ | head -n 1 | tee ${LOG_DIR}/nginx_check.txt"
          safe_run "redis-cli ping | tee ${LOG_DIR}/redis_check.txt || true"
          safe_run "psql --version | tee ${LOG_DIR}/psql_ver.txt || true"
          summarize

      # ---------- ✅ 신규: 대량 수정(치환/추가/이름변경/복제/권한) ----------
      - name: BULK MODIFY — replace/append/rename/duplicate/chmod (no-skip)
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh

          GLOBS="${{ inputs.bulk_globs }}"
          FROM="${{ inputs.replace_from }}"
          TO="${{ inputs.replace_to }}"
          APPEND_LINE="${{ inputs.append_line }}"
          RPRE="${{ inputs.rename_prefix }}"
          RSUF="${{ inputs.rename_suffix }}"
          COPIES="${{ inputs.duplicate_copies }}"
          FMODE="${{ inputs.chmod_mode }}"

          # 1) 글롭 확장 → 파일 리스트(공백, 개행 안전)
          mapfile -t TARGETS < <(bash -lc "shopt -s nullglob globstar; for g in ${GLOBS}; do echo \$g; done")
          if [ ${#TARGETS[@]} -eq 0 ]; then
            warne "대상 글롭(${GLOBS})에 해당하는 파일이 없습니다."
          else
            # 2) 각 파일에 대해: 치환(sed), 끝에 라인 추가, 이름변경, 복제
            for g in "${TARGETS[@]}"; do
              for f in $g; do
                [ -f "$f" ] || continue
                # 치환
                if [ -n "$FROM" ]; then
                  safe_run "sed -i 's/${FROM//\//\\/}/${TO//\//\\/}/g' \"$f\""
                fi
                # 끝에 라인 추가
                if [ -n "$APPEND_LINE" ]; then
                  safe_run "printf '%s\n' \"$APPEND_LINE\" >> \"$f\""
                fi
                # 이름변경(동일 경로 내)
                dir=$(dirname "$f"); base=$(basename "$f")
                name="${base%.*}"; ext="${base##*.}"; dot="."
                [ "$base" = "$ext" ] && dot="" # 확장자 없는 경우
                new="${dir}/${RPRE}${name}${RSUF}${dot}${ext}"
                if [ -n "$RPRE" ] || [ -n "$RSUF" ]; then
                  safe_run "mv \"$f\" \"$new\""
                  f="$new"
                fi
                # 복제 N개
                if [ "$COPIES" -gt 0 ]; then
                  idx=1
                  while [ $idx -le "$COPIES" ]; do
                    clone="${f%.*}_copy${idx}${dot}${ext}"
                    safe_run "cp -f \"$f\" \"$clone\""
                    idx=$((idx+1))
                  done
                fi
              done
            done
          fi

          # 3) 권한 일괄 조정(파일 644, 디렉토리 755)
          safe_run "find . -type f -not -path './.git/*' -exec chmod ${FMODE} {} + || true"
          safe_run "find . -type d -not -path './.git/*' -exec chmod 755 {} + || true"

          # 4) 변경 요약 산출
          safe_run "git status --porcelain | tee ${LOG_DIR}/bulk_modify_changes.txt || true"
          summarize

      # ---------- 문서/보안 ----------
      - name: Docs pack (ADR/API)
        if: ${{ inputs.run_docs == 'true' || inputs.run_docs == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          safe_run "mkdir -p docs/adr docs/api"
          safe_run "zip -qr ${ARTIFACT_DIR}/docs.zip docs || true"
          summarize

      - name: SBOM (Syft)
        if: ${{ inputs.run_security == 'true' || inputs.run_security == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          safe_run "curl -fsSL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin || true"
          # 최신 구문 권고사항 반영: packages -> scan (실패해도 통과)
          safe_run "syft scan dir:. -o cyclonedx-json > ${ARTIFACT_DIR}/sbom.json || syft packages dir:. -o cyclonedx-json > ${ARTIFACT_DIR}/sbom.json || true"
          summarize

      - name: Vulnerability scan (Trivy)
        if: ${{ inputs.run_security == 'true' || inputs.run_security == true }}
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          safe_run "curl -fsSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin || true"
          safe_run "trivy fs --scanners vuln,secret,misconfig --timeout 10m --no-progress -f json -o ${ARTIFACT_DIR}/trivy.json . || true"
          summarize

      # ---------- 안전 수집 & 업로드 ----------
      - name: SAFE gather workspace artifacts
        shell: bash
        continue-on-error: true
        run: |
          source /tmp/safe_run.sh
          WS="${GITHUB_WORKSPACE}"
          mkdir -p "${GATHER_DIR}"
          for p in ".github/echo_logs" ".github/artifacts" "${{ inputs.dirs_root }}" "${{ inputs.files_root }}" "app" "tests" "docs" "nodeapp" "demo" "README.md"; do
            [ -e "$p" ] || continue
            R="$(realpath -s "$p" 2>/dev/null || echo '')"
            case "$R" in "$WS"/*) ;; *) warne "워크스페이스 밖 경로 스킵: $p -> $R"; continue;; esac
            safe_run "rsync -a --relative \"$p\" \"${GATHER_DIR}/\" || true"
          done
          safe_run "find '${{ inputs.files_root }}' -maxdepth 1 -type f -print0 2>/dev/null | xargs -0 -I{} sha256sum '{}' | tee ${GATHER_DIR}/files.sha256 || true"
          safe_run "find '${{ inputs.dirs_root }}' -maxdepth 2 2>/dev/null | head -n 200 | tee ${GATHER_DIR}/created-list.txt || true"
          safe_run "zip -qr ${GATHER_DIR}/prototype-${{ inputs.framework }}.zip app nodeapp demo 2>/dev/null || true"
          summarize

      - name: Upload gathered artifacts (workspace-only)
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: vibe-artifacts
          path: .github/artifacts/gather/**
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: true

      - name: Auto-commit generated files (optional)
        if: ${{ inputs.auto_commit == 'true' || inputs.auto_commit == true }}
        shell: bash
        continue-on-error: true
        run: |
          set +e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore(vibe): bulk modify & artifacts [skip ci]" || true
          git push || true

      - name: ✅ Always-success banner
        if: ${{ inputs.force_success_message == 'true' || inputs.force_success_message == true }}
        shell: bash
        run: |
          echo "## ✅ 전체 파이프라인 완료 (대량 수정 포함·실패는 메시지 출력 후 정상 처리·스킵 없이 진행)" >> "$GITHUB_STEP_SUMMARY"
          echo "- 수정 대상: '${{ inputs.bulk_globs }}'" >> "$GITHUB_STEP_SUMMARY"
          echo "- 치환: '${{ inputs.replace_from }}' → '${{ inputs.replace_to }}', 추가 라인: '${{ inputs.append_line }}'" >> "$GITHUB_STEP_SUMMARY"
          echo "- 리네임 prefix/suffix: '${{ inputs.rename_prefix }}' / '${{ inputs.rename_suffix }}', 복제본: ${{
            inputs.duplicate_copies }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- chmod: 파일 ${{ inputs.chmod_mode }}, 디렉토리 755" >> "$GITHUB_STEP_SUMMARY"
          echo "- 아티팩트: vibe-artifacts (logs / lists / sbom / trivy / prototype / bulk_modify_changes.txt)" >> "$GITHUB_STEP_SUMMARY"

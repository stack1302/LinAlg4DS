name: Python Package using Conda + EchoOps (no-healthchecks)

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      echo_verbose:
        description: "에코 로깅 상세 출력"
        type: boolean
        required: false
        default: true
      echo_message:
        description: "에코로 남길 메시지"
        type: string
        required: false
        default: ""
      echo_filename:
        description: "에코 파일명 (ECHO_DIR 아래)"
        type: string
        required: false
        default: "message.txt"

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      LOG_DIR: .github/echo_logs
      ECHO_DIR: .github/echo_files
      SITE_DIR: site
      CONDA_ENV: test-env
      PY_VERSION: "3.10"
      ECHO_VERBOSE: ${{ github.event_name == 'workflow_dispatch' && inputs.echo_verbose || 'true' }}
      MAMBA_NO_BANNER: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONWARNINGS: "ignore"
      PYTHONNOUSERSITE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init Echo dirs & helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          install -d -m 0755 "${LOG_DIR}" "${ECHO_DIR}" "${SITE_DIR}"
          cat > /tmp/echo.sh <<'SH'
          set -o pipefail
          echo_run(){ echo "▶ $*"; set +e; eval "$@"; rc=$?; set -e; echo "RC=$rc"; return $rc; }
          tee_ok(){ f="$1"; shift; { echo "$@"; } | tee -a "$f"; chmod 0644 "$f"; }
          SH
          chmod 0755 /tmp/echo.sh
          TS="$(date +%Y%m%d-%H%M%S)"
          echo "Hello Echo ${TS}" > "${ECHO_DIR}/hello.txt"; chmod 0644 "${ECHO_DIR}/hello.txt"
          printf '<html><body><h1>Echo %s</h1></body></html>\n' "$TS" > "${SITE_DIR}/index.html"; chmod 0644 "${SITE_DIR}/index.html"

      - name: Echo message (manual runs)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        env:
          IN_MSG: ${{ inputs.echo_message }}
          OUT_FILE: ${{ inputs.echo_filename }}
        run: |
          set -Eeuo pipefail
          . /tmp/echo.sh
          F="${ECHO_DIR}/${OUT_FILE:-message.txt}"
          TS="$(date +%Y-%m-%dT%H:%M:%S%z)"
          tee_ok "$F" "[$TS] ${IN_MSG:-'(no message)'}"

      - name: Write condarc (forge-only)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat > .github-condarc <<'CONDARC'
          channels:
            - conda-forge
          channel_priority: strict
          show_channel_urls: true
          solver: libmamba
          notify_outdated_conda: false
          changeps1: false
          pkgs_dirs:
            - /home/runner/conda_pkgs_dir
          use_only_tar_bz2: true
          default_channels:
            - https://conda.anaconda.org/conda-forge
          custom_channels: {}
          custom_multichannels: {}
          channel_alias: https://conda.anaconda.org
          CONDARC

      - name: Upgrade OS packages (echo)
        shell: bash
        run: |
          set -Eeuo pipefail
          . /tmp/echo.sh
          F="${ECHO_DIR}/os-upgrade.txt"
          echo_run "sudo apt-get update -y" | tee -a "$F"
          echo_run "sudo apt-get -y -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-confdef upgrade" | tee -a "$F"
          chmod 0644 "$F"

      - name: Setup Miniconda (forge-only)
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.PY_VERSION }}
          miniforge-version: latest
          channels: conda-forge
          conda-remove-defaults: true
          channel-priority: strict
          activate-environment: ${{ env.CONDA_ENV }}
          use-mamba: true
          mamba-version: "2.*"
          conda-solver: libmamba
          show-channel-urls: true
          use-only-tar-bz2: true
          condarc-file: .github-condarc

      - name: Enforce forge-only (system) (echo)
        shell: bash -l {0}
        run: |
          set -Eeuo pipefail
          F="${ECHO_DIR}/conda-enforce.txt"
          {
            conda config --system --remove channels defaults || true
            conda config --system --set channel_priority strict
            conda config --system --set show_channel_urls true
            conda config --system --set solver libmamba
            conda config --system --set use_only_tar_bz2 true
            conda config --system --remove-key default_channels || true
            conda config --system --add default_channels https://conda.anaconda.org/conda-forge
            conda config --system --remove-key custom_channels || true
            conda config --system --remove-key custom_multichannels || true
            conda info
          } 2>&1 | tee -a "$F"
          chmod 0644 "$F"

      - name: Auto-fix py files (strip ??, ensure imports) (echo)
        id: autofix
        shell: bash -l {0}
        run: |
          set -Eeuo pipefail
          F="${ECHO_DIR}/autofix-status.txt"
          mapfile -d '' PYFILES < <(git ls-files -z '*.py')

          # 1) strip notebook '??' lines
          for f in "${PYFILES[@]}"; do
            [ -f "$f" ] || continue
            awk '!/^[[:space:]]*\?\?/' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
          done

          # 2) add missing imports (safe prepend)
          for f in "${PYFILES[@]}"; do
            [ -f "$f" ] || continue
            grep -q 'spla\.' "$f" && ! grep -Eq '^import[[:space:]]+scipy\.linalg[[:space:]]+as[[:space:]]+spla' "$f" && awk 'NR==1{print "import scipy.linalg as spla"}1' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
            grep -q 'pearsonr' "$f" && ! grep -Eq '^from[[:space:]]+scipy\.stats[[:space:]]+import[[:space:]]+pearsonr' "$f" && awk 'NR==1{print "from scipy.stats import pearsonr"}1' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
            grep -qE '(^|[^A-Za-z0-9_])np\.' "$f" && ! grep -Eq '^import[[:space:]]+numpy[[:space:]]+as[[:space:]]+np' "$f" && awk 'NR==1{print "import numpy as np"}1' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
          done

          git status --porcelain | tee "$F"
          chmod 0644 "$F"

          CHANGED="$(git status --porcelain)"
          if [ -n "$CHANGED" ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            NONPY=$(echo "$CHANGED" | awk '{print $2}' | grep -vE '\.py$' || true)
            [ -z "$NONPY" ] && echo "nonpy_ok=true" >> "$GITHUB_OUTPUT" || echo "nonpy_ok=false" >> "$GITHUB_OUTPUT"
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "nonpy_ok=true"   >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request (if changes)
        if: steps.autofix.outputs.has_changes == 'true' && steps.autofix.outputs.nonpy_ok == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: fix/autofix-notebook-and-imports
          commit-message: "chore: auto-fix notebook artifacts (??) and missing imports"
          title: "Auto-fix: notebook artifacts & missing imports"
          body: |
            - 노트북 유입 `??` 제거
            - 누락 import 자동 삽입 (numpy/scipy)
            - 에코 로그 포함
          add-paths: |
            **/*.py
            .github/echo_logs/**

      - name: Create/Update Conda env (echo)
        shell: bash -l {0}
        run: |
          set -Eeuo pipefail
          F="${ECHO_DIR}/conda-env.txt"
          if [ -f environment.yml ]; then
            mamba env update -n "${CONDA_ENV}" -f environment.yml | tee -a "$F"
          else
            mamba create -n "${CONDA_ENV}" "python=${PY_VERSION}" -y | tee -a "$F"
          fi
          conda activate "${CONDA_ENV}"
          python -V | tee -a "$F"
          conda list | tee -a "$F"
          chmod 0644 "$F"

      - name: Lint (flake8) (echo)
        shell: bash -l {0}
        run: |
          set -Eeuo pipefail
          F="${ECHO_DIR}/flake8.txt"
          conda activate "${CONDA_ENV}"
          mamba install -y flake8 | tee -a "$F"
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics | tee -a "$F"
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics | tee -a "$F"
          chmod 0644 "$F"

      - name: Test (pytest) (echo)
        shell: bash -l {0}
        run: |
          set -Eeuo pipefail
          F="${ECHO_DIR}/pytest.txt"
          conda activate "${CONDA_ENV}"
          mamba install -y pytest | tee -a "$F"
          pytest -q | tee -a "$F"
          chmod 0644 "$F"

      - name: Upload Echo artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: echo-files
          path: |
            .github/echo_files/**
            .github/echo_logs/**
          if-no-files-found: warn
          retention-days: 7

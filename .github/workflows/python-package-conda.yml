name: "🏦 Java Ledger Viewer (Ultra Echo, LFS, .github Excel Auto-Discovery, Maven/Gradle, Release)"

on:
  workflow_dispatch:
    inputs:
      ledger_path:
        description: "통장 파일 경로 (CSV/XLS/XLSX). 비우면 .github/에서 자동탐색"
        required: false
        default: ""
      from_date:
        description: "조회 시작일 (YYYY-MM-DD)"
        required: false
        default: ""
      to_date:
        description: "조회 종료일 (YYYY-MM-DD)"
        required: false
        default: ""
      sheet_name:
        description: "엑셀 시트명(선택, 미지정 시 첫 시트)"
        required: false
        default: ""
      create_release:
        description: "빌드 산출물로 GitHub Release 생성"
        type: boolean
        required: false
        default: false

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  DL_DIR: .github/echo_downloads
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

permissions:
  contents: write   # 릴리즈/아티팩트 업로드용
  actions: read

jobs:
  view-ledger:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ensure Git LFS (optional)
        shell: bash
        run: |
          set -Eeuo pipefail
          git lfs install
          git lfs pull || true

      - name: Setup Echo helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${DL_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          log(){ printf '%s %s\n' "$1" "$2" | tee -a "${LOG_DIR}/echo.log"; }
          echoe(){ log "${ECHO_OK}" "$*"; }
          warne(){ log "${ECHO_WARN}" "$*"; }
          faile(){ log "${ECHO_FAIL}" "$*"; }
          run(){ printf '▶ %s\n' "$*" | tee -a "${LOG_DIR}/echo.log" ; eval "$@" 2>&1 | tee -a "${LOG_DIR}/echo.log"; }
          SH
          chmod +x /tmp/echo_helpers.sh
          source /tmp/echo_helpers.sh
          echoe "Echo helpers ready"

      # ===== 1) 프로젝트 부트스트랩 (pom.xml 없으면 생성) =====
      - name: Bootstrap minimal Maven project when pom.xml is missing
        if: hashFiles('**/pom.xml') == ''
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          echoe "pom.xml 미존재 → 최소 Maven 프로젝트 생성 (app/)"
          run mkdir -p app/src/main/java/com/example app/src/main/resources
          cat > app/pom.xml <<'POM'
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.example</groupId>
            <artifactId>bank-ledger</artifactId>
            <version>1.0.0</version>
            <properties>
              <maven.compiler.source>21</maven.compiler.source>
              <maven.compiler.target>21</maven.compiler.target>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            </properties>
            <dependencies>
              <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-csv</artifactId>
                <version>1.11.0</version>
              </dependency>
              <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>5.2.5</version>
              </dependency>
              <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>5.2.5</version>
              </dependency>
              <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.14.0</version>
              </dependency>
            </dependencies>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.13.0</version>
                  <configuration><release>21</release></configuration>
                </plugin>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-shade-plugin</artifactId>
                  <version>3.5.3</version>
                  <executions>
                    <execution>
                      <phase>package</phase>
                      <goals><goal>shade</goal></goals>
                      <configuration>
                        <createDependencyReducedPom>false</createDependencyReducedPom>
                        <transformers>
                          <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>com.example.BankLedger</mainClass>
                          </transformers>
                        </configuration>
                    </execution>
                  </executions>
                </plugin>
              </plugins>
            </build>
          </project>
          POM

          # 자바 소스(자동탐색 완전판)
          cat > app/src/main/java/com/example/BankLedger.java <<'JAVA'
          package com.example;

          import org.apache.commons.csv.CSVFormat;
          import org.apache.commons.csv.CSVParser;
          import org.apache.commons.csv.CSVRecord;
          import org.apache.poi.hssf.usermodel.HSSFWorkbook;
          import org.apache.poi.ss.usermodel.*;
          import org.apache.poi.xssf.usermodel.XSSFWorkbook;

          import java.io.*;
          import java.nio.charset.StandardCharsets;
          import java.nio.file.*;
          import java.time.LocalDate;
          import java.time.format.DateTimeFormatter;
          import java.util.*;
          import java.util.stream.Stream;

          public class BankLedger {
              record Row(LocalDate date, String time, String type, long amount, String memo, Long balance, String account){}

              static final DateTimeFormatter[] DATE_FMTS = new DateTimeFormatter[]{
                      DateTimeFormatter.ofPattern("yyyy-MM-dd"),
                      DateTimeFormatter.ofPattern("yyyy.M.d"),
                      DateTimeFormatter.ofPattern("yyyy/M/d")
              };

              public static void main(String[] args) throws Exception {
                  String path = argOrEnv(args, 0, "LEDGER_PATH", "");
                  String from = argOrEnv(args, 1, "FROM_DATE", "");
                  String to   = argOrEnv(args, 2, "TO_DATE", "");
                  String sheetName = System.getenv().getOrDefault("SHEET_NAME", "");

                  if (path.isBlank()) {
                      Optional<Path> found = autoDiscover();
                      if (found.isPresent()) {
                          path = found.get().toString();
                          System.out.println("🔎 Auto-discovered ledger: " + path);
                      } else {
                          System.out.println("⚠️ .github/ 내 통장 파일을 찾지 못해 샘플 CSV 생성: data/sample_ledger.csv");
                          Path p = Paths.get("data"); Files.createDirectories(p);
                          Path csv = p.resolve("sample_ledger.csv");
                          String sample = String.join("\n", List.of(
                                  "date,time,type,amount,memo,balance,account",
                                  "2025-10-11,16:36:58,체크카드,10860,Google handj,1673419,원신한",
                                  "2025-10-09,14:15:58,체크카드,53692,Google handj,190880,원신한",
                                  "2025-10-09,12:41:23,체크카드,2682,Google Pokemon,144572,원신한",
                                  "2025-10-08,15:40:43,체크카드,10731,Google handj,179288,원신한",
                                  "2025-10-08,14:52:20,체크카드,32222,Google handj,190019,원신한"
                          ));
                          Files.writeString(csv, sample, StandardCharsets.UTF_8);
                          path = csv.toString();
                      }
                  }

                  LocalDate fromDate = parseDateOrNull(from);
                  LocalDate toDate   = parseDateOrNull(to);

                  List<Row> rows;
                  String lower = path.toLowerCase(Locale.ROOT);
                  if (lower.endsWith(".csv")) {
                      rows = readCsv(path);
                  } else if (lower.endsWith(".xlsx") || lower.endsWith(".xls")) {
                      rows = readExcel(path, sheetName);
                  } else {
                      System.out.println("❌ 지원하지 않는 확장자: " + path);
                      return;
                  }

                  rows = filterByDate(rows, fromDate, toDate);

                  printTable(rows);

                  long totalOut = rows.stream().mapToLong(r -> r.amount).sum();
                  Long lastBalance = rows.stream().filter(r -> r.balance != null).reduce((a,b)->b).map(r->r.balance).orElse(null);

                  System.out.println();
                  System.out.println("==== 요약 ====");
                  System.out.printf("거래 건수  : %,d%n", rows.size());
                  System.out.printf("총 출금합계: %,d원 (amount 합)%n", totalOut);
                  if (lastBalance != null) {
                      System.out.printf("마지막 잔액: %,d원%n", lastBalance);
                  }
              }

              static Optional<Path> autoDiscover() {
                  List<String> patterns = List.of(".github/**/*.xlsx", ".github/**/*.xls", ".github/**/*.csv");
                  return patterns.stream().map(BankLedger::globLatest).filter(Objects::nonNull).findFirst();
              }

              static Path globLatest(String pattern) {
                  try {
                      Path root = Paths.get(".");
                      try (Stream<Path> s = Files.find(root, Integer.MAX_VALUE,
                              (p, attr) -> p.toString().replace('\\','/').matches(globToRegex(pattern)) && attr.isRegularFile())) {
                          return s.max(Comparator.comparingLong(p -> p.toFile().lastModified())).orElse(null);
                      }
                  } catch (Exception ignore) { return null; }
              }

              static String globToRegex(String glob) {
                  String g = glob.replace(".", "\\.")
                          .replace("**/", "(.*/)?")
                          .replace("**", ".*")
                          .replace("*", "[^/]*")
                          .replace("?", ".");
                  return "^" + g + "$";
              }

              static String argOrEnv(String[] args, int idx, String env, String def) {
                  if (args.length > idx && args[idx] != null && !args[idx].isBlank()) return args[idx];
                  return System.getenv().getOrDefault(env, def);
              }

              static LocalDate parseDateOrNull(String s) {
                  if (s == null || s.isBlank()) return null;
                  for (var fmt: DATE_FMTS) { try { return LocalDate.parse(s.trim(), fmt); } catch (Exception ignore) {} }
                  try { return LocalDate.parse(s.trim()); } catch (Exception ignore) {}
                  return null;
              }

              static List<Row> readCsv(String path) throws IOException {
                  try (Reader in = Files.newBufferedReader(Paths.get(path), StandardCharsets.UTF_8)) {
                      CSVParser p = CSVFormat.DEFAULT.builder().setHeader().setSkipHeaderRecord(true).setTrim(true).build().parse(in);
                      List<Row> out = new ArrayList<>();
                      for (CSVRecord r: p) {
                          LocalDate d = parseDateOrNull(r.get("date"));
                          String time = getSafe(r, "time");
                          String type = getSafe(r, "type");
                          long amount = parseLongSafe(getSafe(r, "amount"));
                          String memo = getSafe(r, "memo");
                          Long bal = parseLongSafeNullable(getSafe(r, "balance"));
                          String account = getSafe(r, "account");
                          if (d != null) out.add(new Row(d,time,type,amount,memo,bal,account));
                      }
                      return out;
                  }
              }

              static List<Row> readExcel(String path, String sheetName) throws IOException {
                  try (InputStream is = Files.newInputStream(Paths.get(path))) {
                      Workbook wb = path.toLowerCase(Locale.ROOT).endsWith(".xlsx") ? new XSSFWorkbook(is) : new HSSFWorkbook(is);
                      Sheet sheet = (sheetName != null && !sheetName.isBlank()) ? wb.getSheet(sheetName) : wb.getSheetAt(0);

                      Map<String,Integer> idx = new HashMap<>();
                      Iterator<Row> it = sheet.rowIterator();
                      if (!it.hasNext()) return List.of();
                      org.apache.poi.ss.usermodel.Row hr = it.next();
                      for (Cell c: hr) {
                          c.setCellType(CellType.STRING);
                          idx.put(c.getStringCellValue().toLowerCase(Locale.ROOT), c.getColumnIndex());
                      }

                      List<Row> out = new ArrayList<>();
                      while (it.hasNext()) {
                          org.apache.poi.ss.usermodel.Row rr = it.next();
                          LocalDate d = parseDateOrNull(cellStr(rr, idx.getOrDefault("date",-1)));
                          if (d == null) continue;
                          String time = cellStr(rr, idx.getOrDefault("time",-1));
                          String type = cellStr(rr, idx.getOrDefault("type",-1));
                          long amount = parseLongSafe(cellStr(rr, idx.getOrDefault("amount",-1)));
                          String memo = cellStr(rr, idx.getOrDefault("memo",-1));
                          Long bal = parseLongSafeNullable(cellStr(rr, idx.getOrDefault("balance",-1)));
                          String account = cellStr(rr, idx.getOrDefault("account",-1));
                          out.add(new Row(d,time,type,amount,memo,bal,account));
                      }
                      wb.close();
                      return out;
                  }
              }

              static String cellStr(org.apache.poi.ss.usermodel.Row r, int cidx) {
                  if (cidx < 0) return "";
                  Cell c = r.getCell(cidx);
                  if (c == null) return "";
                  return switch (c.getCellType()) {
                      case STRING -> c.getStringCellValue();
                      case NUMERIC -> DateUtil.isCellDateFormatted(c)
                              ? c.getLocalDateTimeCellValue().toLocalDate().toString()
                              : String.valueOf(Math.round(c.getNumericCellValue()));
                      case BOOLEAN -> String.valueOf(c.getBooleanCellValue());
                      default -> "";
                  };
              }

              static String getSafe(CSVRecord r, String key) { try { return r.get(key); } catch (Exception e) { return ""; } }
              static long parseLongSafe(String s) {
                  if (s == null) return 0L;
                  String t = s.replaceAll("[^0-9-]", "");
                  if (t.isBlank() || t.equals("-")) return 0L;
                  try { return Long.parseLong(t); } catch (Exception e) { return 0L; }
              }
              static Long parseLongSafeNullable(String s) {
                  String t = (s==null) ? "" : s.replaceAll("[^0-9-]", "");
                  if (t.isBlank() || t.equals("-")) return null;
                  try { return Long.parseLong(t); } catch (Exception e) { return null; }
              }

              static List<Row> filterByDate(List<Row> in, LocalDate from, LocalDate to) {
                  if (from == null && to == null) return in;
                  List<Row> out = new ArrayList<>();
                  for (Row r: in) {
                      boolean ok = true;
                      if (from != null && r.date.isBefore(from)) ok = false;
                      if (to != null && r.date.isAfter(to)) ok = false;
                      if (ok) out.add(r);
                  }
                  return out;
              }

              static void printTable(List<Row> rows) {
                  System.out.println("date       | time     | type   | amount  | memo             | balance   | account");
                  System.out.println("-----------+----------+--------+---------+------------------+-----------+--------");
                  for (Row r: rows) {
                      System.out.printf("%-10s | %-8s | %-6s | %8s | %-16s | %9s | %s%n",
                              r.date, nv(r.time), nv(r.type), fmt(r.amount), nv(r.memo),
                              r.balance==null? "-" : fmt(r.balance), nv(r.account));
                  }
              }
              static String nv(String s){ return (s==null||s.isBlank())?"-":s; }
              static String fmt(long v){ return String.format("%,d", v); }
          }
          JAVA

          # 🔑 생성된 pom 경로를 전역 환경에 저장 (git 미추적이어도 후속 스텝에서 인식)
          echo "POM_PATH=app/pom.xml" >> "$GITHUB_ENV"

      # ===== 2) JDK + 캐시 =====
      - name: Setup Java (Temurin 21) + Maven cache (if pom exists)
        if: hashFiles('**/pom.xml') != ''
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # ===== 3) Build (Maven 또는 Gradle 자동 감지) =====
      - name: Build (auto-detect Maven/Gradle; include untracked)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh

          # 1) bootstrap 단계에서 설정한 값 우선
          POM_PATH="${POM_PATH:-}"

          # 2) find로 검색 (git 미추적 포함)
          if [[ -z "${POM_PATH}" ]]; then
            POM_PATH="$(find . -type f -name pom.xml -not -path '*/.git/*' | head -n1 || true)"
          fi

          if [[ -n "${POM_PATH}" ]]; then
            echo "Detected pom: ${POM_PATH}"
            WORKDIR="$(dirname "${POM_PATH}")"
            run mvn -B -q -DskipTests -f "${POM_PATH}" package
            JAR="$(ls -1 "${WORKDIR}"/target/*-shaded.jar 2>/dev/null | head -n1 || true)"
            if [[ -z "${JAR}" ]]; then
              JAR="$(ls -1 "${WORKDIR}"/target/*jar-with-dependencies.jar 2>/dev/null | head -n1 || true)"
            fi
            if [[ -z "${JAR}" ]]; then
              faile "실행 JAR을 찾지 못했습니다 (shade 산출물 없음)."
              ls -al "${WORKDIR}/target" || true
              exit 1
            fi
            echo "JAR=${JAR}" >> "$GITHUB_ENV"
          else
            # Maven 없음 → Gradle 시도
            if [[ -f gradlew || -f build.gradle || -f build.gradle.kts ]]; then
              if [[ -f gradlew ]]; then
                run chmod +x gradlew
                # shadow 플러그인이 있으면 shadowJar, 없으면 build
                if ./gradlew tasks | grep -q '^shadowJar'; then
                  run ./gradlew -q shadowJar
                  JAR="$(ls -1 build/libs/*-all.jar 2>/dev/null | head -n1 || true)"
                  [[ -z "$JAR" ]] && JAR="$(ls -1 build/libs/*-shadow.jar 2>/dev/null | head -n1 || true)"
                else
                  run ./gradlew -q build
                  JAR="$(ls -1 build/libs/*-all.jar 2>/dev/null | head -n1 || true)"
                  [[ -z "$JAR" ]] && JAR="$(ls -1 build/libs/*-shadow.jar 2>/dev/null | head -n1 || true)"
                  [[ -z "$JAR" ]] && JAR="$(ls -1 build/libs/*.jar 2>/dev/null | head -n1 || true)"
                fi
              else
                # 시스템 gradle
                run sudo apt-get update -y
                run sudo apt-get install -y gradle || true
                run gradle -q build
                JAR="$(ls -1 build/libs/*.jar 2>/dev/null | head -n1 || true)"
              fi

              if [[ -z "${JAR:-}" ]]; then
                faile "Gradle JAR을 찾지 못했습니다."
                ls -al build/libs || true
                exit 1
              fi
              echo "JAR=${JAR}" >> "$GITHUB_ENV"
            else
              faile "pom.xml/Gradle 빌드 파일을 찾지 못했습니다."
              find . -maxdepth 4 -type f \( -name pom.xml -o -name build.gradle -o -name build.gradle.kts \) -print || true
              exit 1
            fi
          fi

      # ===== 4) Run Viewer =====
      - name: Run viewer (java -jar)
        shell: bash
        env:
          LEDGER_PATH: ${{ inputs.ledger_path }}
          FROM_DATE: ${{ inputs.from_date }}
          TO_DATE: ${{ inputs.to_date }}
          SHEET_NAME: ${{ inputs.sheet_name }}
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          echo "LEDGER_PATH=${LEDGER_PATH:-'(빈값: .github/ 자동탐색)'}"
          echo "FROM_DATE=${FROM_DATE}"
          echo "TO_DATE=${TO_DATE}"
          echo "SHEET_NAME=${SHEET_NAME}"
          test -n "${JAR:-}" || { faile "JAR 환경변수가 비어 있습니다."; exit 1; }
          run java -jar "${JAR}" "${LEDGER_PATH:-}" "${FROM_DATE:-}" "${TO_DATE:-}"

      # ===== 5) (옵션) 릴리즈 생성 =====
      - name: Create GitHub Release (optional)
        if: ${{ inputs.create_release == true }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "ledger-${{ github.run_id }}"
          name: "Ledger Viewer Build ${{ github.run_id }}"
          draft: false
          prerelease: false
          files: |
            ${{ env.JAR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ===== 6) 아티팩트 업로드 =====
      - name: Upload artifacts (logs + jars + discovered files)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ledger-artifacts-${{ github.run_id }}
          path: |
            ${LOG_DIR}
            ${DL_DIR}
            **/target/*.jar
            build/libs/*.jar
            data/*.csv
            .github/**/*.xlsx
            .github/**/*.xls
            .github/**/*.csv
          if-no-files-found: ignore

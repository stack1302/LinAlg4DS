name: Python Package using Conda + EchoOps (quiet, forge-only, sed-safe, PR)

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      echo_verbose:
        description: "에코 로깅 상세 출력"
        type: boolean
        required: false
        default: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      LOG_DIR: .github/echo_logs
      ECHO_DIR: .github/echo_files
      SITE_DIR: site
      ECHO_OK: "✅"
      ECHO_WARN: "⚠️"
      ECHO_FAIL: "❌"
      CONDA_ENV: "test-env"
      PY_VERSION: "3.10"
      ECHO_VERBOSE: ${{ github.event_name == 'workflow_dispatch' && inputs.echo_verbose || 'true' }}
      # 조용/경고 억제
      MAMBA_NO_BANNER: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONWARNINGS: "ignore"
      PYTHONNOUSERSITE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # forge-only condarc
      - name: Write quiet condarc (forge-only)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p .github/conda
          cat > .github/conda/condarc <<'CONDARC'
          channels:
            - conda-forge
          channel_priority: strict
          show_channel_urls: true
          auto_update_conda: true
          solver: libmamba
          notify_outdated_conda: false
          changeps1: false
          pkgs_dirs:
            - /home/runner/conda_pkgs_dir
          use_only_tar_bz2: true
          default_channels:
            - https://conda.anaconda.org/conda-forge
          custom_channels: {}
          custom_multichannels: {}
          channel_alias: https://conda.anaconda.org
          CONDARC

      - name: Prepare Echo helpers, dirs and permissions
        shell: bash
        run: |
          set -Eeuo pipefail
          umask 022
          install -d -m 0755 "${LOG_DIR}" "${ECHO_DIR}" "${SITE_DIR}"

          cat > /tmp/echo_helpers.sh <<'SH'
          set -o pipefail
          ok(){    printf '%s %s\n' "${ECHO_OK}" "$*"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*"; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*"; }
          logf(){  printf '%s\n' "$*" | tee -a "${LOG_DIR}/echo-main.log"; }
          run_cmd(){
            logf "▶ $*"
            set +e
            eval "$@" 2>&1 | tee -a "${LOG_DIR}/echo-main.log"
            local rc=${PIPESTATUS[0]}
            set -e
            if [ $rc -eq 0 ]; then ok "DONE: $*"; else warn "RC=$rc ← $*"; fi
            return $rc
          }
          SH
          chmod 0755 /tmp/echo_helpers.sh
          source /tmp/echo_helpers.sh
          TS="$(date +%Y%m%d-%H%M%S)"
          echo "Hello Echo ${TS}" > "${ECHO_DIR}/hello.txt"
          printf 'LOG INIT %s\n' "${TS}" >> "${LOG_DIR}/echo-main.log"
          install -m 0644 /dev/null "${ECHO_DIR}/README.echo"
          printf '<html><body><h1>Echo Site %s</h1></body></html>\n' "${TS}" > "${SITE_DIR}/index.html"
          ok "Echo helpers ready"
          [ "${ECHO_VERBOSE}" = "true" ] && logf "Verbose echo is ON"

      # ✅ 필수 OS 업그레이드
      - name: Upgrade OS packages (mandatory)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          export DEBIAN_FRONTEND=noninteractive
          run_cmd sudo apt-get update -y
          run_cmd sudo apt-get -o Dpkg::Options::=--force-confold \
                               -o Dpkg::Options::=--force-confdef \
                               upgrade -y
          ok "OS upgrade completed."

      - name: Set up Miniconda (forge-only)
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ env.PY_VERSION }}
          miniforge-version: latest
          channels: conda-forge
          conda-remove-defaults: true
          channel-priority: strict
          activate-environment: ${{ env.CONDA_ENV }}
          use-mamba: true
          mamba-version: "2.*"
          conda-solver: libmamba
          show-channel-urls: true
          use-only-tar-bz2: true
          condarc-file: .github/conda/condarc

      # system 레벨에서도 forge-only 강제 (repo.anaconda.com 경고 추가 차단)
      - name: Enforce forge-only (system-level, pre-env)
        shell: bash -l {0}
        run: |
          set -Eeuo pipefail
          conda config --system --remove channels defaults || true
          conda config --system --set channel_priority strict
          conda config --system --set show_channel_urls true
          conda config --system --set solver libmamba
          conda config --system --set use_only_tar_bz2 true
          conda config --system --remove-key default_channels || true
          conda config --system --add default_channels https://conda.anaconda.org/conda-forge
          conda config --system --remove-key custom_channels || true
          conda config --system --remove-key custom_multichannels || true
          conda info

      # 🔧 .py만 대상으로 안전 정리 + 자동 import + 커밋
      - name: Auto-fix notebook artifacts & missing imports (py-only)
        id: autofix
        shell: bash -l {0}
        env:
          PR_BRANCH: fix/autofix-notebook-and-imports
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          git config --global --add safe.directory "$GITHUB_WORKSPACE" || true

          # 추적되는 .py만 처리 (YAML/IPYNB 오염 방지)
          mapfile -d '' PYFILES < <(git ls-files -z '*.py')

          # 1) '??'로 시작(앞 공백 허용) 라인 제거
          for f in "${PYFILES[@]}"; do
            [ -f "$f" ] || continue
            awk '!/^[[:space:]]*\?\?/' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
          done

          # 2) spla 사용 파일 → import scipy.linalg as spla
          for f in "${PYFILES[@]}"; do
            [ -f "$f" ] || continue
            if grep -q 'spla\.' "$f" && ! grep -Eq '^import[[:space:]]+scipy\.linalg[[:space:]]+as[[:space:]]+spla' "$f"; then
              awk 'NR==1{print "import scipy.linalg as spla"}1' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              logf "Inserted: import scipy.linalg as spla -> $f"
            fi
          done

          # 3) pearsonr 사용 파일 → from scipy.stats import pearsonr
          for f in "${PYFILES[@]}"; do
            [ -f "$f" ] || continue
            if grep -q 'pearsonr' "$f" && ! grep -Eq '^from[[:space:]]+scipy\.stats[[:space:]]+import[[:space:]]+pearsonr' "$f"; then
              awk 'NR==1{print "from scipy.stats import pearsonr"}1' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              logf "Inserted: from scipy.stats import pearsonr -> $f"
            fi
          done

          # 4) np. 사용 파일 → import numpy as np
          for f in "${PYFILES[@]}"; do
            [ -f "$f" ] || continue
            if grep -qE '(^|[^A-Za-z0-9_])np\.' "$f" && ! grep -Eq '^import[[:space:]]+numpy[[:space:]]+as[[:space:]]+np' "$f"; then
              awk 'NR==1{print "import numpy as np"}1' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              logf "Inserted: import numpy as np -> $f"
            fi
          done

          git status --porcelain | tee "${LOG_DIR}/echo-autofix-status.txt"

          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git checkout -B "${PR_BRANCH}"
            git add -A
            # 괄호/특수문자 안전
            git commit -m "chore: auto-fix notebook artifacts (??) and missing imports (spla, pearsonr, numpy)"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request (if changes)
        if: steps.autofix.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: auto-fix notebook artifacts (??) and missing imports"
          title: "Auto-fix: notebook artifacts & missing imports"
          body: |
            자동 패치:
            - 노트북 유입 `??` 라인 제거(awk 기반, *.py만 대상)
            - `spla`, `pearsonr`, `numpy` 누락 import 자동 삽입
            - Echo 로그에 상세 내용 기록
          branch: fix/autofix-notebook-and-imports
          add-paths: |
            **/*.py
            .github/echo_logs/**

      - name: Create/Update Conda environment from environment.yml
        shell: bash -l {0}
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          if [ -f environment.yml ]; then
            run_cmd mamba env update -n "${CONDA_ENV}" -f environment.yml
          else
            warn "environment.yml not found → creating minimal env"
            run_cmd mamba create -n "${CONDA_ENV}" "python=${PY_VERSION}" -y
          fi
          conda activate "${CONDA_ENV}"
          python -V | tee -a "${LOG_DIR}/echo-main.log"
          conda list | tee -a "${LOG_DIR}/echo-main.log"

      - name: Lint with flake8
        shell: bash -l {0}
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          conda activate "${CONDA_ENV}"
          run_cmd mamba install -y flake8
          run_cmd flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          run_cmd flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests with pytest (quiet warnings)
        shell: bash -l {0}
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          conda activate "${CONDA_ENV}"
          run_cmd mamba install -y pytest
          run_cmd pytest -q

      - name: Upload Echo logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: echo-logs
          path: |
            .github/echo_logs/**
            .github/echo_files/**
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Site files (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site/**
          if-no-files-found: warn
          retention-days: 7

name: "🗄️ DB Services + Echo Healthchecks (All-in-One, Curl+Allowlist, Noble-Fix)"

on:
  workflow_dispatch:
    inputs:
      enable_heavy:
        description: "무거운 DB(Cassandra/Scylla)도 포함 실행"
        type: boolean
        required: false
        default: false
      allow_domains_csv:
        description: "curl 허용 도메인 CSV (예: raw.githubusercontent.com,downloads.mariadb.org)"
        required: false
        default: "raw.githubusercontent.com"
      extra_files:
        description: "curl로 받을 파일들 (공백/줄바꿈/쉼표 구분)"
        required: false
        default: ""

permissions:
  contents: read

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      allow: ${{ steps.export-allow.outputs.allow }}
    steps:
      - uses: actions/checkout@v4

      - name: Prepare echo helpers (global)
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          set -Eeuo pipefail
          : "${LOG_DIR:=.github/echo_logs}"
          mkdir -p "${LOG_DIR}"

          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*"; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*"; }
          logf(){  printf '%s\n' "$*" | tee -a "$1"; }

          # run_cmd "LOG_FILE" cmd args...
          run_cmd(){
            local LOG_FILE="$1"; shift
            logf "$LOG_FILE" "▶ $*"
            "$@" 2>&1 | tee -a "$LOG_FILE"
            local rc=${PIPESTATUS[0]}
            if [ $rc -eq 0 ]; then echoe "DONE: $*"; else warn "RC=$rc ← $*"; fi
            return $rc
          }

          # curl_get url out [sha256] (allowlist enforced)
          curl_get(){
            local url="$1"; local out="$2"; local want_sha="${3:-}"
            local allow="${ALLOW_DOMAINS_CSV:-}"
            local host; host=$(printf '%s' "$url" | awk -F/ '{print $3}')
            if [ -n "$allow" ] && ! printf '%s\n' "$allow" | tr ',' '\n' | tr -d ' ' | grep -Fxq "$host"; then
              echo "Blocked host: $host (allow=$allow)"; return 2
            fi
            curl -fSsvL --retry 3 --retry-all-errors --retry-delay 2 --connect-timeout 20 --max-time 180 "$url" -o "$out"
            if [ -n "$want_sha" ]; then
              echo "$want_sha  $out" | sha256sum -c -
            fi
          }

          # wait_port host port [timeout=60]
          wait_port(){
            local host="$1" port="$2" wait="${3:-60}"
            local end=$((SECONDS+wait))
            while [ $SECONDS -lt $end ]; do
              if (echo >"/dev/tcp/${host}/${port}") >/dev/null 2>&1; then
                echoe "port ${host}:${port} open"
                return 0
              fi
              sleep 1
            done
            warn "timeout waiting for ${host}:${port}"
            return 1
          }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "✅ echo helpers ready → /tmp/echo_helpers.sh"

      - name: Install DB client tools (APT) — noble fix (no mariadb-client)
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/clients-install.log"
          run_cmd "$LOG" sudo apt-get update
          # Ubuntu 24.04: mariadb-client 제거(충돌), mongodb-clients 없음 → 컨테이너 mongosh 사용
          run_cmd "$LOG" sudo apt-get install -y --no-install-recommends \
            postgresql-client \
            mysql-client \
            redis-tools \
            clickhouse-client \
            curl jq netcat-traditional
          echoe "Clients installed (MariaDB는 mysql CLI 사용, Mongo는 컨테이너 mongosh 사용)."

      - name: Export allow domains
        id: export-allow
        run: |
          echo "allow=${{ github.event.inputs.allow_domains_csv }}" >> "$GITHUB_OUTPUT"

      - name: Optional:curl download extra files (allowlist enforced)
        if: ${{ inputs.extra_files != '' }}
        env:
          ALLOW_DOMAINS_CSV: ${{ steps.export-allow.outputs.allow }}
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/curl-downloads.log"
          mkdir -p .github/downloads
          printf '%s\n' "${{ github.event.inputs.extra_files }}" | tr ',\n' '  ' | xargs -n1 -I{} bash -c '
            f={}; [ -z "$f" ] && exit 0
            base=$(basename "$f")
            run_cmd "'"$LOG"'" curl_get "$f" ".github/downloads/$base"
          '
          echoe "curl downloads completed."

  core-dbs:
    runs-on: ubuntu-latest
    needs: [prepare]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: app
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U test"
          --health-interval=5s --health-timeout=3s --health-retries=30
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: app
          MYSQL_USER: app
          MYSQL_PASSWORD: app
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h localhost -proot"
          --health-interval=5s --health-timeout=3s --health-retries=30
      mariadb:
        image: mariadb:11
        env:
          MARIADB_ROOT_PASSWORD: root
          MARIADB_DATABASE: app
          MARIADB_USER: app
          MARIADB_PASSWORD: app
        ports: ["3307:3306"] # 호스트 3307로 매핑(3306과 분리)
      mongo:
        image: mongo:7
        ports: ["27017:27017"]
      redis:
        image: redis:7
        ports: ["6379:6379"]
    steps:
      - uses: actions/checkout@v4
      - name: Copy echo helpers from prepare
        run: cp -f /tmp/echo_helpers.sh /tmp/echo_helpers.sh || true

      - name: Wait ports
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/core-wait.log"
          run_cmd "$LOG" wait_port 127.0.0.1 5432 90
          run_cmd "$LOG" wait_port 127.0.0.1 3306 90
          run_cmd "$LOG" wait_port 127.0.0.1 3307 90
          run_cmd "$LOG" wait_port 127.0.0.1 27017 90
          run_cmd "$LOG" wait_port 127.0.0.1 6379 60

      - name: Health & smoke tests (psql/mysql/redis + MariaDB via mysql + Mongo via container mongosh)
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/core-smoke.log"

          # PostgreSQL
          run_cmd "$LOG" psql "postgresql://test:test@127.0.0.1:5432/app" -c "SELECT version();"
          run_cmd "$LOG" psql "postgresql://test:test@127.0.0.1:5432/app" -c "CREATE TABLE IF NOT EXISTS t(id serial primary key, v text); INSERT INTO t(v) VALUES('ok'); SELECT count(*) FROM t;"

          # MySQL (3306)
          run_cmd "$LOG" mysql -h 127.0.0.1 -P 3306 -uroot -proot -e "SELECT VERSION(); CREATE DATABASE IF NOT EXISTS smoke; USE smoke; CREATE TABLE IF NOT EXISTS t(id INT PRIMARY KEY AUTO_INCREMENT, v VARCHAR(50)); INSERT INTO t(v) VALUES('ok'); SELECT COUNT(*) FROM t;"

          # MariaDB (3307) — mysql CLI 사용
          run_cmd "$LOG" mysql -h 127.0.0.1 -P 3307 -uroot -proot -e "SELECT VERSION(); CREATE DATABASE IF NOT EXISTS smoke; USE smoke; CREATE TABLE IF NOT EXISTS t(id INT PRIMARY KEY AUTO_INCREMENT, v VARCHAR(50)); INSERT INTO t(v) VALUES('ok'); SELECT COUNT(*) FROM t;"

          # MongoDB — 컨테이너 mongosh
          run_cmd "$LOG" bash -lc 'docker run --rm --network=host mongo:7 mongosh --host 127.0.0.1 --eval "db.runCommand({ ping: 1 })"'
          run_cmd "$LOG" bash -lc 'docker run --rm --network=host mongo:7 mongosh --host 127.0.0.1 --eval "db.getSiblingDB(\"smoke\").t.insertOne({v:\"ok\"}); db.getSiblingDB(\"smoke\").t.countDocuments()"'

          # Redis
          run_cmd "$LOG" redis-cli -h 127.0.0.1 PING
          run_cmd "$LOG" redis-cli -h 127.0.0.1 SET foo bar
          run_cmd "$LOG" redis-cli -h 127.0.0.1 GET foo

  analytical-dbs:
    runs-on: ubuntu-latest
    needs: [prepare]
    services:
      clickhouse:
        image: clickhouse/clickhouse-server:24.8
        ports: ["9000:9000", "8123:8123"]
      questdb:
        image: questdb/questdb:latest
        ports: ["9009:9009","8812:8812","9000:9000"]
      influx:
        image: influxdb:2
        ports: ["8086:8086"]
      victoriametrics:
        image: victoriametrics/victoria-metrics:latest
        ports: ["8428:8428"]
    steps:
      - uses: actions/checkout@v4
      - name: Copy echo helpers
        run: cp -f /tmp/echo_helpers.sh /tmp/echo_helpers.sh || true
      - name: Wait ports
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/anal-wait.log"
          run_cmd "$LOG" wait_port 127.0.0.1 8123 120
          run_cmd "$LOG" wait_port 127.0.0.1 9000 120
          run_cmd "$LOG" wait_port 127.0.0.1 8812 120
          run_cmd "$LOG" wait_port 127.0.0.1 8086 120
          run_cmd "$LOG" wait_port 127.0.0.1 8428 120
      - name: Health & smoke tests
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/anal-smoke.log"

          run_cmd "$LOG" bash -lc 'curl -fsS http://127.0.0.1:8123/ping'
          if command -v clickhouse-client >/dev/null 2>&1; then
            run_cmd "$LOG" clickhouse-client --host 127.0.0.1 --query "SELECT version();"
          fi
          if command -v psql >/dev/null 2>&1; then
            run_cmd "$LOG" psql "postgresql://admin:quest@127.0.0.1:8812/qdb?sslmode=disable" -c "SELECT 1;" || true
          fi
          run_cmd "$LOG" curl -fsS http://127.0.0.1:8086/health
          run_cmd "$LOG" curl -fsS http://127.0.0.1:8428/metrics | head -n 5

  graph-kv-dbs:
    runs-on: ubuntu-latest
    needs: [prepare]
    services:
      neo4j:
        image: neo4j:5
        env:
          NEO4J_AUTH: neo4j/testpass
        ports: ["7687:7687","7474:7474"]
      arango:
        image: arangodb:3.11
        env:
          ARANGO_ROOT_PASSWORD: root
        ports: ["8529:8529"]
      etcd:
        image: gcr.io/etcd-development/etcd:v3.5.13
        env:
          ALLOW_NONE_AUTHENTICATION: "yes"
        ports: ["2379:2379","2380:2380"]
        options: >-
          --health-cmd="etcdctl endpoint health || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=20
      couchdb:
        image: couchdb:3
        env:
          COUCHDB_USER: admin
          COUCHDB_PASSWORD: admin
        ports: ["5984:5984"]
    steps:
      - uses: actions/checkout@v4
      - name: Copy echo helpers
        run: cp -f /tmp/echo_helpers.sh /tmp/echo_helpers.sh || true
      - name: Wait ports
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/gkv-wait.log"
          run_cmd "$LOG" wait_port 127.0.0.1 7687 120
          run_cmd "$LOG" wait_port 127.0.0.1 7474 120
          run_cmd "$LOG" wait_port 127.0.0.1 8529 120
          run_cmd "$LOG" wait_port 127.0.0.1 2379 120
          run_cmd "$LOG" wait_port 127.0.0.1 5984 120
      - name: Health & smoke tests
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/gkv-smoke.log"

          run_cmd "$LOG" curl -fsS http://127.0.0.1:7474/ || true
          run_cmd "$LOG" curl -fsS http://127.0.0.1:8529/_api/version
          run_cmd "$LOG" curl -fsS -u root:root --header 'Content-Type: application/json' \
            --data '{"name":"smoke"}' http://127.0.0.1:8529/_api/database || true
          run_cmd "$LOG" curl -fsS http://127.0.0.1:2379/health || true
          run_cmd "$LOG" curl -fsS http://admin:admin@127.0.0.1:5984/

  heavy-dbs:
    if: ${{ inputs.enable_heavy == true }}
    runs-on: ubuntu-latest
    needs: [prepare]
    services:
      cassandra:
        image: cassandra:4.1
        ports: ["9042:9042"]
        options: >-
          --health-cmd="cqlsh -e 'DESCRIBE CLUSTER' || exit 1"
          --health-interval=20s --health-timeout=10s --health-retries=30
      scylla:
        image: scylladb/scylla:5.4
        ports: ["9142:9042"]
    steps:
      - uses: actions/checkout@v4
      - name: Copy echo helpers
        run: cp -f /tmp/echo_helpers.sh /tmp/echo_helpers.sh || true
      - name: Wait ports (느림 주의)
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/heavy-wait.log"
          run_cmd "$LOG" wait_port 127.0.0.1 9042 300
          run_cmd "$LOG" wait_port 127.0.0.1 9142 300
      - name: Health & smoke tests (Cassandra/Scylla)
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          LOG="${LOG_DIR}/heavy-smoke.log"
          run_cmd "$LOG" bash -lc 'docker ps'
          run_cmd "$LOG" bash -lc 'echo | nc -vz 127.0.0.1 9042'
          run_cmd "$LOG" bash -lc 'echo | nc -vz 127.0.0.1 9142'

name: DB Infrastructure CI

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/db-all-echo.yml"
      - "infra/**"

env:
  TZ: Asia/Seoul
  LOG_DIR: .github/echo_logs
  DOCKER_LOG_DIR: .github/echo_logs/docker-logs
  DOWNLOAD_DIR: .github/echo_downloads
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"
  ALLOW_DOMAINS_CSV: "github.com,storage.googleapis.com,repo1.maven.org,dlcdn.apache.org"

jobs:
  prepare:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup echo helpers (local per job)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${DOCKER_LOG_DIR}" "${DOWNLOAD_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          : "${LOG_DIR:=.github/echo_logs}"
          : "${DOCKER_LOG_DIR:=.github/echo_logs/docker-logs}"
          : "${DOWNLOAD_DIR:=.github/echo_downloads}"
          : "${ECHO_OK:=OK}"; : "${ECHO_WARN:=WARN}"; : "${ECHO_FAIL:=FAIL}"
          mkdir -p "${LOG_DIR}" "${DOCKER_LOG_DIR}" "${DOWNLOAD_DIR}"
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*"; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*"; }
          logf(){  printf '%s\n' "$*" | tee -a "$1"; }
          run_cmd(){ local L="$1"; shift; logf "$L" "▶ $*"; "$@" 2>&1 | tee -a "$L"; rc=${PIPESTATUS[0]}; [ $rc -eq 0 ] && echoe "DONE: $*" || warn "RC=$rc ← $*"; return $rc; }
          wait_port(){ local host="$1" port="$2" t="${3:-60}"; local end=$((SECONDS+t)); while [ $SECONDS -lt $end ]; do (echo >"/dev/tcp/$host/$port") >/dev/null 2>&1 && { echoe "port $host:$port open"; return 0; }; sleep 1; done; warn "timeout waiting for $host:$port"; return 1; }
          dump_all_docker_logs(){
            mkdir -p "${DOCKER_LOG_DIR}"
            docker ps -a --format '{{.ID}} {{.Image}} {{.Names}} {{.Status}}' | tee "${DOCKER_LOG_DIR}/docker-ps.log" || true
            while read -r id img name status; do
              [ -z "$id" ] && continue
              docker logs --details "$id" 2>&1 | tail -c 2000000 > "${DOCKER_LOG_DIR}/${name:-container}-${id}.log" || true
            done < <(docker ps -a --format '{{.ID}} {{.Image}} {{.Names}} {{.Status}}')
          }
          SH
          chmod +x /tmp/echo_helpers.sh

      - name: Create echo directory tree & files with permissions
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          L="${LOG_DIR}/echo-init.log"
          for d in core/{pg,mysql,mariadb,redis,mongo} analytical/{clickhouse,questdb,vm} graphkv/{neo4j,arangodb,etcd,couchdb} tmp/tools; do
            run_cmd "$L" mkdir -p "${LOG_DIR}/${d}" "${DOCKER_LOG_DIR}/${d}" "${DOWNLOAD_DIR}/${d}"
          done
          for i in $(seq 1 20); do
            f="${LOG_DIR}/echo_file_${i}.log"
            run_cmd "$L" bash -lc "echo '[echo] file ${i}' > '${f}'"
            run_cmd "$L" chmod 0644 "${f}"
          done
          E="${LOG_DIR}/echo.sh"
          cat > "$E" <<'BASH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          echo "echo:: $*"
          BASH
          chmod 0755 "$E"
          run_cmd "$L" "$E" "echo subsystem ready"

      - name: Upgrade base packages (optional)
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          L="${LOG_DIR}/upgrade.log"
          run_cmd "$L" sudo apt-get update
          run_cmd "$L" sudo apt-get -y dist-upgrade
          run_cmd "$L" sudo apt-get -y autoremove --purge

  analytical-dbs:
    runs-on: ubuntu-24.04
    needs: [prepare]
    services:
      clickhouse:
        image: clickhouse/clickhouse-server:24.8
        ports: [ "9000:9000", "8123:8123" ]
        options: >-
          --health-cmd="curl -fsS http://127.0.0.1:8123/ping || exit 1"
          --health-interval=5s --health-retries=60 --health-timeout=4s
          --health-start-period=20s
      questdb:
        image: questdb/questdb:latest
        ports:
          - 9009:9009   # ILP
          - 8812:8812   # PG-wire
          - 9001:9000   # Web (Host 9001 → Container 9000)
        options: >-
          --health-cmd="sh -lc 'wget -qO- http://127.0.0.1:9000/ || exit 1'"
          --health-interval=5s --health-retries=80 --health-timeout=4s
          --health-start-period=25s
      victoriametrics:
        image: victoriametrics/victoria-metrics:v1.103.0
        ports: [ "8428:8428" ]
        options: >-
          --health-cmd="wget -qO- http://127.0.0.1:8428/health"
          --health-interval=5s --health-retries=60 --health-timeout=4s
          --health-start-period=10s
    steps:
      - uses: actions/checkout@v4

      - name: Setup echo helpers (local per job)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat /tmp/echo_helpers.sh >/tmp/echo_helpers.sh || true

      - name: Wait for analytical services
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          L="${LOG_DIR}/analytical-wait.log"
          run_cmd "$L" wait_port 127.0.0.1 8123 240
          run_cmd "$L" wait_port 127.0.0.1 9001 300
          run_cmd "$L" wait_port 127.0.0.1 8812 300
          run_cmd "$L" wait_port 127.0.0.1 9009 240
          run_cmd "$L" wait_port 127.0.0.1 8428 240

      - name: Smoke test (analytical)
        shell: bash
        run: |
          set -Eeuo pipefail
          # ClickHouse: /ping (403 회피)
          curl -fsS 'http://127.0.0.1:8123/ping'
          # QuestDB: 웹 루트 응답 확인
          curl -fsSI 'http://127.0.0.1:9001/' | head -n1
          # VictoriaMetrics: /health
          curl -fsS 'http://127.0.0.1:8428/health'

      - name: Always dump docker logs (analytical)
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh || true
          type dump_all_docker_logs >/dev/null 2>&1 || dump_all_docker_logs(){ docker ps -a; for i in $(docker ps -aq); do docker logs --details "$i" || true; done; }
          dump_all_docker_logs || true

  graph-kv-dbs:
    runs-on: ubuntu-24.04
    needs: [prepare]
    services:
      neo4j:
        image: neo4j:5.26.13
        env:
          NEO4J_AUTH: neo4j/test1234
        ports: [ "7474:7474", "7687:7687" ]
        options: >-
          --health-cmd="wget -qO- http://127.0.0.1:7474 || exit 1"
          --health-interval=5s --health-retries=60 --health-timeout=4s
          --health-start-period=15s
      arangodb:
        image: arangodb:3.11
        env:
          ARANGO_ROOT_PASSWORD: test1234
        ports: [ "8529:8529" ]
        options: >-
          --health-cmd="curl -fsS http://127.0.0.1:8529/_api/version || exit 1"
          --health-interval=5s --health-retries=60 --health-timeout=4s
          --health-start-period=20s
      etcd:
        image: gcr.io/etcd-development/etcd:v3.5.13
        env:
          ETCD_NAME: s1
          ETCD_DATA_DIR: /var/lib/etcd
          ETCD_INITIAL_ADVERTISE_PEER_URLS: http://127.0.0.1:2380
          ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
          ETCD_ADVERTISE_CLIENT_URLS: http://127.0.0.1:2379
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_INITIAL_CLUSTER: s1=http://127.0.0.1:2380
          ETCD_INITIAL_CLUSTER_STATE: new
          ETCD_LOGGER: zap
        ports: [ "2379:2379", "2380:2380" ]
        options: >-
          --health-cmd="sh -lc 'ETCDCTL_API=3 etcdctl --endpoints=http://127.0.0.1:2379 endpoint health || exit 1'"
          --health-interval=5s --health-retries=80 --health-timeout=4s
          --health-start-period=20s
      couchdb:
        image: couchdb:3
        env:
          COUCHDB_USER: admin
          COUCHDB_PASSWORD: test1234
          COUCHDB_SINGLE_NODE: "true"
        ports: [ "5984:5984" ]
        options: >-
          --health-cmd="curl -fsS http://127.0.0.1:5984/_up || exit 1"
          --health-interval=5s --health-retries=60 --health-timeout=4s
          --health-start-period=15s

    steps:
      - uses: actions/checkout@v4

      - name: Setup echo helpers (local per job)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat /tmp/echo_helpers.sh >/tmp/echo_helpers.sh || true

      - name: Wait for graph/kv services
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          L="${LOG_DIR}/graphkv-wait.log"
          run_cmd "$L" wait_port 127.0.0.1 7474 240
          run_cmd "$L" wait_port 127.0.0.1 7687 240
          run_cmd "$L" wait_port 127.0.0.1 8529 300
          run_cmd "$L" wait_port 127.0.0.1 2379 300
          run_cmd "$L" wait_port 127.0.0.1 5984 240

      - name: Initialize CouchDB system databases
        shell: bash
        run: |
          set -Eeuo pipefail
          base="http://admin:test1234@127.0.0.1:5984"
          curl -fsS "${base}/_users"          || curl -fsS -X PUT "${base}/_users"
          curl -fsS "${base}/_replicator"     || curl -fsS -X PUT "${base}/_replicator"
          curl -fsS "${base}/_global_changes" || curl -fsS -X PUT "${base}/_global_changes"

      - name: Smoke test (graph/kv)
        shell: bash
        run: |
          set -Eeuo pipefail
          curl -fsSI http://127.0.0.1:7474/ | head -n1
          curl -fsS  http://127.0.0.1:8529/_api/version | jq -r '.version'
          curl -fsS  http://127.0.0.1:2379/health
          curl -fsS  http://127.0.0.1:5984/_all_dbs | jq -c .

      - name: Always dump docker logs (graph/kv)
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh || true
          type dump_all_docker_logs >/dev/null 2>&1 || dump_all_docker_logs(){ docker ps -a; for i in $(docker ps -aq); do docker logs --details "$i" || true; done; }
          dump_all_docker_logs || true

  core-dbs:
    runs-on: ubuntu-24.04
    needs: [prepare]
    steps:
      - uses: actions/checkout@v4

      - name: Setup echo helpers (local per job)
        shell: bash
        run: |
          set -Eeuo pipefail
          cat /tmp/echo_helpers.sh >/tmp/echo_helpers.sh || true

      - name: Install DB clients
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            postgresql-client mysql-client redis-tools clickhouse-client \
            curl jq netcat-traditional

      - name: (optional) Probe common ports
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh
          wait_port 127.0.0.1 5432 5 || true
          wait_port 127.0.0.1 3306 5 || true
          wait_port 127.0.0.1 6379 5 || true

      - name: Always dump docker logs (core)
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          source /tmp/echo_helpers.sh || true
          type dump_all_docker_logs >/dev/null 2>&1 || dump_all_docker_logs(){ docker ps -a; for i in $(docker ps -aq); do docker logs --details "$i" || true; done; }
          dump_all_docker_logs || true

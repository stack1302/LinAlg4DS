name: "🧠 MCP Setup + Health + Echo (v3: Inspector safe-pin + CLI fallback)"

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version"
        required: true
        default: "20"
      python_version:
        description: "Python version"
        required: true
        default: "3.12"
      create_pr:
        description: "산출물(mcp 설정/스크립트/로그) PR 생성"
        type: boolean
        required: true
        default: true
  schedule:
    - cron: "*/5 * * * *"

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  TZ: Asia/Seoul
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"
  LOG_DIR: .github/echo_logs
  OUT_DIR: .github/mcp_out
  MCP_DIR: .github/mcp
  NPM_REGISTRY: "https://registry.npmjs.org/"
  # 공급망 가드 예시
  BLOCKED_NPM: "postmark-mcp@1.0.16"

jobs:
  mcp-all-in-one:
    runs-on: ubuntu-24.04
    timeout-minutes: 35

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare dirs & echo helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${OUT_DIR}" "${MCP_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "${LOG_DIR}"
          log(){ printf '%s\n' "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          ok(){  printf '%s %s\n' "${ECHO_OK}" "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          warn(){printf '%s %s\n' "${ECHO_WARN}" "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          fail(){printf '%s %s\n' "${ECHO_FAIL}" "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          run_cmd(){
            log "▶ $*"
            eval $* 2>&1 | tee -a "${LOG_DIR}/mcp.log"
            local rc=${PIPESTATUS[0]}
            if [ $rc -eq 0 ]; then ok "DONE ($rc): $*"; else warn "RC=$rc ← $*"; fi
            return $rc
          }
          npm_retry(){ local cmd="$*"; for i in 1 2 3; do run_cmd "$cmd" && return 0; warn "npm retry $i"; sleep 2; done; return 1; }
          # Inspector 런처(안전한 버전 핀 + 폴백 체인)
          run_inspector(){
            local args="$*"
            # 1) npx with safe-pin (0.16.x)
            if command -v npx >/dev/null; then
              npx -y @modelcontextprotocol/inspector@0.16.5 $args && return 0
              # 2) 글로벌 설치본 직접 호출
              if [ -n "$(npm root -g 2>/dev/null)" ] && [ -f "$(npm root -g)/@modelcontextprotocol/inspector/cli/build/index.js" ]; then
                node "$(npm root -g)/@modelcontextprotocol/inspector/cli/build/index.js" $args && return 0
              fi
            fi
            return 1
          }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "${ECHO_OK} Helpers ready."

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version || '20' }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version || '3.12' }}

      - name: Toolchain versions
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "node -v && npm -v && python -V && pip -V"

      - name: npm registry & audit baseline
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "npm config set registry '${NPM_REGISTRY}'"
          run_cmd "npm ping"

      - name: Install JS SDK + (safe) Inspector
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          # 올바른 SDK 패키지명
          # https://www.npmjs.com/package/@modelcontextprotocol/sdk
          npm_retry "npm i -g @modelcontextprotocol/sdk@latest"
          # Inspector 0.17.0 계열 CLI 버그 회피 → 0.16.x 고정
          # https://github.com/modelcontextprotocol/inspector/issues/834
          npm_retry "npm i -g @modelcontextprotocol/inspector@0.16.5" || warn "global inspector install failed; npx fallback will be used"

          # (옵션) filesystem 서버가 레지스트리에 있으면 설치
          FS_VER="$(npm view @modelcontextprotocol/server-filesystem version || true)"
          if [ -n "$FS_VER" ]; then
            npm_retry "npm i -g @modelcontextprotocol/server-filesystem@${FS_VER}" || warn "server-filesystem install failed (optional)"
          else
            warn "server-filesystem not found (optional)"
          fi

          # 공급망 가드
          if npm ls -g --depth=0 | grep -F "${BLOCKED_NPM}" >/dev/null 2>&1; then
            fail "차단된 MCP 서버 패키지 발견: ${BLOCKED_NPM}"; exit 1
          fi
          ok "No blocked packages."

      - name: Install Python MCP (SDK + CLI)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          # 최신 mcp (PyPI 1.16.0, 2025-10-02 기준) — CLI 포함
          # https://pypi.org/project/mcp/
          run_cmd "python -m pip install --upgrade pip"
          run_cmd "python -m pip install 'mcp[cli]'"

      - name: Generate sample MCP server (Python stdio)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          cat > "${MCP_DIR}/mcp_ping_server.py" <<'PY'
          import asyncio
          from typing import Any, Dict
          from mcp.server.fastmcp import FastMCP

          app = FastMCP("mcp-ping")

          @app.tool()
          def ping(message: str = "pong") -> Dict[str, Any]:
            "Return the message back (health-check)."
            return {"ok": True, "echo": message}

          @app.resource("readme")
          def readme() -> str:
            return "MCP sample server is running."

          if __name__ == "__main__":
            asyncio.run(app.run_stdio())
          PY
          ok "Sample server generated."

      - name: Create MCP config (JSON)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          cat > "${MCP_DIR}/mcp.config.json" <<'JSON'
          {
            "mcpServers": {
              "ping-python": {
                "command": "python",
                "args": [".github/mcp/mcp_ping_server.py"]
              }
            }
          }
          JSON
          ok "MCP config created."

      - name: Health check via Inspector (safe-pin) → fallback to Python CLI
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          set -Eeuo pipefail

          # 1) Inspector --cli 시도 (0.16.5)
          if run_inspector "--cli --config ${MCP_DIR}/mcp.config.json list servers" | tee "${OUT_DIR}/servers.txt"; then
            ok "Inspector list servers OK"
          else
            warn "Inspector failed — will fallback to Python CLI (mcp client)"
          fi

          if run_inspector "--cli --config ${MCP_DIR}/mcp.config.json list tools" | tee "${OUT_DIR}/tools.txt"; then
            ok "Inspector list tools OK"
          fi

          if run_inspector "--cli --config ${MCP_DIR}/mcp.config.json list resources" | tee "${OUT_DIR}/resources.txt"; then
            ok "Inspector list resources OK"
          fi

          if run_inspector "--cli --config ${MCP_DIR}/mcp.config.json call-tool ping-python:ping --args '{\"message\":\"hello\"}'" | tee "${OUT_DIR}/call_ping.json"; then
            ok "Inspector call-tool OK"
          fi

          # 2) 폴백: Python MCP CLI로 동일 헬스체크 수행 (Inspector가 전부/일부 실패했을 때만)
          need_py_fallback="false"
          for f in servers.txt tools.txt resources.txt call_ping.json; do
            [ -s "${OUT_DIR}/${f}" ] || need_py_fallback="true"
          done

          if [ "$need_py_fallback" = "true" ]; then
            warn "Running Python MCP CLI fallback…"

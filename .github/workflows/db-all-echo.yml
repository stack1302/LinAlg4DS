name: "🧠 MCP Setup + Health + Echo (5m Cron, Secure, No-Interactive)"

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version"
        required: true
        default: "20"
      python_version:
        description: "Python version"
        required: true
        default: "3.12"
      create_pr:
        description: "산출물(mcp 설정/스크립트/로그) PR 생성"
        type: boolean
        required: true
        default: true
  schedule:
    - cron: "*/5 * * * *"  # 5분마다

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  TZ: Asia/Seoul
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"
  LOG_DIR: .github/echo_logs
  OUT_DIR: .github/mcp_out
  MCP_DIR: .github/mcp
  # 보안: 알려진 악성/차단 패키지 버전(예시)
  BLOCKED_NPM: "postmark-mcp@1.0.16"  # 최근 악성 사례 대응 (존재 시 실패) :contentReference[oaicite:2]{index=2}

jobs:
  mcp-all-in-one:
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare directories & echo helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${OUT_DIR}" "${MCP_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "${LOG_DIR}"
          logf(){ printf '%s\n' "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          run_cmd(){
            logf "▶ $*"
            # shellcheck disable=SC2086
            eval $* 2>&1 | tee -a "${LOG_DIR}/mcp.log"
            local rc=${PIPESTATUS[0]}
            if [ $rc -eq 0 ]; then echoe "DONE ($rc): $*"; else warn "RC=$rc ← $*"; fi
            return $rc
          }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "${ECHO_OK} Echo helpers ready."

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version || '20' }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version || '3.12' }}

      - name: Install MCP tooling (pinned)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "node -v && npm -v && python -V && pip -V"

          # 1) TypeScript SDK & Inspector( CLI 모드 ) - 버전 고정
          # 공식 문서 및 리포 참고: modelcontextprotocol.io / inspector :contentReference[oaicite:3]{index=3}
          run_cmd "npm i -g @modelcontextprotocol/inspector-cli@0.16.5 @modelcontextprotocol/typescript-sdk@1.0.0"

          # 2) Python SDK - 버전 고정
          # 공식 Python SDK :contentReference[oaicite:4]{index=4}
          run_cmd "python -m pip install --upgrade pip"
          run_cmd "python -m pip install 'mcp[server]'==0.3.0"

          # 3) (옵션) 레퍼런스 파일시스템 서버(NPM) — 존재 시만 설치 시도
          # 서버 패키지는 시점/네임스페이스에 따라 달라질 수 있으므로 실패해도 워크플로우 진행
          # 참조: 서버 카탈로그/예시 페이지 :contentReference[oaicite:5]{index=5}
          if npm view @modelcontextprotocol/server-filesystem@2025.3.28 version >/dev/null 2>&1; then
            run_cmd "npm i -g @modelcontextprotocol/server-filesystem@2025.3.28"
          else
            warn "filesystem server (npm) 고정버전 미발견 — Python 샘플 서버로 헬스체크를 진행합니다."
          fi

          # 4) Supply-chain 가드: 차단 패키지 탐지(최근 악성 MCP 서버 사례) :contentReference[oaicite:6]{index=6}
          if npm ls -g --depth=0 | grep -F "${BLOCKED_NPM}" >/dev/null 2>&1; then
            fail "차단된 MCP 서버 패키지 발견: ${BLOCKED_NPM} — 즉시 중단합니다."
            exit 1
          else
            echoe "차단 패키지 없음 (OK)"
          fi

      - name: Generate sample MCP server (Python, non-interactive)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          cat > "${MCP_DIR}/mcp_ping_server.py" <<'PY'
          # Minimal Python MCP server exposing a simple 'ping' tool and 'readme' resource
          # Uses python SDK (mcp[server]) — CLI mode execution via Inspector :contentReference[oaicite:7]{index=7}
          import asyncio
          from typing import Any, Dict
          from mcp.server.fastmcp import FastMCP

          app = FastMCP("mcp-ping")

          @app.tool()
          def ping(message: str = "pong") -> Dict[str, Any]:
            "Return the message back (health-check)."
            return {"ok": True, "echo": message}

          @app.resource("readme")
          def readme() -> str:
            return "MCP sample server is running."

          if __name__ == "__main__":
            asyncio.run(app.run_stdio())
          PY
          echo "${ECHO_OK} Sample MCP server generated: ${MCP_DIR}/mcp_ping_server.py"

      - name: Create MCP config (JSON) for CLI runs
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          cat > "${MCP_DIR}/mcp.config.json" <<'JSON'
          {
            "mcpServers": {
              "ping-python": {
                "command": "python",
                "args": [".github/mcp/mcp_ping_server.py"]
              }
            }
          }
          JSON
          echo "${ECHO_OK} MCP config created: ${MCP_DIR}/mcp.config.json"

      - name: Run MCP health checks (Inspector CLI, non-interactive)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          set -Eeuo pipefail
          # 1) List Tools/Resources/Prompts via Inspector CLI (non-interactive)
          run_cmd "npx -y @modelcontextprotocol/inspector --cli --config ${MCP_DIR}/mcp.config.json list servers       | tee ${OUT_DIR}/servers.txt"
          run_cmd "npx -y @modelcontextprotocol/inspector --cli --config ${MCP_DIR}/mcp.config.json list tools         | tee ${OUT_DIR}/tools.txt"
          run_cmd "npx -y @modelcontextprotocol/inspector --cli --config ${MCP_DIR}/mcp.config.json list resources     | tee ${OUT_DIR}/resources.txt"
          run_cmd "npx -y @modelcontextprotocol/inspector --cli --config ${MCP_DIR}/mcp.config.json call-tool ping-python:ping --args '{\"message\":\"hello\"}' | tee ${OUT_DIR}/call_ping.json"

          # 간단한 결과 검증
          if grep -q '"ok": true' "${OUT_DIR}/call_ping.json"; then
            echoe "MCP ping tool OK"
          else
            fail "MCP ping tool failed"
            exit 1
          fi

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcp-outputs
          path: |
            .github/mcp_out/**
            .github/mcp/**
            .github/echo_logs/**
          if-no-files-found: warn
          retention-days: 7

      - name: Create PR with generated files (optional)
        if: ${{ inputs.create_pr == true }}
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "feat(mcp): add MCP sample server, config, logs (auto)"
          title: "🧠 MCP Setup + Health + Echo — auto generated"
          body: |
            - Node/Python runners installed
            - MCP Inspector CLI (pinned) & Python SDK installed
            - Sample MCP server (python) + config added
            - Non-interactive health checks passed
            - Echo logs & outputs included
            - 5m cron enabled
          add-paths: |
            .github/mcp/**
            .github/echo_logs/**
            .github/mcp_out/**
          branch: "ci/mcp-setup-auto"

name: "🧠 MCP Setup + Health + Echo (5m Cron, Secure, Non-Interactive v2)"

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version"
        required: true
        default: "20"
      python_version:
        description: "Python version"
        required: true
        default: "3.12"
      create_pr:
        description: "산출물(mcp 설정/스크립트/로그) PR 생성"
        type: boolean
        required: true
        default: true
  schedule:
    - cron: "*/5 * * * *"  # 5분 주기

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  TZ: Asia/Seoul
  ECHO_OK: "✅"
  ECHO_WARN: "⚠️"
  ECHO_FAIL: "❌"
  LOG_DIR: .github/echo_logs
  OUT_DIR: .github/mcp_out
  MCP_DIR: .github/mcp
  NPM_REGISTRY: "https://registry.npmjs.org/"
  # 최근 악성 사례: 발견 시 실패 처리(필요 시 목록 확장)
  BLOCKED_NPM: "postmark-mcp@1.0.16"

jobs:
  mcp-all-in-one:
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare directories & echo helpers
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "${LOG_DIR}" "${OUT_DIR}" "${MCP_DIR}"
          cat > /tmp/echo_helpers.sh <<'SH'
          #!/usr/bin/env bash
          set -Eeuo pipefail
          ECHO_OK="${ECHO_OK:-✅}"; ECHO_WARN="${ECHO_WARN:-⚠️}"; ECHO_FAIL="${ECHO_FAIL:-❌}"
          LOG_DIR="${LOG_DIR:-.github/echo_logs}"; mkdir -p "${LOG_DIR}"
          logf(){ printf '%s\n' "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          echoe(){ printf '%s %s\n' "${ECHO_OK}" "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          warn(){  printf '%s %s\n' "${ECHO_WARN}" "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          fail(){  printf '%s %s\n' "${ECHO_FAIL}" "$*" | tee -a "${LOG_DIR}/mcp.log"; }
          run_cmd(){
            logf "▶ $*"
            # shellcheck disable=SC2086
            eval $* 2>&1 | tee -a "${LOG_DIR}/mcp.log"
            local rc=${PIPESTATUS[0]}
            if [ $rc -eq 0 ]; then echoe "DONE ($rc): $*"; else warn "RC=$rc ← $*"; fi
            return $rc
          }
          npm_retry(){
            # npm 명령 재시도 래퍼(3회)
            local cmd="$*"; local tries=0; local rc=0
            until [ $tries -ge 3 ]; do
              run_cmd "$cmd" && return 0
              rc=$?; tries=$((tries+1))
              warn "npm retry $tries (rc=$rc) → 2s 대기"
              sleep 2
            done
            return $rc
          }
          SH
          chmod +x /tmp/echo_helpers.sh
          echo "${ECHO_OK} Echo helpers ready."

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version || '20' }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version || '3.12' }}

      - name: Toolchain versions
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "node -v && npm -v && python -V && pip -V"

      - name: Configure npm registry (explicit)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          run_cmd "npm config set registry '${NPM_REGISTRY}'"
          run_cmd "npm ping"

      - name: Install MCP tooling (SDK + Inspector) with fallbacks
        shell: bash
        run: |
          source /tmp/echo_helpers.sh

          # ---- JS: SDK (@modelcontextprotocol/sdk) ----
          # 최신 버전을 조회해 정확히 핀고정 설치. 실패 시 npx 사용으로 폴백. :contentReference[oaicite:6]{index=6}
          SDK_VER="$(npm view @modelcontextprotocol/sdk version || true)"
          if [ -n "${SDK_VER}" ]; then
            npm_retry "npm i -g @modelcontextprotocol/sdk@${SDK_VER}"
          else
            warn "SDK version lookup failed → npx 사용으로 폴백 예정"
          fi

          # ---- JS: Inspector (@modelcontextprotocol/inspector) ----
          # Inspector는 글로벌 설치 불필요 — npx 실행 권장. 단, list 시 빠르게 쓰기 위해 글로벌 설치도 시도. :contentReference[oaicite:7]{index=7}
          INS_VER="$(npm view @modelcontextprotocol/inspector version || true)"
          if [ -n "${INS_VER}" ]; then
            npm_retry "npm i -g @modelcontextprotocol/inspector@${INS_VER}" || warn "global inspector install failed — will use npx"
          else
            warn "Inspector version lookup failed — will use npx"
          fi

          # ---- PY: Python SDK (mcp[server]) ---- :contentReference[oaicite:8]{index=8}
          run_cmd "python -m pip install --upgrade pip"
          run_cmd "python -m pip install 'mcp[server]'"

          # ---- (옵션) 파일시스템 서버(있으면 설치) ---- :contentReference[oaicite:9]{index=9}
          FS_VER="$(npm view @modelcontextprotocol/server-filesystem version || true)"
          if [ -n "${FS_VER}" ]; then
            npm_retry "npm i -g @modelcontextprotocol/server-filesystem@${FS_VER}" || warn "server-filesystem install failed — skip (optional)"
          else
            warn "server-filesystem not found — skip (optional)"
          fi

          # ---- Supply-chain guard: known-bad package blocklist ---- :contentReference[oaicite:10]{index=10}
          if npm ls -g --depth=0 | grep -F "${BLOCKED_NPM}" >/dev/null 2>&1; then
            fail "차단된 MCP 서버 패키지 발견: ${BLOCKED_NPM} — 즉시 중단합니다."
            exit 1
          else
            echoe "차단 패키지 없음 (OK)"
          fi

      - name: Generate sample MCP server (Python, stdio)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          cat > "${MCP_DIR}/mcp_ping_server.py" <<'PY'
          import asyncio
          from typing import Any, Dict
          from mcp.server.fastmcp import FastMCP

          app = FastMCP("mcp-ping")

          @app.tool()
          def ping(message: str = "pong") -> Dict[str, Any]:
            "Return the message back (health-check)."
            return {"ok": True, "echo": message}

          @app.resource("readme")
          def readme() -> str:
            return "MCP sample server is running."
          if __name__ == "__main__":
            asyncio.run(app.run_stdio())
          PY
          echo "${ECHO_OK} Sample MCP server generated."

      - name: Create MCP config (JSON)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          cat > "${MCP_DIR}/mcp.config.json" <<'JSON'
          {
            "mcpServers": {
              "ping-python": {
                "command": "python",
                "args": [".github/mcp/mcp_ping_server.py"]
              }
            }
          }
          JSON
          echo "${ECHO_OK} MCP config created."

      - name: MCP health checks (Inspector via npx, non-interactive)
        shell: bash
        run: |
          source /tmp/echo_helpers.sh
          set -Eeuo pipefail
          INS="npx -y @modelcontextprotocol/inspector"
          run_cmd "$INS --cli --config ${MCP_DIR}/mcp.config.json list servers       | tee ${OUT_DIR}/servers.txt"
          run_cmd "$INS --cli --config ${MCP_DIR}/mcp.config.json list tools         | tee ${OUT_DIR}/tools.txt"
          run_cmd "$INS --cli --config ${MCP_DIR}/mcp.config.json list resources     | tee ${OUT_DIR}/resources.txt"
          run_cmd "$INS --cli --config ${MCP_DIR}/mcp.config.json call-tool ping-python:ping --args '{\"message\":\"hello\"}' | tee ${OUT_DIR}/call_ping.json"
          grep -q '"ok": true' "${OUT_DIR}/call_ping.json" && echoe "MCP ping tool OK" || { fail "MCP ping tool failed"; exit 1; }

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcp-outputs
          path: |
            .github/mcp_out/**
            .github/mcp/**
            .github/echo_logs/**
          if-no-files-found: warn
          retention-days: 7

      - name: Create PR with generated files (optional)
        if: ${{ inputs.create_pr == true }}
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "feat(mcp): setup + inspector(npx) + sample server + echo logs (v2)"
          title: "🧠 MCP Setup + Health + Echo — v2 (auto)"
          body: |
            - npm 패키지명/버전 정정: @modelcontextprotocol/sdk, @modelcontextprotocol/inspector (npx)
            - Python SDK(mcp[server]) 설치
            - server-filesystem(옵션): 최신 버전 자동 조회 후 설치
            - npm 레지스트리 명시 + 재시도 래퍼 + 폴백
            - 악성 MCP 서버 차단 리스트 검사(예: postmark-mcp@1.0.16)
            - 5분 주기 cron 유지
          add-paths: |
            .github/mcp/**
            .github/echo_logs/**
            .github/mcp_out/**
          branch: "ci/mcp-setup-auto-v2"
